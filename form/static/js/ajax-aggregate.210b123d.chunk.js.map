{"version":3,"file":"static/js/ajax-aggregate.210b123d.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/deny-list/deny-list.js","../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/serialize/bel-serializer.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/gql.js","../node_modules/@newrelic/browser-agent/dist/esm/common/util/type-check.js","../node_modules/@newrelic/browser-agent/dist/esm/features/ajax/aggregate/index.js"],"sourcesContent":["/** An array of filter objects {hostname, pathname} for identifying XHR events to be excluded from collection.\n * @see {@link https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/filter-ajax-request-events/ Filter AjaxRequest events}\n * @type {Array.<{hostname: string, pathname: string}>}\n */\nvar denyList = [];\n\n/**\n * Evaluates whether an XHR event should be included for collection based on the {@link denyList|AjaxRequest deny list}.\n * @param {Object} params - object with properties of the XHR event\n * @returns {boolean} `true` if request does not match any entries of {@link denyList|deny list}; else `false`\n */\nexport function shouldCollectEvent(params) {\n  if (denyList.length === 0) {\n    return true;\n  }\n\n  // XHR requests with an undefined hostname (e.g., data URLs) should not be collected.\n  if (params.hostname === undefined) {\n    return false;\n  }\n  for (var i = 0; i < denyList.length; i++) {\n    var parsed = denyList[i];\n    if (parsed.hostname === '*') {\n      return false;\n    }\n    if (domainMatchesPattern(parsed.hostname, params.hostname) && comparePath(parsed.pathname, params.pathname)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initializes the {@link denyList|XHR deny list} by extracting hostname and pathname from an array of filter strings.\n * @param {string[]} denyListConfig - array of URL filters to identify XHR requests to be excluded from collection\n */\nexport function setDenyList(denyListConfig) {\n  denyList = [];\n  if (!denyListConfig || !denyListConfig.length) {\n    return;\n  }\n  for (var i = 0; i < denyListConfig.length; i++) {\n    let url = denyListConfig[i];\n    if (!url) continue; // ignore bad values like undefined or empty strings\n\n    if (url.indexOf('http://') === 0) {\n      url = url.substring(7);\n    } else if (url.indexOf('https://') === 0) {\n      url = url.substring(8);\n    }\n    const firstSlash = url.indexOf('/');\n    let host, pathname;\n    if (firstSlash > 0) {\n      host = url.substring(0, firstSlash);\n      pathname = url.substring(firstSlash);\n    } else {\n      host = url;\n      pathname = '';\n    }\n    let [hostname] = host.split(':');\n    denyList.push({\n      hostname,\n      pathname\n    });\n  }\n}\n/**\n * Returns true if the right side of `domain` (end of string) matches `pattern`.\n * @param {string} pattern - a string to be matched against the end of `domain` string\n * @param {string} domain - a domain string with no protocol or path (e.g., app1.example.com)\n * @returns {boolean} `true` if domain matches pattern; else `false`\n */\nfunction domainMatchesPattern(pattern, domain) {\n  if (pattern.length > domain.length) {\n    return false;\n  }\n  return domain.indexOf(pattern) === domain.length - pattern.length;\n}\n\n/**\n * Returns true if a URL path matches a pattern string, disregarding leading slashes.\n * @param {string} pattern - a string to compare with path (e.g., api/v1)\n * @param {string} path - a string representing a URL path (e.g., /api/v1)\n * @returns {boolean} `true` if path and pattern are an exact string match (except for leading slashes); else `false`\n */\nfunction comparePath(pattern, path) {\n  if (pattern.indexOf('/') === 0) {\n    pattern = pattern.substring(1);\n  }\n  if (path.indexOf('/') === 0) {\n    path = path.substring(1);\n  }\n\n  // No path in pattern means match all paths.\n  if (pattern === '') {\n    return true;\n  }\n  return pattern === path;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry,\n        opts\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../util/map-own';\nimport { stringify } from '../util/stringify';\nimport { Obfuscator } from '../util/obfuscate';\nvar hasOwnProp = Object.prototype.hasOwnProperty;\nvar MAX_ATTRIBUTES = 64;\nexport function nullable(val, fn, comma) {\n  return val || val === 0 || val === '' ? fn(val) + (comma ? ',' : '') : '!';\n}\nexport function numeric(n, noDefault) {\n  if (noDefault) {\n    return Math.floor(n).toString(36);\n  }\n  return n === undefined || n === 0 ? '' : Math.floor(n).toString(36);\n}\nexport function getAddStringContext(agentIdentifier) {\n  // eslint-disable-next-line\n  var stringTable = Object.hasOwnProperty('create') ? Object.create(null) : {};\n  var stringTableIdx = 0;\n  return addString;\n  function addString(str) {\n    if (typeof str === 'undefined' || str === '') return '';\n    var obfuscator = new Obfuscator({\n      agentIdentifier\n    });\n    str = String(str);\n    if (obfuscator.shouldObfuscate()) str = obfuscator.obfuscateString(str);\n    if (hasOwnProp.call(stringTable, str)) {\n      return numeric(stringTable[str], true);\n    } else {\n      stringTable[str] = stringTableIdx++;\n      return quoteString(str);\n    }\n  }\n}\nexport function addCustomAttributes(attrs, addString) {\n  var attrParts = [];\n  mapOwn(attrs, function (key, val) {\n    if (attrParts.length >= MAX_ATTRIBUTES) return;\n    var type = 5;\n    var serializedValue;\n    // add key to string table first\n    key = addString(key);\n    switch (typeof val) {\n      case 'object':\n        if (val) {\n          // serialize objects to strings\n          serializedValue = addString(stringify(val));\n        } else {\n          // null attribute type\n          type = 9;\n        }\n        break;\n      case 'number':\n        type = 6;\n        // make sure numbers contain a `.` so they are parsed as doubles\n        serializedValue = val % 1 ? val : val + '.';\n        break;\n      case 'boolean':\n        type = val ? 7 : 8;\n        break;\n      case 'undefined':\n        // we treat undefined as a null attribute (since dirac does not have a concept of undefined)\n        type = 9;\n        break;\n      default:\n        serializedValue = addString(val);\n    }\n    attrParts.push([type, key + (serializedValue ? ',' + serializedValue : '')]);\n  });\n  return attrParts;\n}\nvar escapable = /([,\\\\;])/g;\nfunction quoteString(str) {\n  return \"'\" + str.replace(escapable, '\\\\$1');\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","import { isPureObject } from '../../../common/util/type-check';\n\n/**\n * @typedef {object} GQLMetadata\n * @property {string} operationName Name of the operation\n * @property {string} operationType Type of the operation\n * @property {string} operationFramework Framework responsible for the operation\n */\n\n/**\n * Parses and returns the graphql metadata from a network request. If the network\n * request is not a graphql call, undefined will be returned.\n * @param {object|string} body Ajax request body\n * @param {string} query Ajax request query param string\n * @returns {GQLMetadata | undefined}\n */\nexport function parseGQL() {\n  let {\n    body,\n    query\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!body && !query) return;\n  try {\n    const gqlBody = parseBatchGQL(parseGQLContents(body));\n    if (gqlBody) return gqlBody;\n    const gqlQuery = parseSingleGQL(parseGQLQueryString(query));\n    if (gqlQuery) return gqlQuery;\n  } catch (err) {\n    // parsing failed, return undefined\n  }\n}\n\n/**\n * @param {string|Object} gql The GraphQL object body sent to a GQL server\n * @returns {GQLMetadata}\n */\nfunction parseSingleGQL(contents) {\n  if (typeof contents !== 'object' || !contents.query || typeof contents.query !== 'string') return;\n\n  /** parses gql query string and returns [fullmatch, type match, name match] */\n  const matches = contents.query.trim().match(/^(query|mutation|subscription)\\s?(\\w*)/);\n  const operationType = matches?.[1];\n  if (!operationType) return;\n  const operationName = contents.operationName || matches?.[2] || 'Anonymous';\n  return {\n    operationName,\n    // the operation name of the indiv query\n    operationType,\n    // query, mutation, or subscription,\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseBatchGQL(contents) {\n  if (!contents) return;\n  if (!Array.isArray(contents)) contents = [contents];\n  const opNames = [];\n  const opTypes = [];\n  for (let content of contents) {\n    const operation = parseSingleGQL(content);\n    if (!operation) continue;\n    opNames.push(operation.operationName);\n    opTypes.push(operation.operationType);\n  }\n  if (!opTypes.length) return;\n  return {\n    operationName: opNames.join(','),\n    // the operation name of the indiv query -- joined by ',' for batched results\n    operationType: opTypes.join(','),\n    // query, mutation, or subscription -- joined by ',' for batched results\n    operationFramework: 'GraphQL'\n  };\n}\nfunction parseGQLContents(gqlContents) {\n  let contents;\n  if (!gqlContents || typeof gqlContents !== 'string' && typeof gqlContents !== 'object') return;else if (typeof gqlContents === 'string') contents = JSON.parse(gqlContents);else contents = gqlContents;\n  if (!isPureObject(contents) && !Array.isArray(contents)) return;\n  let isValid = false;\n  if (Array.isArray(contents)) isValid = contents.some(x => validateGQLObject(x));else isValid = validateGQLObject(contents);\n  if (!isValid) return;\n  return contents;\n}\nfunction parseGQLQueryString(gqlQueryString) {\n  if (!gqlQueryString || typeof gqlQueryString !== 'string') return;\n  const params = new URLSearchParams(gqlQueryString);\n  return parseGQLContents(Object.fromEntries(params));\n}\nfunction validateGQLObject(obj) {\n  return !(typeof obj !== 'object' || !obj.query || typeof obj.query !== 'string');\n}","/**\n * Tests a passed object to see if it is a pure object or not. All non-primatives in JS\n * are technically objects and would pass a `typeof` check.\n * @param {*} obj Input object to be tested\n**/\nexport function isPureObject(obj) {\n  return obj?.constructor === {}.constructor;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { registerHandler } from '../../../common/event-emitter/register-handler';\nimport { stringify } from '../../../common/util/stringify';\nimport { nullable, numeric, getAddStringContext, addCustomAttributes } from '../../../common/serialize/bel-serializer';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { getConfiguration, getInfo, getRuntime } from '../../../common/config/config';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { setDenyList, shouldCollectEvent } from '../../../common/deny-list/deny-list';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { SUPPORTABILITY_METRIC_CHANNEL } from '../../metrics/constants';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { parseGQL } from './gql';\nimport { getNREUMInitializedAgent } from '../../../common/window/nreum';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    const agentInit = getConfiguration(agentIdentifier);\n    registerHandler('xhr', storeXhr, this.featureName, this.ee);\n    this.waitForFlags([]).then(() => {\n      const scheduler = new HarvestScheduler('events', {\n        onFinished: onEventsHarvestFinished,\n        getPayload: prepareHarvest\n      }, this);\n      scheduler.startTimer(harvestTimeSeconds);\n      this.drain();\n    });\n    const agentRuntime = getRuntime(agentIdentifier);\n    const denyList = agentRuntime.denyList;\n    setDenyList(denyList);\n    let ajaxEvents = [];\n    let spaAjaxEvents = {};\n    let sentAjaxEvents = [];\n    const ee = this.ee;\n    const harvestTimeSeconds = agentInit.ajax.harvestTimeSeconds || 10;\n    const MAX_PAYLOAD_SIZE = agentInit.ajax.maxPayloadSize || 1000000;\n\n    // Exposes these methods to browser test files -- future TO DO: can be removed once these fns are extracted from the constructor into class func\n    this.storeXhr = storeXhr;\n    this.prepareHarvest = prepareHarvest;\n    this.getStoredEvents = function () {\n      return {\n        ajaxEvents,\n        spaAjaxEvents\n      };\n    };\n\n    // --- v Used by old spa feature\n    ee.on('interactionDone', (interaction, wasSaved) => {\n      if (!spaAjaxEvents[interaction.id]) return;\n      if (!wasSaved) {\n        // if the ixn was saved, then its ajax reqs are part of the payload whereas if it was discarded, it should still be harvested in the ajax feature itself\n        spaAjaxEvents[interaction.id].forEach(function (item) {\n          ajaxEvents.push(item);\n        });\n      }\n      delete spaAjaxEvents[interaction.id];\n    });\n    // --- ^\n    // --- v Used by new soft nav\n    registerHandler('returnAjax', event => ajaxEvents.push(event), this.featureName, this.ee);\n    // --- ^\n\n    const beacon = getInfo(agentIdentifier).errorBeacon;\n    const proxyBeacon = agentInit.proxy.beacon;\n    function storeXhr(params, metrics, startTime, endTime, type) {\n      metrics.time = startTime;\n\n      // send to session traces\n      var hash;\n      if (params.cat) {\n        hash = stringify([params.status, params.cat]);\n      } else {\n        hash = stringify([params.status, params.host, params.pathname]);\n      }\n      const shouldCollect = shouldCollectEvent(params);\n      const ajaxMetricDenyListEnabled = agentInit.feature_flags?.includes('ajax_metrics_deny_list');\n\n      // store as metric\n      if (shouldCollect || !ajaxMetricDenyListEnabled) {\n        aggregator.store('xhr', hash, params, metrics);\n      }\n      if (!shouldCollect) {\n        if (params.hostname === beacon || proxyBeacon && params.hostname === proxyBeacon) {\n          // This doesn't make a distinction if the same-domain request is going to a different port or path...\n          handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/Excluded/Agent'], undefined, FEATURE_NAMES.metrics, ee);\n          if (ajaxMetricDenyListEnabled) {\n            handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Metrics/Excluded/Agent'], undefined, FEATURE_NAMES.metrics, ee);\n          }\n        } else {\n          handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/Excluded/App'], undefined, FEATURE_NAMES.metrics, ee);\n          if (ajaxMetricDenyListEnabled) {\n            handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Metrics/Excluded/App'], undefined, FEATURE_NAMES.metrics, ee);\n          }\n        }\n        return;\n      }\n      handle('bstXhrAgg', ['xhr', hash, params, metrics], undefined, FEATURE_NAMES.sessionTrace, ee);\n      var xhrContext = this;\n      var event = {\n        method: params.method,\n        status: params.status,\n        domain: params.host,\n        path: params.pathname,\n        requestSize: metrics.txSize,\n        responseSize: metrics.rxSize,\n        type,\n        startTime,\n        endTime,\n        callbackDuration: metrics.cbTime\n      };\n      if (xhrContext.dt) {\n        event.spanId = xhrContext.dt.spanId;\n        event.traceId = xhrContext.dt.traceId;\n        event.spanTimestamp = agentRuntime.timeKeeper.correctAbsoluteTimestamp(xhrContext.dt.timestamp);\n      }\n\n      // parsed from the AJAX body, looking for operationName param & parsing query for operationType\n      event.gql = params.gql = parseGQL({\n        body: this.body,\n        query: this?.parsedOrigin?.search\n      });\n      if (event.gql) handle(SUPPORTABILITY_METRIC_CHANNEL, ['Ajax/Events/GraphQL/Bytes-Added', stringify(event.gql).length], undefined, FEATURE_NAMES.metrics, ee);\n      const softNavInUse = Boolean(getNREUMInitializedAgent(agentIdentifier)?.features?.[FEATURE_NAMES.softNav]);\n      if (softNavInUse) {\n        // For newer soft nav (when running), pass the event to it for evaluation -- either part of an interaction or is given back\n        handle('ajax', [event], undefined, FEATURE_NAMES.softNav, ee);\n      } else if (this.spaNode) {\n        // For old spa (when running), if the ajax happened inside an interaction, hold it until the interaction finishes\n        const interactionId = this.spaNode.interaction.id;\n        spaAjaxEvents[interactionId] = spaAjaxEvents[interactionId] || [];\n        spaAjaxEvents[interactionId].push(event);\n      } else {\n        ajaxEvents.push(event);\n      }\n    }\n    function prepareHarvest(options) {\n      options = options || {};\n      if (ajaxEvents.length === 0) {\n        return null;\n      }\n      var payload = getPayload(ajaxEvents, options.maxPayloadSize || MAX_PAYLOAD_SIZE);\n      var payloadObjs = [];\n      for (var i = 0; i < payload.length; i++) {\n        payloadObjs.push({\n          body: {\n            e: payload[i]\n          }\n        });\n      }\n      if (options.retry) {\n        sentAjaxEvents = ajaxEvents.slice();\n      }\n      ajaxEvents = [];\n      return payloadObjs;\n    }\n    function getPayload(events, maxPayloadSize, chunks) {\n      chunks = chunks || 1;\n      var payload = [];\n      var chunkSize = events.length / chunks;\n      var eventChunks = splitChunks(events, chunkSize);\n      var tooBig = false;\n      for (var i = 0; i < eventChunks.length; i++) {\n        var currentChunk = eventChunks[i];\n        if (currentChunk.tooBig(maxPayloadSize)) {\n          if (currentChunk.events.length !== 1) {\n            /* if it is too big BUT it isnt length 1, we can split it down again,\n             else we just want to NOT push it into payload\n             because if it's length 1 and still too big for the maxPayloadSize\n             it cant get any smaller and we dont want to recurse forever */\n            tooBig = true;\n            break;\n          }\n        } else {\n          payload.push(currentChunk.payload);\n        }\n      }\n      // check if the current payload string is too big, if so then run getPayload again with more buckets\n      return tooBig ? getPayload(events, maxPayloadSize, ++chunks) : payload;\n    }\n    function onEventsHarvestFinished(result) {\n      if (result.retry && sentAjaxEvents.length > 0) {\n        ajaxEvents.unshift(...sentAjaxEvents);\n        sentAjaxEvents = [];\n      }\n    }\n    function splitChunks(arr, chunkSize) {\n      chunkSize = chunkSize || arr.length;\n      var chunks = [];\n      for (var i = 0, len = arr.length; i < len; i += chunkSize) {\n        chunks.push(new Chunk(arr.slice(i, i + chunkSize)));\n      }\n      return chunks;\n    }\n    function Chunk(events) {\n      this.addString = getAddStringContext(agentIdentifier); // pass agentIdentifier here\n      this.events = events;\n      this.payload = 'bel.7;';\n      for (var i = 0; i < events.length; i++) {\n        var event = events[i];\n        var fields = [numeric(event.startTime), numeric(event.endTime - event.startTime), numeric(0),\n        // callbackEnd\n        numeric(0),\n        // no callbackDuration for non-SPA events\n        this.addString(event.method), numeric(event.status), this.addString(event.domain), this.addString(event.path), numeric(event.requestSize), numeric(event.responseSize), event.type === 'fetch' ? 1 : '', this.addString(0),\n        // nodeId\n        nullable(event.spanId, this.addString, true) +\n        // guid\n        nullable(event.traceId, this.addString, true) +\n        // traceId\n        nullable(event.spanTimestamp, numeric, false) // timestamp\n        ];\n        var insert = '2,';\n\n        // add custom attributes\n        // gql decorators are added as custom attributes to alleviate need for new BEL schema\n        var attrParts = addCustomAttributes({\n          ...(getInfo(agentIdentifier).jsAttributes || {}),\n          ...(event.gql || {})\n        }, this.addString);\n        fields.unshift(numeric(attrParts.length));\n        insert += fields.join(',');\n        if (attrParts && attrParts.length > 0) {\n          insert += ';' + attrParts.join(';');\n        }\n        if (i + 1 < events.length) insert += ';';\n        this.payload += insert;\n      }\n      this.tooBig = function (maxPayloadSize) {\n        maxPayloadSize = maxPayloadSize || MAX_PAYLOAD_SIZE;\n        return this.payload.length * 2 > maxPayloadSize;\n      };\n    }\n  }\n}"],"names":["denyList","shouldCollectEvent","params","length","undefined","hostname","i","parsed","domainMatchesPattern","comparePath","pathname","setDenyList","denyListConfig","url","indexOf","substring","firstSlash","host","_host$split","split","_slicedToArray","push","pattern","domain","path","HarvestScheduler","_SharedContext","endpoint","opts","parent","_this$sharedContext","_this","_classCallCheck","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","_assertThisInitialized","ee","on","SESSION_EVENTS","runHarvest","forceNoRetry","_inherits","_createClass","key","value","this","onUnload","interval","initialDelay","scheduleHarvest","permanently","arguments","clearTimeout","delay","_this2","setTimeout","_this3","submitMethod","payload","cbRanAfterSend","result","retry","onHarvestFinished","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","apply","_toConsumableArray","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","SharedContext","hasOwnProp","hasOwnProperty","MAX_ATTRIBUTES","nullable","val","fn","comma","numeric","n","noDefault","Math","floor","getAddStringContext","agentIdentifier","stringTable","create","stringTableIdx","str","obfuscator","Obfuscator","String","shouldObfuscate","obfuscateString","replace","escapable","quoteString","addCustomAttributes","attrs","addString","attrParts","mapOwn","serializedValue","type","stringify","isWorkerScope","globalScope","origClose","_step","_iterator","_createForOfIteratorHelper","s","done","task","err","e","f","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","parseGQL","_ref","body","query","gqlBody","contents","Array","isArray","opNames","opTypes","operation","parseSingleGQL","operationName","operationType","join","operationFramework","parseBatchGQL","parseGQLContents","gqlQuery","gqlQueryString","URLSearchParams","fromEntries","parseGQLQueryString","matches","trim","match","gqlContents","JSON","parse","obj","constructor","some","x","validateGQLObject","Aggregate","_AggregateBase","aggregator","FEATURE_NAME","agentInit","getConfiguration","registerHandler","storeXhr","featureName","waitForFlags","then","onEventsHarvestFinished","prepareHarvest","startTimer","harvestTimeSeconds","drain","agentRuntime","getRuntime","ajaxEvents","spaAjaxEvents","sentAjaxEvents","ajax","MAX_PAYLOAD_SIZE","maxPayloadSize","getStoredEvents","interaction","wasSaved","id","item","event","beacon","getInfo","errorBeacon","proxyBeacon","proxy","metrics","startTime","endTime","_agentInit$feature_fl","_this$parsedOrigin","_getNREUMInitializedA","hash","time","cat","status","shouldCollect","ajaxMetricDenyListEnabled","feature_flags","includes","store","handle","FEATURE_NAMES","xhrContext","method","requestSize","txSize","responseSize","rxSize","callbackDuration","cbTime","dt","spanId","traceId","spanTimestamp","timeKeeper","correctAbsoluteTimestamp","timestamp","gql","parsedOrigin","search","SUPPORTABILITY_METRIC_CHANNEL","Boolean","getNREUMInitializedAgent","features","spaNode","interactionId","options","payloadObjs","slice","events","chunks","eventChunks","arr","chunkSize","len","Chunk","splitChunks","tooBig","currentChunk","_ajaxEvents","unshift","fields","insert","_objectSpread","jsAttributes","AggregateBase","_defineProperty"],"sourceRoot":""}