{"version":3,"file":"static/js/1410.ffe27628.chunk.js","mappings":"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","sources":["../node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts","../node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts","../node_modules/@opentelemetry/api/src/baggage/utils.ts","../node_modules/@opentelemetry/api/src/diag-api.ts","../node_modules/@opentelemetry/context-zone-peer-dep/src/ZoneContextManager.ts","../node_modules/@opentelemetry/context-zone-peer-dep/src/util.ts","../node_modules/@opentelemetry/core/src/ExportResult.ts","../node_modules/@opentelemetry/core/src/baggage/constants.ts","../node_modules/@opentelemetry/core/src/baggage/utils.ts","../node_modules/@opentelemetry/core/src/common/global-error-handler.ts","../node_modules/@opentelemetry/core/src/common/logging-error-handler.ts","../node_modules/@opentelemetry/core/src/platform/browser/environment.ts","../node_modules/@opentelemetry/core/src/platform/browser/globalThis.ts","../node_modules/@opentelemetry/core/src/internal/validators.ts","../node_modules/@opentelemetry/core/src/trace/TraceState.ts","../node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts","../node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts","../node_modules/@opentelemetry/core/src/utils/promise.ts","../node_modules/@opentelemetry/core/src/utils/callback.ts","../node_modules/@opentelemetry/core/src/utils/environment.ts","../node_modules/@opentelemetry/core/src/utils/sampling.ts","../node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/types.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/util.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/types.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/util.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts","../node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/browser/OTLPProtoExporterBrowserBase.ts","../node_modules/@opentelemetry/otlp-proto-exporter-base/src/platform/util.ts","../node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts","../node_modules/@opentelemetry/otlp-transformer/src/common/unsigned_long.ts","../node_modules/@opentelemetry/otlp-transformer/src/common/index.ts","../node_modules/@opentelemetry/core/src/platform/browser/hex-to-base64.ts","../node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts","../node_modules/@opentelemetry/otlp-transformer/src/trace/index.ts","../node_modules/@opentelemetry/exporter-trace-otlp-proto/src/platform/browser/OTLPTraceExporter.ts","../node_modules/@opentelemetry/api/src/metrics/NoopMeter.ts","../node_modules/@opentelemetry/api/src/metrics/NoopMeterProvider.ts","../node_modules/@opentelemetry/api/src/api/metrics.ts","../node_modules/@opentelemetry/api/src/metrics-api.ts","../node_modules/@opentelemetry/instrumentation/src/autoLoaderUtils.ts","../node_modules/@opentelemetry/instrumentation/src/autoLoader.ts","../node_modules/@opentelemetry/otlp-proto-exporter-base/src/generated/root.js","../node_modules/@opentelemetry/core/src/platform/browser/sdk-info.ts","../node_modules/@opentelemetry/core/src/version.ts","../node_modules/@opentelemetry/resources/src/Resource.ts","../node_modules/@opentelemetry/resources/src/platform/browser/default-service-name.ts","../node_modules/@opentelemetry/sdk-trace-base/src/export/BatchSpanProcessorBase.ts","../node_modules/@opentelemetry/sdk-trace-base/src/platform/browser/export/BatchSpanProcessor.ts","../node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts","../node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts","../node_modules/@opentelemetry/api/src/baggage/context-helpers.ts","../node_modules/@opentelemetry/core/src/utils/lodash.merge.ts","../node_modules/@opentelemetry/api/src/api/propagation.ts","../node_modules/@opentelemetry/api/src/propagation-api.ts","../node_modules/@opentelemetry/core/src/utils/merge.ts","../node_modules/@opentelemetry/api/src/trace/SamplingResult.ts","../node_modules/@opentelemetry/core/src/propagation/composite.ts","../node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts","../node_modules/@opentelemetry/api/src/trace/status.ts","../node_modules/@opentelemetry/core/src/common/attributes.ts","../node_modules/@opentelemetry/core/src/platform/browser/performance.ts","../node_modules/@opentelemetry/core/src/common/time.ts","../node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts","../node_modules/@opentelemetry/sdk-trace-base/src/Sampler.ts","../node_modules/@opentelemetry/sdk-trace-base/src/Span.ts","../node_modules/@opentelemetry/sdk-trace-base/src/enums.ts","../node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOffSampler.ts","../node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOnSampler.ts","../node_modules/@opentelemetry/sdk-trace-base/src/sampler/ParentBasedSampler.ts","../node_modules/@opentelemetry/sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts","../node_modules/@opentelemetry/sdk-trace-base/src/config.ts","../node_modules/@opentelemetry/sdk-trace-base/src/platform/browser/RandomIdGenerator.ts","../node_modules/@opentelemetry/sdk-trace-base/src/Tracer.ts","../node_modules/@opentelemetry/sdk-trace-base/src/BasicTracerProvider.ts","../node_modules/@opentelemetry/sdk-trace-base/src/utility.ts","../node_modules/@opentelemetry/sdk-trace-base/src/MultiSpanProcessor.ts","../node_modules/@opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts","../node_modules/@opentelemetry/sdk-trace-web/src/StackContextManager.ts","../node_modules/@opentelemetry/sdk-trace-web/src/WebTracerProvider.ts","../node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/protobufjs/minimal.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/zone.js/fesm2015/zone.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { TargetWithEvents } from './types';\nimport { isListenerObject } from './util';\n\n/* Key name to be used to save a context reference in Zone */\nconst ZONE_CONTEXT_KEY = 'OT_ZONE_CONTEXT';\n\n/**\n * ZoneContextManager\n * This module provides an easy functionality for tracing action between asynchronous operations in web.\n * It was not possible with standard [StackContextManager]{@link https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-web/src/StackContextManager.ts}.\n * It heavily depends on [zone.js]{@link https://www.npmjs.com/package/zone.js}.\n * It stores the information about context in zone. Each Context will have always new Zone;\n * It also supports binding a certain Span to a target that has \"addEventListener\" and \"removeEventListener\".\n * When this happens a new zone is being created and the provided Span is being assigned to this zone.\n */\nexport class ZoneContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Helps to create a unique name for the zones - part of zone name\n   */\n  private _zoneCounter = 0;\n\n  /**\n   * Returns the active context from certain zone name\n   * @param activeZone\n   */\n  private _activeContextFromZone(activeZone: Zone | undefined): Context {\n    return (activeZone && activeZone.get(ZONE_CONTEXT_KEY)) || ROOT_CONTEXT;\n  }\n\n  /**\n   * @param context A context (span) to be executed within target function\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * @param context A context (span) to be bind to target\n   * @param obj target object on which the listeners will be patched\n   */\n  private _bindListener<T>(context: Context, obj: T): T {\n    const target = obj as unknown as TargetWithEvents;\n    if (target.__ot_listeners !== undefined) {\n      return obj;\n    }\n    target.__ot_listeners = {};\n\n    if (typeof target.addEventListener === 'function') {\n      target.addEventListener = this._patchAddEventListener(\n        target,\n        target.addEventListener,\n        context\n      );\n    }\n\n    if (typeof target.removeEventListener === 'function') {\n      target.removeEventListener = this._patchRemoveEventListener(\n        target,\n        target.removeEventListener\n      );\n    }\n\n    return obj;\n  }\n\n  /**\n   * Creates a new unique zone name\n   */\n  private _createZoneName() {\n    this._zoneCounter++;\n    const random = Math.random();\n    return `${this._zoneCounter}-${random}`;\n  }\n\n  /**\n   * Creates a new zone\n   * @param zoneName zone name\n   * @param context A context (span) to be bind with Zone\n   */\n  private _createZone(zoneName: string, context: unknown): Zone {\n    return Zone.current.fork({\n      name: zoneName,\n      properties: {\n        [ZONE_CONTEXT_KEY]: context,\n      },\n    });\n  }\n\n  /**\n   * Returns the active zone\n   */\n  private _getActiveZone(): Zone | undefined {\n    return Zone.current;\n  }\n\n  /**\n   * Patches addEventListener method\n   * @param target any target that has \"addEventListener\" method\n   * @param original reference to the patched method\n   * @param [context] context to be bind to the listener\n   */\n  private _patchAddEventListener(\n    target: TargetWithEvents,\n    original: NonNullable<TargetWithEvents['addEventListener']>,\n    context: Context\n  ) {\n    const contextManager = this;\n\n    return function (this: TargetWithEvents, event, listener, opts) {\n      if (target.__ot_listeners === undefined) {\n        target.__ot_listeners = {};\n      }\n      let listeners = target.__ot_listeners[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        target.__ot_listeners[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n      return original.call(this, event, patchedListener, opts);\n    } as TargetWithEvents['addEventListener'];\n  }\n\n  /**\n   * Patches removeEventListener method\n   * @param target any target that has \"removeEventListener\" method\n   * @param original reference to the patched method\n   */\n  private _patchRemoveEventListener(\n    target: TargetWithEvents,\n    original: NonNullable<TargetWithEvents['removeEventListener']>\n  ) {\n    return function (this: TargetWithEvents, event, listener) {\n      if (\n        target.__ot_listeners === undefined ||\n        target.__ot_listeners[event] === undefined\n      ) {\n        return original.call(this, event, listener);\n      }\n      const events = target.__ot_listeners[event];\n      const patchedListener = events.get(listener);\n      events.delete(listener);\n      return original.call(this, event, patchedListener || listener);\n    } as TargetWithEvents['removeEventListener'];\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    if (!this._enabled) {\n      return ROOT_CONTEXT;\n    }\n    const activeZone = this._getActiveZone();\n\n    const active = this._activeContextFromZone(activeZone);\n    if (active) {\n      return active;\n    }\n\n    return ROOT_CONTEXT;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T | TargetWithEvents): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    } else if (isListenerObject(target)) {\n      this._bindListener(context, target);\n    }\n    return target as unknown as T;\n  }\n\n  /**\n   * Disable the context manager (clears all the contexts)\n   */\n  disable(): this {\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    this._enabled = true;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context].\n   *     If [context] is undefined then it will use the active context.\n   *     The context will be set as active\n   * @param context A context (span) to be called with provided callback\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const zoneName = this._createZoneName();\n\n    const newZone = this._createZone(zoneName, context);\n\n    return newZone.run(fn, thisArg, args);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * check if an object has addEventListener and removeEventListener functions then it will return true.\n * Generally only called with a `TargetWithEvents` but may be called with an unknown / any.\n * @param obj - The object to check.\n */\nexport function isListenerObject(obj: any = {}): boolean {\n  return (\n    typeof obj.addEventListener === 'function' &&\n    typeof obj.removeEventListener === 'function'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const globalEnv = parseEnvironment(\n    _globalThis as typeof globalThis & RAW_ENVIRONMENT\n  );\n  return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return typeof process !== 'undefined' && process && process.env\n    ? parseEnvironment(process.env as RAW_ENVIRONMENT)\n    : parseEnvironment(_globalThis as typeof globalThis & RAW_ENVIRONMENT);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ServiceClientType {\n  SPANS,\n  METRICS,\n  LOGS,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: string,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    const error = new OTLPExporterError(`sendBeacon - cannot send ${body}`);\n    onError(error);\n  }\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: string | Blob,\n  url: string,\n  headers: Record<string, string>,\n  exporterTimeout: number,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let xhr: XMLHttpRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      xhr.abort();\n    }\n  }, exporterTimeout);\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    const defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    Object.entries({\n      ...defaultHeaders,\n      ...headers,\n    }).forEach(([k, v]) => {\n      xhr.setRequestHeader(k, v);\n    });\n\n    xhr.send(body);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE && reqIsDestroyed === false) {\n        if (xhr.status >= 200 && xhr.status <= 299) {\n          diag.debug('xhr success', body);\n          onSuccess();\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        } else if (xhr.status && isExportRetryable(xhr.status) && retries > 0) {\n          let retryTime: number;\n          minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n          // retry after interval specified in Retry-After header\n          if (xhr.getResponseHeader('Retry-After')) {\n            retryTime = parseRetryAfterToMills(\n              xhr.getResponseHeader('Retry-After')!\n            );\n          } else {\n            // exponential backoff with jitter\n            retryTime = Math.round(\n              Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay\n            );\n          }\n\n          retryTimer = setTimeout(() => {\n            sendWithRetry(retries - 1, minDelay);\n          }, retryTime);\n        } else {\n          const error = new OTLPExporterError(\n            `Failed to export with XHR (status: ${xhr.status})`,\n            xhr.status\n          );\n          onError(error);\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        }\n      }\n    };\n\n    xhr.onabort = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n\n    xhr.onerror = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n  };\n\n  sendWithRetry();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : Infinity;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils, _globalThis } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem, ServiceRequest> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n\n  /**\n   * @param config\n   */\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {\n    _globalThis.addEventListener('unload', this.shutdown);\n  }\n\n  onShutdown(): void {\n    _globalThis.removeEventListener('unload', this.shutdown);\n  }\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(items);\n    const body = JSON.stringify(serviceRequest);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (this._useXHR) {\n        sendWithXhr(\n          body,\n          this.url,\n          this._headers,\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      } else {\n        sendWithBeacon(\n          body,\n          this.url,\n          { type: 'application/json' },\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { ServiceClientType } from '../types';\nimport {\n  OTLPExporterBrowserBase as OTLPExporterBaseMain,\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  sendWithXhr,\n} from '@opentelemetry/otlp-exporter-base';\n\nimport { getExportRequestProto } from '../util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPProtoExporterBrowserBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBaseMain<ExportItem, ServiceRequest> {\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n  }\n\n  override send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const serviceRequest = this.convert(objects);\n    const exportRequestType = getExportRequestProto(\n      this.getServiceClientType()\n    );\n    const message = exportRequestType.create(serviceRequest);\n\n    if (message) {\n      const body = exportRequestType.encode(message).finish();\n      if (body) {\n        sendWithXhr(\n          new Blob([body], { type: 'application/x-protobuf' }),\n          this.url,\n          {\n            ...this._headers,\n            'Content-Type': 'application/x-protobuf',\n            Accept: 'application/x-protobuf',\n          },\n          this.timeoutMillis,\n          onSuccess,\n          onError\n        );\n      }\n    } else {\n      onError(new OTLPExporterError('No proto'));\n    }\n  }\n\n  abstract getServiceClientType(): ServiceClientType;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as root from '../generated/root';\nimport { ServiceClientType } from './types';\nimport type * as protobuf from 'protobufjs';\n\nexport interface ExportRequestType<T, R = T & { toJSON: () => unknown }> {\n  create(properties?: T): R;\n  encode(message: T, writer?: protobuf.Writer): protobuf.Writer;\n  decode(reader: protobuf.Reader | Uint8Array, length?: number): R;\n}\n\nexport function getExportRequestProto<ServiceRequest>(\n  clientType: ServiceClientType\n): ExportRequestType<ServiceRequest> {\n  if (clientType === ServiceClientType.SPANS) {\n    return root.opentelemetry.proto.collector.trace.v1\n      .ExportTraceServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  } else if (clientType === ServiceClientType.LOGS) {\n    return root.opentelemetry.proto.collector.logs.v1\n      .ExportLogsServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  } else {\n    return root.opentelemetry.proto.collector.metrics.v1\n      .ExportMetricsServiceRequest as unknown as ExportRequestType<ServiceRequest>;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n","/*\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Original version by long.js: https://github.com/dcodeIO/long.js/\n\nconst TWO_PWR_32 = (1 << 16) * (1 << 16);\n\nexport class UnsignedLong {\n  low: number;\n  high: number;\n\n  constructor(low: number, high: number) {\n    this.low = low;\n    this.high = high;\n  }\n\n  static fromU32(value: number): UnsignedLong {\n    return new UnsignedLong(value % TWO_PWR_32 | 0, 0);\n  }\n\n  multiply(value: UnsignedLong): UnsignedLong {\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n\n    const b48 = value.high >>> 16;\n    const b32 = value.high & 0xffff;\n    const b16 = value.low >>> 16;\n    const b00 = value.low & 0xffff;\n\n    let c48 = 0;\n    let c32 = 0;\n    let c16 = 0;\n    let c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n\n    return new UnsignedLong((c16 << 16) | c00, (c48 << 16) | c32);\n  }\n\n  add(value: UnsignedLong): UnsignedLong {\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n\n    const b48 = value.high >>> 16;\n    const b32 = value.high & 0xffff;\n    const b16 = value.low >>> 16;\n    const b00 = value.low & 0xffff;\n\n    let c48 = 0;\n    let c32 = 0;\n    let c16 = 0;\n    let c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n\n    return new UnsignedLong((c16 << 16) | c00, (c48 << 16) | c32);\n  }\n\n  static fromString(str: string): UnsignedLong {\n    let result = UnsignedLong.fromU32(0);\n\n    for (let i = 0; i < str.length; i += 8) {\n      const size = Math.min(8, str.length - i);\n      const value = parseInt(str.substring(i, i + size));\n      if (size < 8) {\n        const power = UnsignedLong.fromU32(Math.pow(10, size));\n        result = result.multiply(power).add(UnsignedLong.fromU32(value));\n      } else {\n        result = result.multiply(UnsignedLong.fromU32(100_000_000));\n        result = result.add(UnsignedLong.fromU32(value));\n      }\n    }\n\n    return result;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFixed64 } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { UnsignedLong } from './unsigned_long';\n\nexport * from './unsigned_long';\n\nconst NANOSECONDS = UnsignedLong.fromU32(1_000_000_000);\n\nexport function hrTimeToFixed64Nanos(hrTime: HrTime): IFixed64 {\n  return UnsignedLong.fromU32(hrTime[0])\n    .multiply(NANOSECONDS)\n    .add(UnsignedLong.fromU32(hrTime[1]));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function hexToBase64(hexStr: string): string {\n  const hexStrLen = hexStr.length;\n  let hexAsciiCharsStr = '';\n  for (let i = 0; i < hexStrLen; i += 2) {\n    const hexPair = hexStr.substring(i, i + 2);\n    const hexVal = parseInt(hexPair, 16);\n    hexAsciiCharsStr += String.fromCharCode(hexVal);\n  }\n  return btoa(hexAsciiCharsStr);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { hrTimeToFixed64Nanos } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\nimport * as core from '@opentelemetry/core';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, useHex?: boolean): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  const parentSpanId = useHex\n    ? span.parentSpanId\n    : span.parentSpanId != null\n    ? core.hexToBase64(span.parentSpanId)\n    : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToFixed64Nanos(span.startTime),\n    endTimeUnixNano: hrTimeToFixed64Nanos(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, useHex)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, useHex?: boolean): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex\n      ? link.context.spanId\n      : core.hexToBase64(link.context.spanId),\n    traceId: useHex\n      ? link.context.traceId\n      : core.hexToBase64(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(timedEvent: TimedEvent): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToFixed64Nanos(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  useHex?: boolean\n): IExportTraceServiceRequest {\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, useHex),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  useHex?: boolean\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const { name, version, schemaUrl } =\n          scopeSpans[0].instrumentationLibrary;\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, useHex)\n        );\n\n        scopeResourceSpans.push({\n          scope: { name, version },\n          spans: spans,\n          schemaUrl: schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0,\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport {\n  OTLPExporterConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  OTLPProtoExporterBrowserBase,\n  ServiceClientType,\n} from '@opentelemetry/otlp-proto-exporter-base';\nimport {\n  createExportTraceServiceRequest,\n  IExportTraceServiceRequest,\n} from '@opentelemetry/otlp-transformer';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/traces';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/**\n * Collector Trace Exporter for Web\n */\nexport class OTLPTraceExporter\n  extends OTLPProtoExporterBrowserBase<ReadableSpan, IExportTraceServiceRequest>\n  implements SpanExporter\n{\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._headers = Object.assign(\n      this._headers,\n      baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS\n      )\n    );\n  }\n  convert(spans: ReadableSpan[]): IExportTraceServiceRequest {\n    return createExportTraceServiceRequest(spans);\n  }\n\n  getDefaultUrl(config: OTLPExporterConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n\n  getServiceClientType() {\n    return ServiceClientType.SPANS;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Histogram,\n  MetricOptions,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  MetricAttributes,\n  Observable,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from './Meter';\nimport { MeterProvider } from './MeterProvider';\nimport { NOOP_METER } from './NoopMeter';\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nexport class NoopMeterProvider implements MeterProvider {\n  getMeter(_name: string, _version?: string, _options?: MeterOptions): Meter {\n    return NOOP_METER;\n  }\n}\n\nexport const NOOP_METER_PROVIDER = new NoopMeterProvider();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport const metrics = MetricsAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { AutoLoaderResult, InstrumentationOption } from './types_internal';\n\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(\n  options: InstrumentationOption[] = []\n): AutoLoaderResult {\n  let instrumentations: Instrumentation[] = [];\n  for (let i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const option = options[i] as any;\n    if (Array.isArray(option)) {\n      const results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if ((option as Instrumentation).instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n\n  return { instrumentations };\n}\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n  parseInstrumentationOptions,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const { instrumentations } = parseInstrumentationOptions(\n    options.instrumentations\n  );\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.opentelemetry = (function() {\n\n    /**\n     * Namespace opentelemetry.\n     * @exports opentelemetry\n     * @namespace\n     */\n    var opentelemetry = {};\n\n    opentelemetry.proto = (function() {\n\n        /**\n         * Namespace proto.\n         * @memberof opentelemetry\n         * @namespace\n         */\n        var proto = {};\n\n        proto.common = (function() {\n\n            /**\n             * Namespace common.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var common = {};\n\n            common.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.common\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.AnyValue = (function() {\n\n                    /**\n                     * Properties of an AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IAnyValue\n                     * @property {string|null} [stringValue] AnyValue stringValue\n                     * @property {boolean|null} [boolValue] AnyValue boolValue\n                     * @property {number|Long|null} [intValue] AnyValue intValue\n                     * @property {number|null} [doubleValue] AnyValue doubleValue\n                     * @property {opentelemetry.proto.common.v1.IArrayValue|null} [arrayValue] AnyValue arrayValue\n                     * @property {opentelemetry.proto.common.v1.IKeyValueList|null} [kvlistValue] AnyValue kvlistValue\n                     * @property {Uint8Array|null} [bytesValue] AnyValue bytesValue\n                     */\n\n                    /**\n                     * Constructs a new AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an AnyValue.\n                     * @implements IAnyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     */\n                    function AnyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * AnyValue stringValue.\n                     * @member {string|null|undefined} stringValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.stringValue = null;\n\n                    /**\n                     * AnyValue boolValue.\n                     * @member {boolean|null|undefined} boolValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.boolValue = null;\n\n                    /**\n                     * AnyValue intValue.\n                     * @member {number|Long|null|undefined} intValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.intValue = null;\n\n                    /**\n                     * AnyValue doubleValue.\n                     * @member {number|null|undefined} doubleValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.doubleValue = null;\n\n                    /**\n                     * AnyValue arrayValue.\n                     * @member {opentelemetry.proto.common.v1.IArrayValue|null|undefined} arrayValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.arrayValue = null;\n\n                    /**\n                     * AnyValue kvlistValue.\n                     * @member {opentelemetry.proto.common.v1.IKeyValueList|null|undefined} kvlistValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.kvlistValue = null;\n\n                    /**\n                     * AnyValue bytesValue.\n                     * @member {Uint8Array|null|undefined} bytesValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.bytesValue = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * AnyValue value.\n                     * @member {\"stringValue\"|\"boolValue\"|\"intValue\"|\"doubleValue\"|\"arrayValue\"|\"kvlistValue\"|\"bytesValue\"|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    Object.defineProperty(AnyValue.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new AnyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue instance\n                     */\n                    AnyValue.create = function create(properties) {\n                        return new AnyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stringValue);\n                        if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.boolValue);\n                        if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);\n                        if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.doubleValue);\n                        if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n                            $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n                            $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.bytesValue);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.stringValue = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.boolValue = reader.bool();\n                                    break;\n                                }\n                            case 3: {\n                                    message.intValue = reader.int64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.doubleValue = reader.double();\n                                    break;\n                                }\n                            case 5: {\n                                    message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.bytesValue = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an AnyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    AnyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            properties.value = 1;\n                            if (!$util.isString(message.stringValue))\n                                return \"stringValue: string expected\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.boolValue !== \"boolean\")\n                                return \"boolValue: boolean expected\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                                return \"intValue: integer|Long expected\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.doubleValue !== \"number\")\n                                return \"doubleValue: number expected\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                                if (error)\n                                    return \"arrayValue.\" + error;\n                            }\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                                if (error)\n                                    return \"kvlistValue.\" + error;\n                            }\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                                return \"bytesValue: buffer expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an AnyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     */\n                    AnyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.arrayValue != null) {\n                            if (typeof object.arrayValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n                            message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n                        }\n                        if (object.kvlistValue != null) {\n                            if (typeof object.kvlistValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n                            message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n                        }\n                        if (object.bytesValue != null)\n                            if (typeof object.bytesValue === \"string\")\n                                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n                            else if (object.bytesValue.length >= 0)\n                                message.bytesValue = object.bytesValue;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an AnyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.AnyValue} message AnyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    AnyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            object.stringValue = message.stringValue;\n                            if (options.oneofs)\n                                object.value = \"stringValue\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            object.boolValue = message.boolValue;\n                            if (options.oneofs)\n                                object.value = \"boolValue\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                            if (options.oneofs)\n                                object.value = \"intValue\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                            if (options.oneofs)\n                                object.value = \"doubleValue\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n                            if (options.oneofs)\n                                object.value = \"arrayValue\";\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n                            if (options.oneofs)\n                                object.value = \"kvlistValue\";\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n                            if (options.oneofs)\n                                object.value = \"bytesValue\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this AnyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    AnyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for AnyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n                    };\n\n                    return AnyValue;\n                })();\n\n                v1.ArrayValue = (function() {\n\n                    /**\n                     * Properties of an ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IArrayValue\n                     * @property {Array.<opentelemetry.proto.common.v1.IAnyValue>|null} [values] ArrayValue values\n                     */\n\n                    /**\n                     * Constructs a new ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an ArrayValue.\n                     * @implements IArrayValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     */\n                    function ArrayValue(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ArrayValue values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IAnyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     */\n                    ArrayValue.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new ArrayValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue instance\n                     */\n                    ArrayValue.create = function create(properties) {\n                        return new ArrayValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ArrayValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArrayValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     */\n                    ArrayValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.ArrayValue} message ArrayValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArrayValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ArrayValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArrayValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ArrayValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n                    };\n\n                    return ArrayValue;\n                })();\n\n                v1.KeyValueList = (function() {\n\n                    /**\n                     * Properties of a KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValueList\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [values] KeyValueList values\n                     */\n\n                    /**\n                     * Constructs a new KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValueList.\n                     * @implements IKeyValueList\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     */\n                    function KeyValueList(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValueList values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     */\n                    KeyValueList.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new KeyValueList instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList instance\n                     */\n                    KeyValueList.create = function create(properties) {\n                        return new KeyValueList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValueList message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValueList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValueList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     */\n                    KeyValueList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValueList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValueList} message KeyValueList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValueList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValueList to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValueList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValueList\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n                    };\n\n                    return KeyValueList;\n                })();\n\n                v1.KeyValue = (function() {\n\n                    /**\n                     * Properties of a KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValue\n                     * @property {string|null} [key] KeyValue key\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [value] KeyValue value\n                     */\n\n                    /**\n                     * Constructs a new KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValue.\n                     * @implements IKeyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     */\n                    function KeyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValue key.\n                     * @member {string|null|undefined} key\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.key = null;\n\n                    /**\n                     * KeyValue value.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.value = null;\n\n                    /**\n                     * Creates a new KeyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue instance\n                     */\n                    KeyValue.create = function create(properties) {\n                        return new KeyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n                        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.key = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            if (!$util.isString(message.key))\n                                return \"key: string expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n                            if (error)\n                                return \"value.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     */\n                    KeyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        if (object.key != null)\n                            message.key = String(object.key);\n                        if (object.value != null) {\n                            if (typeof object.value !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n                            message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValue} message KeyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.key = \"\";\n                            object.value = null;\n                        }\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            object.key = message.key;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n                    };\n\n                    return KeyValue;\n                })();\n\n                v1.InstrumentationScope = (function() {\n\n                    /**\n                     * Properties of an InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IInstrumentationScope\n                     * @property {string|null} [name] InstrumentationScope name\n                     * @property {string|null} [version] InstrumentationScope version\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] InstrumentationScope attributes\n                     * @property {number|null} [droppedAttributesCount] InstrumentationScope droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an InstrumentationScope.\n                     * @implements IInstrumentationScope\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     */\n                    function InstrumentationScope(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * InstrumentationScope name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.name = null;\n\n                    /**\n                     * InstrumentationScope version.\n                     * @member {string|null|undefined} version\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.version = null;\n\n                    /**\n                     * InstrumentationScope attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * InstrumentationScope droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new InstrumentationScope instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope instance\n                     */\n                    InstrumentationScope.create = function create(properties) {\n                        return new InstrumentationScope(properties);\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.version = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 4: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an InstrumentationScope message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    InstrumentationScope.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an InstrumentationScope message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     */\n                    InstrumentationScope.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an InstrumentationScope message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.InstrumentationScope} message InstrumentationScope\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    InstrumentationScope.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.version = \"\";\n                            object.droppedAttributesCount = 0;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this InstrumentationScope to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    InstrumentationScope.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for InstrumentationScope\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n                    };\n\n                    return InstrumentationScope;\n                })();\n\n                return v1;\n            })();\n\n            return common;\n        })();\n\n        proto.resource = (function() {\n\n            /**\n             * Namespace resource.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var resource = {};\n\n            resource.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.resource\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.Resource = (function() {\n\n                    /**\n                     * Properties of a Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @interface IResource\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Resource attributes\n                     * @property {number|null} [droppedAttributesCount] Resource droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @classdesc Represents a Resource.\n                     * @implements IResource\n                     * @constructor\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     */\n                    function Resource(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Resource attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Resource droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new Resource instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource instance\n                     */\n                    Resource.create = function create(properties) {\n                        return new Resource(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Resource message. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Resource message, length delimited. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Resource message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Resource.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Resource message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     */\n                    Resource.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n                            return object;\n                        var message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Resource message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.Resource} message Resource\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Resource.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults)\n                            object.droppedAttributesCount = 0;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Resource to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Resource.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Resource\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n                    };\n\n                    return Resource;\n                })();\n\n                return v1;\n            })();\n\n            return resource;\n        })();\n\n        proto.trace = (function() {\n\n            /**\n             * Namespace trace.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var trace = {};\n\n            trace.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.trace\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.TracesData = (function() {\n\n                    /**\n                     * Properties of a TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ITracesData\n                     * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] TracesData resourceSpans\n                     */\n\n                    /**\n                     * Constructs a new TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a TracesData.\n                     * @implements ITracesData\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     */\n                    function TracesData(properties) {\n                        this.resourceSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TracesData resourceSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     */\n                    TracesData.prototype.resourceSpans = $util.emptyArray;\n\n                    /**\n                     * Creates a new TracesData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData instance\n                     */\n                    TracesData.create = function create(properties) {\n                        return new TracesData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceSpans != null && message.resourceSpans.length)\n                            for (var i = 0; i < message.resourceSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceSpans && message.resourceSpans.length))\n                                        message.resourceSpans = [];\n                                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TracesData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracesData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                            if (!Array.isArray(message.resourceSpans))\n                                return \"resourceSpans: array expected\";\n                            for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                if (error)\n                                    return \"resourceSpans.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TracesData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     */\n                    TracesData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        if (object.resourceSpans) {\n                            if (!Array.isArray(object.resourceSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n                            message.resourceSpans = [];\n                            for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                if (typeof object.resourceSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TracesData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.TracesData} message TracesData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracesData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceSpans = [];\n                        if (message.resourceSpans && message.resourceSpans.length) {\n                            object.resourceSpans = [];\n                            for (var j = 0; j < message.resourceSpans.length; ++j)\n                                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TracesData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracesData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for TracesData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n                    };\n\n                    return TracesData;\n                })();\n\n                v1.ResourceSpans = (function() {\n\n                    /**\n                     * Properties of a ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IResourceSpans\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceSpans resource\n                     * @property {Array.<opentelemetry.proto.trace.v1.IScopeSpans>|null} [scopeSpans] ResourceSpans scopeSpans\n                     * @property {string|null} [schemaUrl] ResourceSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ResourceSpans.\n                     * @implements IResourceSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     */\n                    function ResourceSpans(properties) {\n                        this.scopeSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceSpans resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.resource = null;\n\n                    /**\n                     * ResourceSpans scopeSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IScopeSpans>} scopeSpans\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n\n                    /**\n                     * ResourceSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans instance\n                     */\n                    ResourceSpans.create = function create(properties) {\n                        return new ResourceSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeSpans != null && message.scopeSpans.length)\n                            for (var i = 0; i < message.scopeSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeSpans && message.scopeSpans.length))\n                                        message.scopeSpans = [];\n                                    message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n                            if (!Array.isArray(message.scopeSpans))\n                                return \"scopeSpans: array expected\";\n                            for (var i = 0; i < message.scopeSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                                if (error)\n                                    return \"scopeSpans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     */\n                    ResourceSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeSpans) {\n                            if (!Array.isArray(object.scopeSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n                            message.scopeSpans = [];\n                            for (var i = 0; i < object.scopeSpans.length; ++i) {\n                                if (typeof object.scopeSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ResourceSpans} message ResourceSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeSpans = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeSpans && message.scopeSpans.length) {\n                            object.scopeSpans = [];\n                            for (var j = 0; j < message.scopeSpans.length; ++j)\n                                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n                    };\n\n                    return ResourceSpans;\n                })();\n\n                v1.ScopeSpans = (function() {\n\n                    /**\n                     * Properties of a ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IScopeSpans\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeSpans scope\n                     * @property {Array.<opentelemetry.proto.trace.v1.ISpan>|null} [spans] ScopeSpans spans\n                     * @property {string|null} [schemaUrl] ScopeSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ScopeSpans.\n                     * @implements IScopeSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     */\n                    function ScopeSpans(properties) {\n                        this.spans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeSpans scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.scope = null;\n\n                    /**\n                     * ScopeSpans spans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.ISpan>} spans\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.spans = $util.emptyArray;\n\n                    /**\n                     * ScopeSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans instance\n                     */\n                    ScopeSpans.create = function create(properties) {\n                        return new ScopeSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.spans != null && message.spans.length)\n                            for (var i = 0; i < message.spans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.spans && message.spans.length))\n                                        message.spans = [];\n                                    message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n                            if (!Array.isArray(message.spans))\n                                return \"spans: array expected\";\n                            for (var i = 0; i < message.spans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                                if (error)\n                                    return \"spans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     */\n                    ScopeSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.spans) {\n                            if (!Array.isArray(object.spans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n                            message.spans = [];\n                            for (var i = 0; i < object.spans.length; ++i) {\n                                if (typeof object.spans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ScopeSpans} message ScopeSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.spans = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.spans && message.spans.length) {\n                            object.spans = [];\n                            for (var j = 0; j < message.spans.length; ++j)\n                                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n                    };\n\n                    return ScopeSpans;\n                })();\n\n                v1.Span = (function() {\n\n                    /**\n                     * Properties of a Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ISpan\n                     * @property {Uint8Array|null} [traceId] Span traceId\n                     * @property {Uint8Array|null} [spanId] Span spanId\n                     * @property {string|null} [traceState] Span traceState\n                     * @property {Uint8Array|null} [parentSpanId] Span parentSpanId\n                     * @property {string|null} [name] Span name\n                     * @property {opentelemetry.proto.trace.v1.Span.SpanKind|null} [kind] Span kind\n                     * @property {number|Long|null} [startTimeUnixNano] Span startTimeUnixNano\n                     * @property {number|Long|null} [endTimeUnixNano] Span endTimeUnixNano\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Span attributes\n                     * @property {number|null} [droppedAttributesCount] Span droppedAttributesCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.IEvent>|null} [events] Span events\n                     * @property {number|null} [droppedEventsCount] Span droppedEventsCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.ILink>|null} [links] Span links\n                     * @property {number|null} [droppedLinksCount] Span droppedLinksCount\n                     * @property {opentelemetry.proto.trace.v1.IStatus|null} [status] Span status\n                     */\n\n                    /**\n                     * Constructs a new Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Span.\n                     * @implements ISpan\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     */\n                    function Span(properties) {\n                        this.attributes = [];\n                        this.events = [];\n                        this.links = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Span traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceId = null;\n\n                    /**\n                     * Span spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.spanId = null;\n\n                    /**\n                     * Span traceState.\n                     * @member {string|null|undefined} traceState\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceState = null;\n\n                    /**\n                     * Span parentSpanId.\n                     * @member {Uint8Array|null|undefined} parentSpanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.parentSpanId = null;\n\n                    /**\n                     * Span name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.name = null;\n\n                    /**\n                     * Span kind.\n                     * @member {opentelemetry.proto.trace.v1.Span.SpanKind|null|undefined} kind\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.kind = null;\n\n                    /**\n                     * Span startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * Span endTimeUnixNano.\n                     * @member {number|Long|null|undefined} endTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.endTimeUnixNano = null;\n\n                    /**\n                     * Span attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Span droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Span events.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.IEvent>} events\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.events = $util.emptyArray;\n\n                    /**\n                     * Span droppedEventsCount.\n                     * @member {number|null|undefined} droppedEventsCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedEventsCount = null;\n\n                    /**\n                     * Span links.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.ILink>} links\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.links = $util.emptyArray;\n\n                    /**\n                     * Span droppedLinksCount.\n                     * @member {number|null|undefined} droppedLinksCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedLinksCount = null;\n\n                    /**\n                     * Span status.\n                     * @member {opentelemetry.proto.trace.v1.IStatus|null|undefined} status\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.status = null;\n\n                    /**\n                     * Creates a new Span instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span instance\n                     */\n                    Span.create = function create(properties) {\n                        return new Span(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Span message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                        if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                        if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.parentSpanId);\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);\n                        if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kind);\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.startTimeUnixNano);\n                        if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n                            writer.uint32(/* id 8, wireType 1 =*/65).fixed64(message.endTimeUnixNano);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.droppedAttributesCount);\n                        if (message.events != null && message.events.length)\n                            for (var i = 0; i < message.events.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n                            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.droppedEventsCount);\n                        if (message.links != null && message.links.length)\n                            for (var i = 0; i < message.links.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                        if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n                            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.droppedLinksCount);\n                        if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                            $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Span message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 2: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 3: {\n                                    message.traceState = reader.string();\n                                    break;\n                                }\n                            case 4: {\n                                    message.parentSpanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 6: {\n                                    message.kind = reader.int32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.endTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.events && message.events.length))\n                                        message.events = [];\n                                    message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.droppedEventsCount = reader.uint32();\n                                    break;\n                                }\n                            case 13: {\n                                    if (!(message.links && message.links.length))\n                                        message.links = [];\n                                    message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 14: {\n                                    message.droppedLinksCount = reader.uint32();\n                                    break;\n                                }\n                            case 15: {\n                                    message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Span message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Span.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            if (!$util.isString(message.traceState))\n                                return \"traceState: string expected\";\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                                return \"parentSpanId: buffer expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            switch (message.kind) {\n                            default:\n                                return \"kind: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                                break;\n                            }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                                return \"endTimeUnixNano: integer|Long expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.events != null && message.hasOwnProperty(\"events\")) {\n                            if (!Array.isArray(message.events))\n                                return \"events: array expected\";\n                            for (var i = 0; i < message.events.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                                if (error)\n                                    return \"events.\" + error;\n                            }\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            if (!$util.isInteger(message.droppedEventsCount))\n                                return \"droppedEventsCount: integer expected\";\n                        if (message.links != null && message.hasOwnProperty(\"links\")) {\n                            if (!Array.isArray(message.links))\n                                return \"links: array expected\";\n                            for (var i = 0; i < message.links.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                                if (error)\n                                    return \"links.\" + error;\n                            }\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            if (!$util.isInteger(message.droppedLinksCount))\n                                return \"droppedLinksCount: integer expected\";\n                        if (message.status != null && message.hasOwnProperty(\"status\")) {\n                            var error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n                            if (error)\n                                return \"status.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Span message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     */\n                    Span.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Span();\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceState != null)\n                            message.traceState = String(object.traceState);\n                        if (object.parentSpanId != null)\n                            if (typeof object.parentSpanId === \"string\")\n                                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n                            else if (object.parentSpanId.length >= 0)\n                                message.parentSpanId = object.parentSpanId;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        switch (object.kind) {\n                        default:\n                            if (typeof object.kind === \"number\") {\n                                message.kind = object.kind;\n                                break;\n                            }\n                            break;\n                        case \"SPAN_KIND_UNSPECIFIED\":\n                        case 0:\n                            message.kind = 0;\n                            break;\n                        case \"SPAN_KIND_INTERNAL\":\n                        case 1:\n                            message.kind = 1;\n                            break;\n                        case \"SPAN_KIND_SERVER\":\n                        case 2:\n                            message.kind = 2;\n                            break;\n                        case \"SPAN_KIND_CLIENT\":\n                        case 3:\n                            message.kind = 3;\n                            break;\n                        case \"SPAN_KIND_PRODUCER\":\n                        case 4:\n                            message.kind = 4;\n                            break;\n                        case \"SPAN_KIND_CONSUMER\":\n                        case 5:\n                            message.kind = 5;\n                            break;\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.endTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n                            else if (typeof object.endTimeUnixNano === \"string\")\n                                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n                            else if (typeof object.endTimeUnixNano === \"number\")\n                                message.endTimeUnixNano = object.endTimeUnixNano;\n                            else if (typeof object.endTimeUnixNano === \"object\")\n                                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.events) {\n                            if (!Array.isArray(object.events))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n                            message.events = [];\n                            for (var i = 0; i < object.events.length; ++i) {\n                                if (typeof object.events[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n                            }\n                        }\n                        if (object.droppedEventsCount != null)\n                            message.droppedEventsCount = object.droppedEventsCount >>> 0;\n                        if (object.links) {\n                            if (!Array.isArray(object.links))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n                            message.links = [];\n                            for (var i = 0; i < object.links.length; ++i) {\n                                if (typeof object.links[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n                            }\n                        }\n                        if (object.droppedLinksCount != null)\n                            message.droppedLinksCount = object.droppedLinksCount >>> 0;\n                        if (object.status != null) {\n                            if (typeof object.status !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n                            message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Span message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Span} message Span\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Span.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.events = [];\n                            object.links = [];\n                        }\n                        if (options.defaults) {\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            object.traceState = \"\";\n                            if (options.bytes === String)\n                                object.parentSpanId = \"\";\n                            else {\n                                object.parentSpanId = [];\n                                if (options.bytes !== Array)\n                                    object.parentSpanId = $util.newBuffer(object.parentSpanId);\n                            }\n                            object.name = \"\";\n                            object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.droppedAttributesCount = 0;\n                            object.droppedEventsCount = 0;\n                            object.droppedLinksCount = 0;\n                            object.status = null;\n                        }\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            object.traceState = message.traceState;\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === undefined ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (typeof message.endTimeUnixNano === \"number\")\n                                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n                            else\n                                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.events && message.events.length) {\n                            object.events = [];\n                            for (var j = 0; j < message.events.length; ++j)\n                                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            object.droppedEventsCount = message.droppedEventsCount;\n                        if (message.links && message.links.length) {\n                            object.links = [];\n                            for (var j = 0; j < message.links.length; ++j)\n                                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            object.droppedLinksCount = message.droppedLinksCount;\n                        if (message.status != null && message.hasOwnProperty(\"status\"))\n                            object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Span to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Span.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Span\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n                    };\n\n                    /**\n                     * SpanKind enum.\n                     * @name opentelemetry.proto.trace.v1.Span.SpanKind\n                     * @enum {number}\n                     * @property {number} SPAN_KIND_UNSPECIFIED=0 SPAN_KIND_UNSPECIFIED value\n                     * @property {number} SPAN_KIND_INTERNAL=1 SPAN_KIND_INTERNAL value\n                     * @property {number} SPAN_KIND_SERVER=2 SPAN_KIND_SERVER value\n                     * @property {number} SPAN_KIND_CLIENT=3 SPAN_KIND_CLIENT value\n                     * @property {number} SPAN_KIND_PRODUCER=4 SPAN_KIND_PRODUCER value\n                     * @property {number} SPAN_KIND_CONSUMER=5 SPAN_KIND_CONSUMER value\n                     */\n                    Span.SpanKind = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n                        values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n                        values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n                        values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n                        values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n                        return values;\n                    })();\n\n                    Span.Event = (function() {\n\n                        /**\n                         * Properties of an Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface IEvent\n                         * @property {number|Long|null} [timeUnixNano] Event timeUnixNano\n                         * @property {string|null} [name] Event name\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Event attributes\n                         * @property {number|null} [droppedAttributesCount] Event droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents an Event.\n                         * @implements IEvent\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         */\n                        function Event(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Event timeUnixNano.\n                         * @member {number|Long|null|undefined} timeUnixNano\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.timeUnixNano = null;\n\n                        /**\n                         * Event name.\n                         * @member {string|null|undefined} name\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.name = null;\n\n                        /**\n                         * Event attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Event droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Event instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event instance\n                         */\n                        Event.create = function create(properties) {\n                            return new Event(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Event message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Event message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.timeUnixNano = reader.fixed64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.name = reader.string();\n                                        break;\n                                    }\n                                case 3: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 4: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an Event message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Event.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                    return \"timeUnixNano: integer|Long expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         */\n                        Event.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            if (object.timeUnixNano != null)\n                                if ($util.Long)\n                                    (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                                else if (typeof object.timeUnixNano === \"string\")\n                                    message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                                else if (typeof object.timeUnixNano === \"number\")\n                                    message.timeUnixNano = object.timeUnixNano;\n                                else if (typeof object.timeUnixNano === \"object\")\n                                    message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an Event message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Event} message Event\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Event.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                                object.name = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (typeof message.timeUnixNano === \"number\")\n                                    object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                                else\n                                    object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Event to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Event.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Event\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n                        };\n\n                        return Event;\n                    })();\n\n                    Span.Link = (function() {\n\n                        /**\n                         * Properties of a Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface ILink\n                         * @property {Uint8Array|null} [traceId] Link traceId\n                         * @property {Uint8Array|null} [spanId] Link spanId\n                         * @property {string|null} [traceState] Link traceState\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Link attributes\n                         * @property {number|null} [droppedAttributesCount] Link droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents a Link.\n                         * @implements ILink\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         */\n                        function Link(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Link traceId.\n                         * @member {Uint8Array|null|undefined} traceId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceId = null;\n\n                        /**\n                         * Link spanId.\n                         * @member {Uint8Array|null|undefined} spanId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.spanId = null;\n\n                        /**\n                         * Link traceState.\n                         * @member {string|null|undefined} traceState\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceState = null;\n\n                        /**\n                         * Link attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Link droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Link instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link instance\n                         */\n                        Link.create = function create(properties) {\n                            return new Link(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Link message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Link message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.traceId = reader.bytes();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.spanId = reader.bytes();\n                                        break;\n                                    }\n                                case 3: {\n                                        message.traceState = reader.string();\n                                        break;\n                                    }\n                                case 4: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 5: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Link message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Link.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                    return \"traceId: buffer expected\";\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                    return \"spanId: buffer expected\";\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                if (!$util.isString(message.traceState))\n                                    return \"traceState: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Link message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         */\n                        Link.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            if (object.traceId != null)\n                                if (typeof object.traceId === \"string\")\n                                    $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                                else if (object.traceId.length >= 0)\n                                    message.traceId = object.traceId;\n                            if (object.spanId != null)\n                                if (typeof object.spanId === \"string\")\n                                    $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                                else if (object.spanId.length >= 0)\n                                    message.spanId = object.spanId;\n                            if (object.traceState != null)\n                                message.traceState = String(object.traceState);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Link message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Link} message Link\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Link.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if (options.bytes === String)\n                                    object.traceId = \"\";\n                                else {\n                                    object.traceId = [];\n                                    if (options.bytes !== Array)\n                                        object.traceId = $util.newBuffer(object.traceId);\n                                }\n                                if (options.bytes === String)\n                                    object.spanId = \"\";\n                                else {\n                                    object.spanId = [];\n                                    if (options.bytes !== Array)\n                                        object.spanId = $util.newBuffer(object.spanId);\n                                }\n                                object.traceState = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                object.traceState = message.traceState;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Link to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Link.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Link\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n                        };\n\n                        return Link;\n                    })();\n\n                    return Span;\n                })();\n\n                v1.Status = (function() {\n\n                    /**\n                     * Properties of a Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IStatus\n                     * @property {string|null} [message] Status message\n                     * @property {opentelemetry.proto.trace.v1.Status.StatusCode|null} [code] Status code\n                     */\n\n                    /**\n                     * Constructs a new Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Status.\n                     * @implements IStatus\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     */\n                    function Status(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Status message.\n                     * @member {string|null|undefined} message\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.message = null;\n\n                    /**\n                     * Status code.\n                     * @member {opentelemetry.proto.trace.v1.Status.StatusCode|null|undefined} code\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.code = null;\n\n                    /**\n                     * Creates a new Status instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status instance\n                     */\n                    Status.create = function create(properties) {\n                        return new Status(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Status message. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n                        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Status message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 2: {\n                                    message.message = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.code = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Status message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Status.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            if (!$util.isString(message.message))\n                                return \"message: string expected\";\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            switch (message.code) {\n                            default:\n                                return \"code: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     */\n                    Status.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Status();\n                        if (object.message != null)\n                            message.message = String(object.message);\n                        switch (object.code) {\n                        default:\n                            if (typeof object.code === \"number\") {\n                                message.code = object.code;\n                                break;\n                            }\n                            break;\n                        case \"STATUS_CODE_UNSET\":\n                        case 0:\n                            message.code = 0;\n                            break;\n                        case \"STATUS_CODE_OK\":\n                        case 1:\n                            message.code = 1;\n                            break;\n                        case \"STATUS_CODE_ERROR\":\n                        case 2:\n                            message.code = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Status message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Status} message Status\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Status.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.message = \"\";\n                            object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n                        }\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            object.message = message.message;\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === undefined ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Status to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Status.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Status\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n                    };\n\n                    /**\n                     * StatusCode enum.\n                     * @name opentelemetry.proto.trace.v1.Status.StatusCode\n                     * @enum {number}\n                     * @property {number} STATUS_CODE_UNSET=0 STATUS_CODE_UNSET value\n                     * @property {number} STATUS_CODE_OK=1 STATUS_CODE_OK value\n                     * @property {number} STATUS_CODE_ERROR=2 STATUS_CODE_ERROR value\n                     */\n                    Status.StatusCode = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n                        values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n                        values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n                        return values;\n                    })();\n\n                    return Status;\n                })();\n\n                return v1;\n            })();\n\n            return trace;\n        })();\n\n        proto.collector = (function() {\n\n            /**\n             * Namespace collector.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var collector = {};\n\n            collector.trace = (function() {\n\n                /**\n                 * Namespace trace.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var trace = {};\n\n                trace.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.trace\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.TraceService = (function() {\n\n                        /**\n                         * Constructs a new TraceService service.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents a TraceService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (TraceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TraceService;\n\n                        /**\n                         * Creates new TraceService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {TraceService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.trace.v1.TraceService#export_}.\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} [response] ExportTraceServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.trace.v1.TraceService.ExportCallback} callback Node-style callback called with the error, if any, and ExportTraceServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return TraceService;\n                    })();\n\n                    v1.ExportTraceServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceRequest\n                         * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] ExportTraceServiceRequest resourceSpans\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceRequest.\n                         * @implements IExportTraceServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceRequest(properties) {\n                            this.resourceSpans = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceRequest resourceSpans.\n                         * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         */\n                        ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportTraceServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest instance\n                         */\n                        ExportTraceServiceRequest.create = function create(properties) {\n                            return new ExportTraceServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceSpans != null && message.resourceSpans.length)\n                                for (var i = 0; i < message.resourceSpans.length; ++i)\n                                    $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceSpans && message.resourceSpans.length))\n                                            message.resourceSpans = [];\n                                        message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                                if (!Array.isArray(message.resourceSpans))\n                                    return \"resourceSpans: array expected\";\n                                for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                    var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                    if (error)\n                                        return \"resourceSpans.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         */\n                        ExportTraceServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            if (object.resourceSpans) {\n                                if (!Array.isArray(object.resourceSpans))\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                                message.resourceSpans = [];\n                                for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                    if (typeof object.resourceSpans[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                                    message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} message ExportTraceServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceSpans = [];\n                            if (message.resourceSpans && message.resourceSpans.length) {\n                                object.resourceSpans = [];\n                                for (var j = 0; j < message.resourceSpans.length; ++j)\n                                    object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n                        };\n\n                        return ExportTraceServiceRequest;\n                    })();\n\n                    v1.ExportTraceServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceResponse\n                         * @property {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null} [partialSuccess] ExportTraceServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceResponse.\n                         * @implements IExportTraceServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         */\n                        ExportTraceServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportTraceServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse instance\n                         */\n                        ExportTraceServiceResponse.create = function create(properties) {\n                            return new ExportTraceServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         */\n                        ExportTraceServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} message ExportTraceServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n                        };\n\n                        return ExportTraceServiceResponse;\n                    })();\n\n                    v1.ExportTracePartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTracePartialSuccess\n                         * @property {number|Long|null} [rejectedSpans] ExportTracePartialSuccess rejectedSpans\n                         * @property {string|null} [errorMessage] ExportTracePartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTracePartialSuccess.\n                         * @implements IExportTracePartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportTracePartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTracePartialSuccess rejectedSpans.\n                         * @member {number|Long|null|undefined} rejectedSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.rejectedSpans = null;\n\n                        /**\n                         * ExportTracePartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportTracePartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess instance\n                         */\n                        ExportTracePartialSuccess.create = function create(properties) {\n                            return new ExportTracePartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedSpans != null && Object.hasOwnProperty.call(message, \"rejectedSpans\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedSpans);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedSpans = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTracePartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTracePartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (!$util.isInteger(message.rejectedSpans) && !(message.rejectedSpans && $util.isInteger(message.rejectedSpans.low) && $util.isInteger(message.rejectedSpans.high)))\n                                    return \"rejectedSpans: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTracePartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         */\n                        ExportTracePartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            if (object.rejectedSpans != null)\n                                if ($util.Long)\n                                    (message.rejectedSpans = $util.Long.fromValue(object.rejectedSpans)).unsigned = false;\n                                else if (typeof object.rejectedSpans === \"string\")\n                                    message.rejectedSpans = parseInt(object.rejectedSpans, 10);\n                                else if (typeof object.rejectedSpans === \"number\")\n                                    message.rejectedSpans = object.rejectedSpans;\n                                else if (typeof object.rejectedSpans === \"object\")\n                                    message.rejectedSpans = new $util.LongBits(object.rejectedSpans.low >>> 0, object.rejectedSpans.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTracePartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} message ExportTracePartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTracePartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedSpans = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedSpans = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (typeof message.rejectedSpans === \"number\")\n                                    object.rejectedSpans = options.longs === String ? String(message.rejectedSpans) : message.rejectedSpans;\n                                else\n                                    object.rejectedSpans = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedSpans) : options.longs === Number ? new $util.LongBits(message.rejectedSpans.low >>> 0, message.rejectedSpans.high >>> 0).toNumber() : message.rejectedSpans;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTracePartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTracePartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTracePartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTracePartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\";\n                        };\n\n                        return ExportTracePartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return trace;\n            })();\n\n            collector.metrics = (function() {\n\n                /**\n                 * Namespace metrics.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var metrics = {};\n\n                metrics.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.metrics\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.MetricsService = (function() {\n\n                        /**\n                         * Constructs a new MetricsService service.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents a MetricsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function MetricsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (MetricsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MetricsService;\n\n                        /**\n                         * Creates new MetricsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {MetricsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        MetricsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.metrics.v1.MetricsService#export_}.\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} [response] ExportMetricsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.metrics.v1.MetricsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportMetricsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(MetricsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return MetricsService;\n                    })();\n\n                    v1.ExportMetricsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceRequest\n                         * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] ExportMetricsServiceRequest resourceMetrics\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceRequest.\n                         * @implements IExportMetricsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceRequest(properties) {\n                            this.resourceMetrics = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceRequest resourceMetrics.\n                         * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         */\n                        ExportMetricsServiceRequest.prototype.resourceMetrics = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportMetricsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest instance\n                         */\n                        ExportMetricsServiceRequest.create = function create(properties) {\n                            return new ExportMetricsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceMetrics != null && message.resourceMetrics.length)\n                                for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                    $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                            message.resourceMetrics = [];\n                                        message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                                if (!Array.isArray(message.resourceMetrics))\n                                    return \"resourceMetrics: array expected\";\n                                for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                    var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                    if (error)\n                                        return \"resourceMetrics.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         */\n                        ExportMetricsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            if (object.resourceMetrics) {\n                                if (!Array.isArray(object.resourceMetrics))\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: array expected\");\n                                message.resourceMetrics = [];\n                                for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                    if (typeof object.resourceMetrics[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: object expected\");\n                                    message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} message ExportMetricsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceMetrics = [];\n                            if (message.resourceMetrics && message.resourceMetrics.length) {\n                                object.resourceMetrics = [];\n                                for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                    object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\";\n                        };\n\n                        return ExportMetricsServiceRequest;\n                    })();\n\n                    v1.ExportMetricsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceResponse\n                         * @property {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null} [partialSuccess] ExportMetricsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceResponse.\n                         * @implements IExportMetricsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         */\n                        ExportMetricsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportMetricsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse instance\n                         */\n                        ExportMetricsServiceResponse.create = function create(properties) {\n                            return new ExportMetricsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         */\n                        ExportMetricsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} message ExportMetricsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\";\n                        };\n\n                        return ExportMetricsServiceResponse;\n                    })();\n\n                    v1.ExportMetricsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsPartialSuccess\n                         * @property {number|Long|null} [rejectedDataPoints] ExportMetricsPartialSuccess rejectedDataPoints\n                         * @property {string|null} [errorMessage] ExportMetricsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsPartialSuccess.\n                         * @implements IExportMetricsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportMetricsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsPartialSuccess rejectedDataPoints.\n                         * @member {number|Long|null|undefined} rejectedDataPoints\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.rejectedDataPoints = null;\n\n                        /**\n                         * ExportMetricsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportMetricsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess instance\n                         */\n                        ExportMetricsPartialSuccess.create = function create(properties) {\n                            return new ExportMetricsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedDataPoints != null && Object.hasOwnProperty.call(message, \"rejectedDataPoints\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedDataPoints);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedDataPoints = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (!$util.isInteger(message.rejectedDataPoints) && !(message.rejectedDataPoints && $util.isInteger(message.rejectedDataPoints.low) && $util.isInteger(message.rejectedDataPoints.high)))\n                                    return \"rejectedDataPoints: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         */\n                        ExportMetricsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            if (object.rejectedDataPoints != null)\n                                if ($util.Long)\n                                    (message.rejectedDataPoints = $util.Long.fromValue(object.rejectedDataPoints)).unsigned = false;\n                                else if (typeof object.rejectedDataPoints === \"string\")\n                                    message.rejectedDataPoints = parseInt(object.rejectedDataPoints, 10);\n                                else if (typeof object.rejectedDataPoints === \"number\")\n                                    message.rejectedDataPoints = object.rejectedDataPoints;\n                                else if (typeof object.rejectedDataPoints === \"object\")\n                                    message.rejectedDataPoints = new $util.LongBits(object.rejectedDataPoints.low >>> 0, object.rejectedDataPoints.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} message ExportMetricsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedDataPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedDataPoints = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (typeof message.rejectedDataPoints === \"number\")\n                                    object.rejectedDataPoints = options.longs === String ? String(message.rejectedDataPoints) : message.rejectedDataPoints;\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedDataPoints) : options.longs === Number ? new $util.LongBits(message.rejectedDataPoints.low >>> 0, message.rejectedDataPoints.high >>> 0).toNumber() : message.rejectedDataPoints;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\";\n                        };\n\n                        return ExportMetricsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return metrics;\n            })();\n\n            collector.logs = (function() {\n\n                /**\n                 * Namespace logs.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var logs = {};\n\n                logs.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.logs\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.LogsService = (function() {\n\n                        /**\n                         * Constructs a new LogsService service.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents a LogsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (LogsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LogsService;\n\n                        /**\n                         * Creates new LogsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {LogsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.logs.v1.LogsService#export_}.\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} [response] ExportLogsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.logs.v1.LogsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportLogsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return LogsService;\n                    })();\n\n                    v1.ExportLogsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceRequest\n                         * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] ExportLogsServiceRequest resourceLogs\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceRequest.\n                         * @implements IExportLogsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceRequest(properties) {\n                            this.resourceLogs = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceRequest resourceLogs.\n                         * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         */\n                        ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportLogsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest instance\n                         */\n                        ExportLogsServiceRequest.create = function create(properties) {\n                            return new ExportLogsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceLogs != null && message.resourceLogs.length)\n                                for (var i = 0; i < message.resourceLogs.length; ++i)\n                                    $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceLogs && message.resourceLogs.length))\n                                            message.resourceLogs = [];\n                                        message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                                if (!Array.isArray(message.resourceLogs))\n                                    return \"resourceLogs: array expected\";\n                                for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                    var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                    if (error)\n                                        return \"resourceLogs.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         */\n                        ExportLogsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            if (object.resourceLogs) {\n                                if (!Array.isArray(object.resourceLogs))\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                                message.resourceLogs = [];\n                                for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                    if (typeof object.resourceLogs[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                                    message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} message ExportLogsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceLogs = [];\n                            if (message.resourceLogs && message.resourceLogs.length) {\n                                object.resourceLogs = [];\n                                for (var j = 0; j < message.resourceLogs.length; ++j)\n                                    object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n                        };\n\n                        return ExportLogsServiceRequest;\n                    })();\n\n                    v1.ExportLogsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceResponse\n                         * @property {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null} [partialSuccess] ExportLogsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceResponse.\n                         * @implements IExportLogsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         */\n                        ExportLogsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportLogsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse instance\n                         */\n                        ExportLogsServiceResponse.create = function create(properties) {\n                            return new ExportLogsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         */\n                        ExportLogsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} message ExportLogsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n                        };\n\n                        return ExportLogsServiceResponse;\n                    })();\n\n                    v1.ExportLogsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsPartialSuccess\n                         * @property {number|Long|null} [rejectedLogRecords] ExportLogsPartialSuccess rejectedLogRecords\n                         * @property {string|null} [errorMessage] ExportLogsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsPartialSuccess.\n                         * @implements IExportLogsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportLogsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsPartialSuccess rejectedLogRecords.\n                         * @member {number|Long|null|undefined} rejectedLogRecords\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.rejectedLogRecords = null;\n\n                        /**\n                         * ExportLogsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportLogsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess instance\n                         */\n                        ExportLogsPartialSuccess.create = function create(properties) {\n                            return new ExportLogsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedLogRecords != null && Object.hasOwnProperty.call(message, \"rejectedLogRecords\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedLogRecords);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedLogRecords = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (!$util.isInteger(message.rejectedLogRecords) && !(message.rejectedLogRecords && $util.isInteger(message.rejectedLogRecords.low) && $util.isInteger(message.rejectedLogRecords.high)))\n                                    return \"rejectedLogRecords: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         */\n                        ExportLogsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            if (object.rejectedLogRecords != null)\n                                if ($util.Long)\n                                    (message.rejectedLogRecords = $util.Long.fromValue(object.rejectedLogRecords)).unsigned = false;\n                                else if (typeof object.rejectedLogRecords === \"string\")\n                                    message.rejectedLogRecords = parseInt(object.rejectedLogRecords, 10);\n                                else if (typeof object.rejectedLogRecords === \"number\")\n                                    message.rejectedLogRecords = object.rejectedLogRecords;\n                                else if (typeof object.rejectedLogRecords === \"object\")\n                                    message.rejectedLogRecords = new $util.LongBits(object.rejectedLogRecords.low >>> 0, object.rejectedLogRecords.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} message ExportLogsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedLogRecords = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedLogRecords = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (typeof message.rejectedLogRecords === \"number\")\n                                    object.rejectedLogRecords = options.longs === String ? String(message.rejectedLogRecords) : message.rejectedLogRecords;\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedLogRecords) : options.longs === Number ? new $util.LongBits(message.rejectedLogRecords.low >>> 0, message.rejectedLogRecords.high >>> 0).toNumber() : message.rejectedLogRecords;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\";\n                        };\n\n                        return ExportLogsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return logs;\n            })();\n\n            return collector;\n        })();\n\n        proto.metrics = (function() {\n\n            /**\n             * Namespace metrics.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var metrics = {};\n\n            metrics.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.metrics\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.MetricsData = (function() {\n\n                    /**\n                     * Properties of a MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetricsData\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] MetricsData resourceMetrics\n                     */\n\n                    /**\n                     * Constructs a new MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a MetricsData.\n                     * @implements IMetricsData\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     */\n                    function MetricsData(properties) {\n                        this.resourceMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * MetricsData resourceMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     */\n                    MetricsData.prototype.resourceMetrics = $util.emptyArray;\n\n                    /**\n                     * Creates a new MetricsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData instance\n                     */\n                    MetricsData.create = function create(properties) {\n                        return new MetricsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceMetrics != null && message.resourceMetrics.length)\n                            for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                        message.resourceMetrics = [];\n                                    message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a MetricsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MetricsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                            if (!Array.isArray(message.resourceMetrics))\n                                return \"resourceMetrics: array expected\";\n                            for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                if (error)\n                                    return \"resourceMetrics.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a MetricsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     */\n                    MetricsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.MetricsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        if (object.resourceMetrics) {\n                            if (!Array.isArray(object.resourceMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: array expected\");\n                            message.resourceMetrics = [];\n                            for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                if (typeof object.resourceMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: object expected\");\n                                message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a MetricsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.MetricsData} message MetricsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MetricsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceMetrics = [];\n                        if (message.resourceMetrics && message.resourceMetrics.length) {\n                            object.resourceMetrics = [];\n                            for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this MetricsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MetricsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for MetricsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    MetricsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.MetricsData\";\n                    };\n\n                    return MetricsData;\n                })();\n\n                v1.ResourceMetrics = (function() {\n\n                    /**\n                     * Properties of a ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IResourceMetrics\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceMetrics resource\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>|null} [scopeMetrics] ResourceMetrics scopeMetrics\n                     * @property {string|null} [schemaUrl] ResourceMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ResourceMetrics.\n                     * @implements IResourceMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     */\n                    function ResourceMetrics(properties) {\n                        this.scopeMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceMetrics resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.resource = null;\n\n                    /**\n                     * ResourceMetrics scopeMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>} scopeMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.scopeMetrics = $util.emptyArray;\n\n                    /**\n                     * ResourceMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics instance\n                     */\n                    ResourceMetrics.create = function create(properties) {\n                        return new ResourceMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeMetrics != null && message.scopeMetrics.length)\n                            for (var i = 0; i < message.scopeMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ScopeMetrics.encode(message.scopeMetrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeMetrics && message.scopeMetrics.length))\n                                        message.scopeMetrics = [];\n                                    message.scopeMetrics.push($root.opentelemetry.proto.metrics.v1.ScopeMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeMetrics != null && message.hasOwnProperty(\"scopeMetrics\")) {\n                            if (!Array.isArray(message.scopeMetrics))\n                                return \"scopeMetrics: array expected\";\n                            for (var i = 0; i < message.scopeMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.verify(message.scopeMetrics[i]);\n                                if (error)\n                                    return \"scopeMetrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     */\n                    ResourceMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ResourceMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeMetrics) {\n                            if (!Array.isArray(object.scopeMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: array expected\");\n                            message.scopeMetrics = [];\n                            for (var i = 0; i < object.scopeMetrics.length; ++i) {\n                                if (typeof object.scopeMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: object expected\");\n                                message.scopeMetrics[i] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.fromObject(object.scopeMetrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ResourceMetrics} message ResourceMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeMetrics = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeMetrics && message.scopeMetrics.length) {\n                            object.scopeMetrics = [];\n                            for (var j = 0; j < message.scopeMetrics.length; ++j)\n                                object.scopeMetrics[j] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(message.scopeMetrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ResourceMetrics\";\n                    };\n\n                    return ResourceMetrics;\n                })();\n\n                v1.ScopeMetrics = (function() {\n\n                    /**\n                     * Properties of a ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IScopeMetrics\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeMetrics scope\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IMetric>|null} [metrics] ScopeMetrics metrics\n                     * @property {string|null} [schemaUrl] ScopeMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ScopeMetrics.\n                     * @implements IScopeMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     */\n                    function ScopeMetrics(properties) {\n                        this.metrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeMetrics scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.scope = null;\n\n                    /**\n                     * ScopeMetrics metrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IMetric>} metrics\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.metrics = $util.emptyArray;\n\n                    /**\n                     * ScopeMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics instance\n                     */\n                    ScopeMetrics.create = function create(properties) {\n                        return new ScopeMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.metrics != null && message.metrics.length)\n                            for (var i = 0; i < message.metrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Metric.encode(message.metrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.metrics && message.metrics.length))\n                                        message.metrics = [];\n                                    message.metrics.push($root.opentelemetry.proto.metrics.v1.Metric.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.metrics != null && message.hasOwnProperty(\"metrics\")) {\n                            if (!Array.isArray(message.metrics))\n                                return \"metrics: array expected\";\n                            for (var i = 0; i < message.metrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Metric.verify(message.metrics[i]);\n                                if (error)\n                                    return \"metrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     */\n                    ScopeMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ScopeMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.metrics) {\n                            if (!Array.isArray(object.metrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: array expected\");\n                            message.metrics = [];\n                            for (var i = 0; i < object.metrics.length; ++i) {\n                                if (typeof object.metrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: object expected\");\n                                message.metrics[i] = $root.opentelemetry.proto.metrics.v1.Metric.fromObject(object.metrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ScopeMetrics} message ScopeMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.metrics = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.metrics && message.metrics.length) {\n                            object.metrics = [];\n                            for (var j = 0; j < message.metrics.length; ++j)\n                                object.metrics[j] = $root.opentelemetry.proto.metrics.v1.Metric.toObject(message.metrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ScopeMetrics\";\n                    };\n\n                    return ScopeMetrics;\n                })();\n\n                v1.Metric = (function() {\n\n                    /**\n                     * Properties of a Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetric\n                     * @property {string|null} [name] Metric name\n                     * @property {string|null} [description] Metric description\n                     * @property {string|null} [unit] Metric unit\n                     * @property {opentelemetry.proto.metrics.v1.IGauge|null} [gauge] Metric gauge\n                     * @property {opentelemetry.proto.metrics.v1.ISum|null} [sum] Metric sum\n                     * @property {opentelemetry.proto.metrics.v1.IHistogram|null} [histogram] Metric histogram\n                     * @property {opentelemetry.proto.metrics.v1.IExponentialHistogram|null} [exponentialHistogram] Metric exponentialHistogram\n                     * @property {opentelemetry.proto.metrics.v1.ISummary|null} [summary] Metric summary\n                     */\n\n                    /**\n                     * Constructs a new Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Metric.\n                     * @implements IMetric\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     */\n                    function Metric(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Metric name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.name = null;\n\n                    /**\n                     * Metric description.\n                     * @member {string|null|undefined} description\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.description = null;\n\n                    /**\n                     * Metric unit.\n                     * @member {string|null|undefined} unit\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.unit = null;\n\n                    /**\n                     * Metric gauge.\n                     * @member {opentelemetry.proto.metrics.v1.IGauge|null|undefined} gauge\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.gauge = null;\n\n                    /**\n                     * Metric sum.\n                     * @member {opentelemetry.proto.metrics.v1.ISum|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.sum = null;\n\n                    /**\n                     * Metric histogram.\n                     * @member {opentelemetry.proto.metrics.v1.IHistogram|null|undefined} histogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.histogram = null;\n\n                    /**\n                     * Metric exponentialHistogram.\n                     * @member {opentelemetry.proto.metrics.v1.IExponentialHistogram|null|undefined} exponentialHistogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.exponentialHistogram = null;\n\n                    /**\n                     * Metric summary.\n                     * @member {opentelemetry.proto.metrics.v1.ISummary|null|undefined} summary\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.summary = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Metric data.\n                     * @member {\"gauge\"|\"sum\"|\"histogram\"|\"exponentialHistogram\"|\"summary\"|undefined} data\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Object.defineProperty(Metric.prototype, \"data\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"gauge\", \"sum\", \"histogram\", \"exponentialHistogram\", \"summary\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Metric instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric instance\n                     */\n                    Metric.create = function create(properties) {\n                        return new Metric(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Metric message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n                        if (message.unit != null && Object.hasOwnProperty.call(message, \"unit\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.unit);\n                        if (message.gauge != null && Object.hasOwnProperty.call(message, \"gauge\"))\n                            $root.opentelemetry.proto.metrics.v1.Gauge.encode(message.gauge, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            $root.opentelemetry.proto.metrics.v1.Sum.encode(message.sum, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.histogram != null && Object.hasOwnProperty.call(message, \"histogram\"))\n                            $root.opentelemetry.proto.metrics.v1.Histogram.encode(message.histogram, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.exponentialHistogram != null && Object.hasOwnProperty.call(message, \"exponentialHistogram\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.encode(message.exponentialHistogram, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                        if (message.summary != null && Object.hasOwnProperty.call(message, \"summary\"))\n                            $root.opentelemetry.proto.metrics.v1.Summary.encode(message.summary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Metric message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.description = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.unit = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.sum = $root.opentelemetry.proto.metrics.v1.Sum.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 11: {\n                                    message.summary = $root.opentelemetry.proto.metrics.v1.Summary.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Metric message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Metric.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            if (!$util.isString(message.unit))\n                                return \"unit: string expected\";\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Gauge.verify(message.gauge);\n                                if (error)\n                                    return \"gauge.\" + error;\n                            }\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Sum.verify(message.sum);\n                                if (error)\n                                    return \"sum.\" + error;\n                            }\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Histogram.verify(message.histogram);\n                                if (error)\n                                    return \"histogram.\" + error;\n                            }\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.verify(message.exponentialHistogram);\n                                if (error)\n                                    return \"exponentialHistogram.\" + error;\n                            }\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Summary.verify(message.summary);\n                                if (error)\n                                    return \"summary.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     */\n                    Metric.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Metric)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.unit != null)\n                            message.unit = String(object.unit);\n                        if (object.gauge != null) {\n                            if (typeof object.gauge !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.gauge: object expected\");\n                            message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.fromObject(object.gauge);\n                        }\n                        if (object.sum != null) {\n                            if (typeof object.sum !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.sum: object expected\");\n                            message.sum = $root.opentelemetry.proto.metrics.v1.Sum.fromObject(object.sum);\n                        }\n                        if (object.histogram != null) {\n                            if (typeof object.histogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.histogram: object expected\");\n                            message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.fromObject(object.histogram);\n                        }\n                        if (object.exponentialHistogram != null) {\n                            if (typeof object.exponentialHistogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.exponentialHistogram: object expected\");\n                            message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.fromObject(object.exponentialHistogram);\n                        }\n                        if (object.summary != null) {\n                            if (typeof object.summary !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.summary: object expected\");\n                            message.summary = $root.opentelemetry.proto.metrics.v1.Summary.fromObject(object.summary);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Metric message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Metric} message Metric\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Metric.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.description = \"\";\n                            object.unit = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            object.unit = message.unit;\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            object.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.toObject(message.gauge, options);\n                            if (options.oneofs)\n                                object.data = \"gauge\";\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = $root.opentelemetry.proto.metrics.v1.Sum.toObject(message.sum, options);\n                            if (options.oneofs)\n                                object.data = \"sum\";\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            object.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.toObject(message.histogram, options);\n                            if (options.oneofs)\n                                object.data = \"histogram\";\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            object.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(message.exponentialHistogram, options);\n                            if (options.oneofs)\n                                object.data = \"exponentialHistogram\";\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            object.summary = $root.opentelemetry.proto.metrics.v1.Summary.toObject(message.summary, options);\n                            if (options.oneofs)\n                                object.data = \"summary\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Metric to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Metric.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Metric\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Metric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Metric\";\n                    };\n\n                    return Metric;\n                })();\n\n                v1.Gauge = (function() {\n\n                    /**\n                     * Properties of a Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IGauge\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Gauge dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Gauge.\n                     * @implements IGauge\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     */\n                    function Gauge(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Gauge dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     */\n                    Gauge.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Gauge instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge instance\n                     */\n                    Gauge.create = function create(properties) {\n                        return new Gauge(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Gauge message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Gauge.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Gauge message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     */\n                    Gauge.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Gauge)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Gauge message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Gauge} message Gauge\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Gauge.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Gauge to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Gauge.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Gauge\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Gauge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Gauge\";\n                    };\n\n                    return Gauge;\n                })();\n\n                v1.Sum = (function() {\n\n                    /**\n                     * Properties of a Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Sum dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Sum aggregationTemporality\n                     * @property {boolean|null} [isMonotonic] Sum isMonotonic\n                     */\n\n                    /**\n                     * Constructs a new Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Sum.\n                     * @implements ISum\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     */\n                    function Sum(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Sum dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Sum aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Sum isMonotonic.\n                     * @member {boolean|null|undefined} isMonotonic\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.isMonotonic = null;\n\n                    /**\n                     * Creates a new Sum instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum instance\n                     */\n                    Sum.create = function create(properties) {\n                        return new Sum(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Sum message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        if (message.isMonotonic != null && Object.hasOwnProperty.call(message, \"isMonotonic\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isMonotonic);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Sum message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.isMonotonic = reader.bool();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Sum message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Sum.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            if (typeof message.isMonotonic !== \"boolean\")\n                                return \"isMonotonic: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Sum message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     */\n                    Sum.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Sum)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        if (object.isMonotonic != null)\n                            message.isMonotonic = Boolean(object.isMonotonic);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Sum message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Sum} message Sum\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Sum.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults) {\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                            object.isMonotonic = false;\n                        }\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            object.isMonotonic = message.isMonotonic;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Sum to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Sum.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Sum\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Sum.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Sum\";\n                    };\n\n                    return Sum;\n                })();\n\n                v1.Histogram = (function() {\n\n                    /**\n                     * Properties of a Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>|null} [dataPoints] Histogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Histogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Histogram.\n                     * @implements IHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     */\n                    function Histogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Histogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Histogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new Histogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram instance\n                     */\n                    Histogram.create = function create(properties) {\n                        return new Histogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.HistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Histogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Histogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Histogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     */\n                    Histogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Histogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Histogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Histogram} message Histogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Histogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Histogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Histogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Histogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Histogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Histogram\";\n                    };\n\n                    return Histogram;\n                })();\n\n                v1.ExponentialHistogram = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>|null} [dataPoints] ExponentialHistogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] ExponentialHistogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogram.\n                     * @implements IExponentialHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     */\n                    function ExponentialHistogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new ExponentialHistogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram instance\n                     */\n                    ExponentialHistogram.create = function create(properties) {\n                        return new ExponentialHistogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     */\n                    ExponentialHistogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogram} message ExponentialHistogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogram\";\n                    };\n\n                    return ExponentialHistogram;\n                })();\n\n                v1.Summary = (function() {\n\n                    /**\n                     * Properties of a Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummary\n                     * @property {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>|null} [dataPoints] Summary dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Summary.\n                     * @implements ISummary\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     */\n                    function Summary(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Summary dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     */\n                    Summary.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Summary instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary instance\n                     */\n                    Summary.create = function create(properties) {\n                        return new Summary(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Summary message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Summary message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Summary message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Summary.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     */\n                    Summary.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Summary)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Summary message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Summary} message Summary\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Summary.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Summary to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Summary.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Summary\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Summary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Summary\";\n                    };\n\n                    return Summary;\n                })();\n\n                /**\n                 * AggregationTemporality enum.\n                 * @name opentelemetry.proto.metrics.v1.AggregationTemporality\n                 * @enum {number}\n                 * @property {number} AGGREGATION_TEMPORALITY_UNSPECIFIED=0 AGGREGATION_TEMPORALITY_UNSPECIFIED value\n                 * @property {number} AGGREGATION_TEMPORALITY_DELTA=1 AGGREGATION_TEMPORALITY_DELTA value\n                 * @property {number} AGGREGATION_TEMPORALITY_CUMULATIVE=2 AGGREGATION_TEMPORALITY_CUMULATIVE value\n                 */\n                v1.AggregationTemporality = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"AGGREGATION_TEMPORALITY_DELTA\"] = 1;\n                    values[valuesById[2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * DataPointFlags enum.\n                 * @name opentelemetry.proto.metrics.v1.DataPointFlags\n                 * @enum {number}\n                 * @property {number} DATA_POINT_FLAGS_DO_NOT_USE=0 DATA_POINT_FLAGS_DO_NOT_USE value\n                 * @property {number} DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK=1 DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK value\n                 */\n                v1.DataPointFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"DATA_POINT_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[1] = \"DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\"] = 1;\n                    return values;\n                })();\n\n                v1.NumberDataPoint = (function() {\n\n                    /**\n                     * Properties of a NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface INumberDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] NumberDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] NumberDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] NumberDataPoint timeUnixNano\n                     * @property {number|null} [asDouble] NumberDataPoint asDouble\n                     * @property {number|Long|null} [asInt] NumberDataPoint asInt\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] NumberDataPoint exemplars\n                     * @property {number|null} [flags] NumberDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a NumberDataPoint.\n                     * @implements INumberDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     */\n                    function NumberDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * NumberDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asDouble = null;\n\n                    /**\n                     * NumberDataPoint asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asInt = null;\n\n                    /**\n                     * NumberDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.flags = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * NumberDataPoint value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(NumberDataPoint.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new NumberDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint instance\n                     */\n                    NumberDataPoint.create = function create(properties) {\n                        return new NumberDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.asDouble);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a NumberDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    NumberDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a NumberDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     */\n                    NumberDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.NumberDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a NumberDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.NumberDataPoint} message NumberDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    NumberDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this NumberDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    NumberDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for NumberDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    NumberDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.NumberDataPoint\";\n                    };\n\n                    return NumberDataPoint;\n                })();\n\n                v1.HistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of a HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] HistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] HistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] HistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] HistogramDataPoint count\n                     * @property {number|null} [sum] HistogramDataPoint sum\n                     * @property {Array.<number|Long>|null} [bucketCounts] HistogramDataPoint bucketCounts\n                     * @property {Array.<number>|null} [explicitBounds] HistogramDataPoint explicitBounds\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] HistogramDataPoint exemplars\n                     * @property {number|null} [flags] HistogramDataPoint flags\n                     * @property {number|null} [min] HistogramDataPoint min\n                     * @property {number|null} [max] HistogramDataPoint max\n                     */\n\n                    /**\n                     * Constructs a new HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a HistogramDataPoint.\n                     * @implements IHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function HistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.bucketCounts = [];\n                        this.explicitBounds = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * HistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * HistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * HistogramDataPoint bucketCounts.\n                     * @member {Array.<number|Long>} bucketCounts\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.bucketCounts = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint explicitBounds.\n                     * @member {Array.<number>} explicitBounds\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.explicitBounds = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * HistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * HistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.max = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * HistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new HistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint instance\n                     */\n                    HistogramDataPoint.create = function create(properties) {\n                        return new HistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.bucketCounts != null && message.bucketCounts.length) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                writer.fixed64(message.bucketCounts[i]);\n                            writer.ldelim();\n                        }\n                        if (message.explicitBounds != null && message.explicitBounds.length) {\n                            writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                writer.double(message.explicitBounds[i]);\n                            writer.ldelim();\n                        }\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.max);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.bucketCounts && message.bucketCounts.length))\n                                        message.bucketCounts = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.bucketCounts.push(reader.fixed64());\n                                    } else\n                                        message.bucketCounts.push(reader.fixed64());\n                                    break;\n                                }\n                            case 7: {\n                                    if (!(message.explicitBounds && message.explicitBounds.length))\n                                        message.explicitBounds = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.explicitBounds.push(reader.double());\n                                    } else\n                                        message.explicitBounds.push(reader.double());\n                                    break;\n                                }\n                            case 8: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 12: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a HistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    HistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                            if (!Array.isArray(message.bucketCounts))\n                                return \"bucketCounts: array expected\";\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                    return \"bucketCounts: integer|Long[] expected\";\n                        }\n                        if (message.explicitBounds != null && message.hasOwnProperty(\"explicitBounds\")) {\n                            if (!Array.isArray(message.explicitBounds))\n                                return \"explicitBounds: array expected\";\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                if (typeof message.explicitBounds[i] !== \"number\")\n                                    return \"explicitBounds: number[] expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a HistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     */\n                    HistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.HistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.bucketCounts) {\n                            if (!Array.isArray(object.bucketCounts))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.bucketCounts: array expected\");\n                            message.bucketCounts = [];\n                            for (var i = 0; i < object.bucketCounts.length; ++i)\n                                if ($util.Long)\n                                    (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;\n                                else if (typeof object.bucketCounts[i] === \"string\")\n                                    message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                else if (typeof object.bucketCounts[i] === \"number\")\n                                    message.bucketCounts[i] = object.bucketCounts[i];\n                                else if (typeof object.bucketCounts[i] === \"object\")\n                                    message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();\n                        }\n                        if (object.explicitBounds) {\n                            if (!Array.isArray(object.explicitBounds))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.explicitBounds: array expected\");\n                            message.explicitBounds = [];\n                            for (var i = 0; i < object.explicitBounds.length; ++i)\n                                message.explicitBounds[i] = Number(object.explicitBounds[i]);\n                        }\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a HistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.HistogramDataPoint} message HistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    HistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.bucketCounts = [];\n                            object.explicitBounds = [];\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.bucketCounts && message.bucketCounts.length) {\n                            object.bucketCounts = [];\n                            for (var j = 0; j < message.bucketCounts.length; ++j)\n                                if (typeof message.bucketCounts[j] === \"number\")\n                                    object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                else\n                                    object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];\n                        }\n                        if (message.explicitBounds && message.explicitBounds.length) {\n                            object.explicitBounds = [];\n                            for (var j = 0; j < message.explicitBounds.length; ++j)\n                                object.explicitBounds[j] = options.json && !isFinite(message.explicitBounds[j]) ? String(message.explicitBounds[j]) : message.explicitBounds[j];\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this HistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    HistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for HistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    HistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.HistogramDataPoint\";\n                    };\n\n                    return HistogramDataPoint;\n                })();\n\n                v1.ExponentialHistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] ExponentialHistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] ExponentialHistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] ExponentialHistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] ExponentialHistogramDataPoint count\n                     * @property {number|null} [sum] ExponentialHistogramDataPoint sum\n                     * @property {number|null} [scale] ExponentialHistogramDataPoint scale\n                     * @property {number|Long|null} [zeroCount] ExponentialHistogramDataPoint zeroCount\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [positive] ExponentialHistogramDataPoint positive\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [negative] ExponentialHistogramDataPoint negative\n                     * @property {number|null} [flags] ExponentialHistogramDataPoint flags\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] ExponentialHistogramDataPoint exemplars\n                     * @property {number|null} [min] ExponentialHistogramDataPoint min\n                     * @property {number|null} [max] ExponentialHistogramDataPoint max\n                     * @property {number|null} [zeroThreshold] ExponentialHistogramDataPoint zeroThreshold\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogramDataPoint.\n                     * @implements IExponentialHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function ExponentialHistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint scale.\n                     * @member {number|null|undefined} scale\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.scale = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroCount.\n                     * @member {number|Long|null|undefined} zeroCount\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroCount = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint positive.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} positive\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.positive = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint negative.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} negative\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.negative = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.max = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroThreshold.\n                     * @member {number|null|undefined} zeroThreshold\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroThreshold = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * ExponentialHistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new ExponentialHistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint instance\n                     */\n                    ExponentialHistogramDataPoint.create = function create(properties) {\n                        return new ExponentialHistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.scale != null && Object.hasOwnProperty.call(message, \"scale\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.scale);\n                        if (message.zeroCount != null && Object.hasOwnProperty.call(message, \"zeroCount\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.zeroCount);\n                        if (message.positive != null && Object.hasOwnProperty.call(message, \"positive\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.positive, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.negative != null && Object.hasOwnProperty.call(message, \"negative\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.negative, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 13, wireType 1 =*/105).double(message.max);\n                        if (message.zeroThreshold != null && Object.hasOwnProperty.call(message, \"zeroThreshold\"))\n                            writer.uint32(/* id 14, wireType 1 =*/113).double(message.zeroThreshold);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.scale = reader.sint32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.zeroCount = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 13: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            case 14: {\n                                    message.zeroThreshold = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (!$util.isInteger(message.scale))\n                                return \"scale: integer expected\";\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (!$util.isInteger(message.zeroCount) && !(message.zeroCount && $util.isInteger(message.zeroCount.low) && $util.isInteger(message.zeroCount.high)))\n                                return \"zeroCount: integer|Long expected\";\n                        if (message.positive != null && message.hasOwnProperty(\"positive\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.positive);\n                            if (error)\n                                return \"positive.\" + error;\n                        }\n                        if (message.negative != null && message.hasOwnProperty(\"negative\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.negative);\n                            if (error)\n                                return \"negative.\" + error;\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            if (typeof message.zeroThreshold !== \"number\")\n                                return \"zeroThreshold: number expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     */\n                    ExponentialHistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.scale != null)\n                            message.scale = object.scale | 0;\n                        if (object.zeroCount != null)\n                            if ($util.Long)\n                                (message.zeroCount = $util.Long.fromValue(object.zeroCount)).unsigned = false;\n                            else if (typeof object.zeroCount === \"string\")\n                                message.zeroCount = parseInt(object.zeroCount, 10);\n                            else if (typeof object.zeroCount === \"number\")\n                                message.zeroCount = object.zeroCount;\n                            else if (typeof object.zeroCount === \"object\")\n                                message.zeroCount = new $util.LongBits(object.zeroCount.low >>> 0, object.zeroCount.high >>> 0).toNumber();\n                        if (object.positive != null) {\n                            if (typeof object.positive !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive: object expected\");\n                            message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.positive);\n                        }\n                        if (object.negative != null) {\n                            if (typeof object.negative !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative: object expected\");\n                            message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.negative);\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        if (object.zeroThreshold != null)\n                            message.zeroThreshold = Number(object.zeroThreshold);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message ExponentialHistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.exemplars = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.scale = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.zeroCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.zeroCount = options.longs === String ? \"0\" : 0;\n                            object.positive = null;\n                            object.negative = null;\n                            object.flags = 0;\n                            object.zeroThreshold = 0;\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = message.scale;\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (typeof message.zeroCount === \"number\")\n                                object.zeroCount = options.longs === String ? String(message.zeroCount) : message.zeroCount;\n                            else\n                                object.zeroCount = options.longs === String ? $util.Long.prototype.toString.call(message.zeroCount) : options.longs === Number ? new $util.LongBits(message.zeroCount.low >>> 0, message.zeroCount.high >>> 0).toNumber() : message.zeroCount;\n                        if (message.positive != null && message.hasOwnProperty(\"positive\"))\n                            object.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.positive, options);\n                        if (message.negative != null && message.hasOwnProperty(\"negative\"))\n                            object.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.negative, options);\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            object.zeroThreshold = options.json && !isFinite(message.zeroThreshold) ? String(message.zeroThreshold) : message.zeroThreshold;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\";\n                    };\n\n                    ExponentialHistogramDataPoint.Buckets = (function() {\n\n                        /**\n                         * Properties of a Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @interface IBuckets\n                         * @property {number|null} [offset] Buckets offset\n                         * @property {Array.<number|Long>|null} [bucketCounts] Buckets bucketCounts\n                         */\n\n                        /**\n                         * Constructs a new Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @classdesc Represents a Buckets.\n                         * @implements IBuckets\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         */\n                        function Buckets(properties) {\n                            this.bucketCounts = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Buckets offset.\n                         * @member {number|null|undefined} offset\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.offset = null;\n\n                        /**\n                         * Buckets bucketCounts.\n                         * @member {Array.<number|Long>} bucketCounts\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.bucketCounts = $util.emptyArray;\n\n                        /**\n                         * Creates a new Buckets instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets instance\n                         */\n                        Buckets.create = function create(properties) {\n                            return new Buckets(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n                            if (message.bucketCounts != null && message.bucketCounts.length) {\n                                writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    writer.uint64(message.bucketCounts[i]);\n                                writer.ldelim();\n                            }\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.offset = reader.sint32();\n                                        break;\n                                    }\n                                case 2: {\n                                        if (!(message.bucketCounts && message.bucketCounts.length))\n                                            message.bucketCounts = [];\n                                        if ((tag & 7) === 2) {\n                                            var end2 = reader.uint32() + reader.pos;\n                                            while (reader.pos < end2)\n                                                message.bucketCounts.push(reader.uint64());\n                                        } else\n                                            message.bucketCounts.push(reader.uint64());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Buckets message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Buckets.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                if (!$util.isInteger(message.offset))\n                                    return \"offset: integer expected\";\n                            if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                                if (!Array.isArray(message.bucketCounts))\n                                    return \"bucketCounts: array expected\";\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                        return \"bucketCounts: integer|Long[] expected\";\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         */\n                        Buckets.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            if (object.offset != null)\n                                message.offset = object.offset | 0;\n                            if (object.bucketCounts) {\n                                if (!Array.isArray(object.bucketCounts))\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucketCounts: array expected\");\n                                message.bucketCounts = [];\n                                for (var i = 0; i < object.bucketCounts.length; ++i)\n                                    if ($util.Long)\n                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = true;\n                                    else if (typeof object.bucketCounts[i] === \"string\")\n                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                    else if (typeof object.bucketCounts[i] === \"number\")\n                                        message.bucketCounts[i] = object.bucketCounts[i];\n                                    else if (typeof object.bucketCounts[i] === \"object\")\n                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber(true);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message Buckets\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Buckets.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.bucketCounts = [];\n                            if (options.defaults)\n                                object.offset = 0;\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                object.offset = message.offset;\n                            if (message.bucketCounts && message.bucketCounts.length) {\n                                object.bucketCounts = [];\n                                for (var j = 0; j < message.bucketCounts.length; ++j)\n                                    if (typeof message.bucketCounts[j] === \"number\")\n                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                    else\n                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber(true) : message.bucketCounts[j];\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Buckets to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Buckets.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Buckets\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Buckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\";\n                        };\n\n                        return Buckets;\n                    })();\n\n                    return ExponentialHistogramDataPoint;\n                })();\n\n                v1.SummaryDataPoint = (function() {\n\n                    /**\n                     * Properties of a SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummaryDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] SummaryDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] SummaryDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] SummaryDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] SummaryDataPoint count\n                     * @property {number|null} [sum] SummaryDataPoint sum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>|null} [quantileValues] SummaryDataPoint quantileValues\n                     * @property {number|null} [flags] SummaryDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a SummaryDataPoint.\n                     * @implements ISummaryDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     */\n                    function SummaryDataPoint(properties) {\n                        this.attributes = [];\n                        this.quantileValues = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * SummaryDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.count = null;\n\n                    /**\n                     * SummaryDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.sum = null;\n\n                    /**\n                     * SummaryDataPoint quantileValues.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>} quantileValues\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.quantileValues = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.flags = null;\n\n                    /**\n                     * Creates a new SummaryDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint instance\n                     */\n                    SummaryDataPoint.create = function create(properties) {\n                        return new SummaryDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.quantileValues != null && message.quantileValues.length)\n                            for (var i = 0; i < message.quantileValues.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.encode(message.quantileValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.quantileValues && message.quantileValues.length))\n                                        message.quantileValues = [];\n                                    message.quantileValues.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a SummaryDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    SummaryDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        if (message.quantileValues != null && message.hasOwnProperty(\"quantileValues\")) {\n                            if (!Array.isArray(message.quantileValues))\n                                return \"quantileValues: array expected\";\n                            for (var i = 0; i < message.quantileValues.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify(message.quantileValues[i]);\n                                if (error)\n                                    return \"quantileValues.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a SummaryDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     */\n                    SummaryDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.quantileValues) {\n                            if (!Array.isArray(object.quantileValues))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: array expected\");\n                            message.quantileValues = [];\n                            for (var i = 0; i < object.quantileValues.length; ++i) {\n                                if (typeof object.quantileValues[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: object expected\");\n                                message.quantileValues[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.fromObject(object.quantileValues[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a SummaryDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint} message SummaryDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    SummaryDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.quantileValues = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.sum = 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                        if (message.quantileValues && message.quantileValues.length) {\n                            object.quantileValues = [];\n                            for (var j = 0; j < message.quantileValues.length; ++j)\n                                object.quantileValues[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(message.quantileValues[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this SummaryDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    SummaryDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for SummaryDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    SummaryDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint\";\n                    };\n\n                    SummaryDataPoint.ValueAtQuantile = (function() {\n\n                        /**\n                         * Properties of a ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @interface IValueAtQuantile\n                         * @property {number|null} [quantile] ValueAtQuantile quantile\n                         * @property {number|null} [value] ValueAtQuantile value\n                         */\n\n                        /**\n                         * Constructs a new ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @classdesc Represents a ValueAtQuantile.\n                         * @implements IValueAtQuantile\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         */\n                        function ValueAtQuantile(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ValueAtQuantile quantile.\n                         * @member {number|null|undefined} quantile\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.quantile = null;\n\n                        /**\n                         * ValueAtQuantile value.\n                         * @member {number|null|undefined} value\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.value = null;\n\n                        /**\n                         * Creates a new ValueAtQuantile instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile instance\n                         */\n                        ValueAtQuantile.create = function create(properties) {\n                            return new ValueAtQuantile(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.quantile != null && Object.hasOwnProperty.call(message, \"quantile\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.quantile);\n                            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.quantile = reader.double();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.value = reader.double();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a ValueAtQuantile message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ValueAtQuantile.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                if (typeof message.quantile !== \"number\")\n                                    return \"quantile: number expected\";\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                if (typeof message.value !== \"number\")\n                                    return \"value: number expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a ValueAtQuantile message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         */\n                        ValueAtQuantile.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            if (object.quantile != null)\n                                message.quantile = Number(object.quantile);\n                            if (object.value != null)\n                                message.value = Number(object.value);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a ValueAtQuantile message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message ValueAtQuantile\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ValueAtQuantile.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.quantile = 0;\n                                object.value = 0;\n                            }\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                object.quantile = options.json && !isFinite(message.quantile) ? String(message.quantile) : message.quantile;\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ValueAtQuantile to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ValueAtQuantile.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ValueAtQuantile\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ValueAtQuantile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\";\n                        };\n\n                        return ValueAtQuantile;\n                    })();\n\n                    return SummaryDataPoint;\n                })();\n\n                v1.Exemplar = (function() {\n\n                    /**\n                     * Properties of an Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExemplar\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [filteredAttributes] Exemplar filteredAttributes\n                     * @property {number|Long|null} [timeUnixNano] Exemplar timeUnixNano\n                     * @property {number|null} [asDouble] Exemplar asDouble\n                     * @property {number|Long|null} [asInt] Exemplar asInt\n                     * @property {Uint8Array|null} [spanId] Exemplar spanId\n                     * @property {Uint8Array|null} [traceId] Exemplar traceId\n                     */\n\n                    /**\n                     * Constructs a new Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an Exemplar.\n                     * @implements IExemplar\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     */\n                    function Exemplar(properties) {\n                        this.filteredAttributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Exemplar filteredAttributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} filteredAttributes\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.filteredAttributes = $util.emptyArray;\n\n                    /**\n                     * Exemplar timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.timeUnixNano = null;\n\n                    /**\n                     * Exemplar asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asDouble = null;\n\n                    /**\n                     * Exemplar asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asInt = null;\n\n                    /**\n                     * Exemplar spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.spanId = null;\n\n                    /**\n                     * Exemplar traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.traceId = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Exemplar value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Object.defineProperty(Exemplar.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Exemplar instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar instance\n                     */\n                    Exemplar.create = function create(properties) {\n                        return new Exemplar(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.asDouble);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.spanId);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.traceId);\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.filteredAttributes != null && message.filteredAttributes.length)\n                            for (var i = 0; i < message.filteredAttributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.filteredAttributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.filteredAttributes && message.filteredAttributes.length))\n                                        message.filteredAttributes = [];\n                                    message.filteredAttributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Exemplar message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Exemplar.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.filteredAttributes != null && message.hasOwnProperty(\"filteredAttributes\")) {\n                            if (!Array.isArray(message.filteredAttributes))\n                                return \"filteredAttributes: array expected\";\n                            for (var i = 0; i < message.filteredAttributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.filteredAttributes[i]);\n                                if (error)\n                                    return \"filteredAttributes.\" + error;\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     */\n                    Exemplar.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Exemplar)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        if (object.filteredAttributes) {\n                            if (!Array.isArray(object.filteredAttributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: array expected\");\n                            message.filteredAttributes = [];\n                            for (var i = 0; i < object.filteredAttributes.length; ++i) {\n                                if (typeof object.filteredAttributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: object expected\");\n                                message.filteredAttributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.filteredAttributes[i]);\n                            }\n                        }\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Exemplar} message Exemplar\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Exemplar.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.filteredAttributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.filteredAttributes && message.filteredAttributes.length) {\n                            object.filteredAttributes = [];\n                            for (var j = 0; j < message.filteredAttributes.length; ++j)\n                                object.filteredAttributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.filteredAttributes[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Exemplar to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Exemplar.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Exemplar\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Exemplar\";\n                    };\n\n                    return Exemplar;\n                })();\n\n                return v1;\n            })();\n\n            return metrics;\n        })();\n\n        proto.logs = (function() {\n\n            /**\n             * Namespace logs.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var logs = {};\n\n            logs.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.logs\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.LogsData = (function() {\n\n                    /**\n                     * Properties of a LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogsData\n                     * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] LogsData resourceLogs\n                     */\n\n                    /**\n                     * Constructs a new LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogsData.\n                     * @implements ILogsData\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     */\n                    function LogsData(properties) {\n                        this.resourceLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogsData resourceLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     */\n                    LogsData.prototype.resourceLogs = $util.emptyArray;\n\n                    /**\n                     * Creates a new LogsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData instance\n                     */\n                    LogsData.create = function create(properties) {\n                        return new LogsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceLogs != null && message.resourceLogs.length)\n                            for (var i = 0; i < message.resourceLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceLogs && message.resourceLogs.length))\n                                        message.resourceLogs = [];\n                                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                            if (!Array.isArray(message.resourceLogs))\n                                return \"resourceLogs: array expected\";\n                            for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                if (error)\n                                    return \"resourceLogs.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     */\n                    LogsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        if (object.resourceLogs) {\n                            if (!Array.isArray(object.resourceLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n                            message.resourceLogs = [];\n                            for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                if (typeof object.resourceLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogsData} message LogsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceLogs = [];\n                        if (message.resourceLogs && message.resourceLogs.length) {\n                            object.resourceLogs = [];\n                            for (var j = 0; j < message.resourceLogs.length; ++j)\n                                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n                    };\n\n                    return LogsData;\n                })();\n\n                v1.ResourceLogs = (function() {\n\n                    /**\n                     * Properties of a ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IResourceLogs\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceLogs resource\n                     * @property {Array.<opentelemetry.proto.logs.v1.IScopeLogs>|null} [scopeLogs] ResourceLogs scopeLogs\n                     * @property {string|null} [schemaUrl] ResourceLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ResourceLogs.\n                     * @implements IResourceLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     */\n                    function ResourceLogs(properties) {\n                        this.scopeLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceLogs resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.resource = null;\n\n                    /**\n                     * ResourceLogs scopeLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IScopeLogs>} scopeLogs\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n\n                    /**\n                     * ResourceLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs instance\n                     */\n                    ResourceLogs.create = function create(properties) {\n                        return new ResourceLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeLogs != null && message.scopeLogs.length)\n                            for (var i = 0; i < message.scopeLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeLogs && message.scopeLogs.length))\n                                        message.scopeLogs = [];\n                                    message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n                            if (!Array.isArray(message.scopeLogs))\n                                return \"scopeLogs: array expected\";\n                            for (var i = 0; i < message.scopeLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                                if (error)\n                                    return \"scopeLogs.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     */\n                    ResourceLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeLogs) {\n                            if (!Array.isArray(object.scopeLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n                            message.scopeLogs = [];\n                            for (var i = 0; i < object.scopeLogs.length; ++i) {\n                                if (typeof object.scopeLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ResourceLogs} message ResourceLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeLogs = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeLogs && message.scopeLogs.length) {\n                            object.scopeLogs = [];\n                            for (var j = 0; j < message.scopeLogs.length; ++j)\n                                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n                    };\n\n                    return ResourceLogs;\n                })();\n\n                v1.ScopeLogs = (function() {\n\n                    /**\n                     * Properties of a ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IScopeLogs\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeLogs scope\n                     * @property {Array.<opentelemetry.proto.logs.v1.ILogRecord>|null} [logRecords] ScopeLogs logRecords\n                     * @property {string|null} [schemaUrl] ScopeLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ScopeLogs.\n                     * @implements IScopeLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     */\n                    function ScopeLogs(properties) {\n                        this.logRecords = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeLogs scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.scope = null;\n\n                    /**\n                     * ScopeLogs logRecords.\n                     * @member {Array.<opentelemetry.proto.logs.v1.ILogRecord>} logRecords\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.logRecords = $util.emptyArray;\n\n                    /**\n                     * ScopeLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs instance\n                     */\n                    ScopeLogs.create = function create(properties) {\n                        return new ScopeLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.logRecords != null && message.logRecords.length)\n                            for (var i = 0; i < message.logRecords.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.logRecords && message.logRecords.length))\n                                        message.logRecords = [];\n                                    message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n                            if (!Array.isArray(message.logRecords))\n                                return \"logRecords: array expected\";\n                            for (var i = 0; i < message.logRecords.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                                if (error)\n                                    return \"logRecords.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     */\n                    ScopeLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.logRecords) {\n                            if (!Array.isArray(object.logRecords))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n                            message.logRecords = [];\n                            for (var i = 0; i < object.logRecords.length; ++i) {\n                                if (typeof object.logRecords[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ScopeLogs} message ScopeLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.logRecords = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.logRecords && message.logRecords.length) {\n                            object.logRecords = [];\n                            for (var j = 0; j < message.logRecords.length; ++j)\n                                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n                    };\n\n                    return ScopeLogs;\n                })();\n\n                /**\n                 * SeverityNumber enum.\n                 * @name opentelemetry.proto.logs.v1.SeverityNumber\n                 * @enum {number}\n                 * @property {number} SEVERITY_NUMBER_UNSPECIFIED=0 SEVERITY_NUMBER_UNSPECIFIED value\n                 * @property {number} SEVERITY_NUMBER_TRACE=1 SEVERITY_NUMBER_TRACE value\n                 * @property {number} SEVERITY_NUMBER_TRACE2=2 SEVERITY_NUMBER_TRACE2 value\n                 * @property {number} SEVERITY_NUMBER_TRACE3=3 SEVERITY_NUMBER_TRACE3 value\n                 * @property {number} SEVERITY_NUMBER_TRACE4=4 SEVERITY_NUMBER_TRACE4 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG=5 SEVERITY_NUMBER_DEBUG value\n                 * @property {number} SEVERITY_NUMBER_DEBUG2=6 SEVERITY_NUMBER_DEBUG2 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG3=7 SEVERITY_NUMBER_DEBUG3 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG4=8 SEVERITY_NUMBER_DEBUG4 value\n                 * @property {number} SEVERITY_NUMBER_INFO=9 SEVERITY_NUMBER_INFO value\n                 * @property {number} SEVERITY_NUMBER_INFO2=10 SEVERITY_NUMBER_INFO2 value\n                 * @property {number} SEVERITY_NUMBER_INFO3=11 SEVERITY_NUMBER_INFO3 value\n                 * @property {number} SEVERITY_NUMBER_INFO4=12 SEVERITY_NUMBER_INFO4 value\n                 * @property {number} SEVERITY_NUMBER_WARN=13 SEVERITY_NUMBER_WARN value\n                 * @property {number} SEVERITY_NUMBER_WARN2=14 SEVERITY_NUMBER_WARN2 value\n                 * @property {number} SEVERITY_NUMBER_WARN3=15 SEVERITY_NUMBER_WARN3 value\n                 * @property {number} SEVERITY_NUMBER_WARN4=16 SEVERITY_NUMBER_WARN4 value\n                 * @property {number} SEVERITY_NUMBER_ERROR=17 SEVERITY_NUMBER_ERROR value\n                 * @property {number} SEVERITY_NUMBER_ERROR2=18 SEVERITY_NUMBER_ERROR2 value\n                 * @property {number} SEVERITY_NUMBER_ERROR3=19 SEVERITY_NUMBER_ERROR3 value\n                 * @property {number} SEVERITY_NUMBER_ERROR4=20 SEVERITY_NUMBER_ERROR4 value\n                 * @property {number} SEVERITY_NUMBER_FATAL=21 SEVERITY_NUMBER_FATAL value\n                 * @property {number} SEVERITY_NUMBER_FATAL2=22 SEVERITY_NUMBER_FATAL2 value\n                 * @property {number} SEVERITY_NUMBER_FATAL3=23 SEVERITY_NUMBER_FATAL3 value\n                 * @property {number} SEVERITY_NUMBER_FATAL4=24 SEVERITY_NUMBER_FATAL4 value\n                 */\n                v1.SeverityNumber = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n                    values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n                    values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n                    values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n                    values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n                    values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n                    values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n                    values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n                    values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n                    values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n                    values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n                    values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n                    values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n                    values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n                    values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n                    values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n                    values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n                    values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n                    values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n                    values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n                    values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n                    values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n                    values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n                    values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n                    return values;\n                })();\n\n                /**\n                 * LogRecordFlags enum.\n                 * @name opentelemetry.proto.logs.v1.LogRecordFlags\n                 * @enum {number}\n                 * @property {number} LOG_RECORD_FLAGS_DO_NOT_USE=0 LOG_RECORD_FLAGS_DO_NOT_USE value\n                 * @property {number} LOG_RECORD_FLAGS_TRACE_FLAGS_MASK=255 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK value\n                 */\n                v1.LogRecordFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"LOG_RECORD_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[255] = \"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\"] = 255;\n                    return values;\n                })();\n\n                v1.LogRecord = (function() {\n\n                    /**\n                     * Properties of a LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogRecord\n                     * @property {number|Long|null} [timeUnixNano] LogRecord timeUnixNano\n                     * @property {number|Long|null} [observedTimeUnixNano] LogRecord observedTimeUnixNano\n                     * @property {opentelemetry.proto.logs.v1.SeverityNumber|null} [severityNumber] LogRecord severityNumber\n                     * @property {string|null} [severityText] LogRecord severityText\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [body] LogRecord body\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] LogRecord attributes\n                     * @property {number|null} [droppedAttributesCount] LogRecord droppedAttributesCount\n                     * @property {number|null} [flags] LogRecord flags\n                     * @property {Uint8Array|null} [traceId] LogRecord traceId\n                     * @property {Uint8Array|null} [spanId] LogRecord spanId\n                     */\n\n                    /**\n                     * Constructs a new LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogRecord.\n                     * @implements ILogRecord\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     */\n                    function LogRecord(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogRecord timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.timeUnixNano = null;\n\n                    /**\n                     * LogRecord observedTimeUnixNano.\n                     * @member {number|Long|null|undefined} observedTimeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.observedTimeUnixNano = null;\n\n                    /**\n                     * LogRecord severityNumber.\n                     * @member {opentelemetry.proto.logs.v1.SeverityNumber|null|undefined} severityNumber\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityNumber = null;\n\n                    /**\n                     * LogRecord severityText.\n                     * @member {string|null|undefined} severityText\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityText = null;\n\n                    /**\n                     * LogRecord body.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} body\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.body = null;\n\n                    /**\n                     * LogRecord attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * LogRecord droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * LogRecord flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.flags = null;\n\n                    /**\n                     * LogRecord traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.traceId = null;\n\n                    /**\n                     * LogRecord spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.spanId = null;\n\n                    /**\n                     * Creates a new LogRecord instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord instance\n                     */\n                    LogRecord.create = function create(properties) {\n                        return new LogRecord(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                        if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severityNumber);\n                        if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.severityText);\n                        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.droppedAttributesCount);\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.flags);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.spanId);\n                        if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.observedTimeUnixNano);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 11: {\n                                    message.observedTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 2: {\n                                    message.severityNumber = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.severityText = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 7: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.fixed32();\n                                    break;\n                                }\n                            case 9: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 10: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogRecord message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogRecord.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                                return \"observedTimeUnixNano: integer|Long expected\";\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            switch (message.severityNumber) {\n                            default:\n                                return \"severityNumber: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                            case 20:\n                            case 21:\n                            case 22:\n                            case 23:\n                            case 24:\n                                break;\n                            }\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            if (!$util.isString(message.severityText))\n                                return \"severityText: string expected\";\n                        if (message.body != null && message.hasOwnProperty(\"body\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n                            if (error)\n                                return \"body.\" + error;\n                        }\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogRecord message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     */\n                    LogRecord.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.observedTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n                            else if (typeof object.observedTimeUnixNano === \"string\")\n                                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n                            else if (typeof object.observedTimeUnixNano === \"number\")\n                                message.observedTimeUnixNano = object.observedTimeUnixNano;\n                            else if (typeof object.observedTimeUnixNano === \"object\")\n                                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n                        switch (object.severityNumber) {\n                        default:\n                            if (typeof object.severityNumber === \"number\") {\n                                message.severityNumber = object.severityNumber;\n                                break;\n                            }\n                            break;\n                        case \"SEVERITY_NUMBER_UNSPECIFIED\":\n                        case 0:\n                            message.severityNumber = 0;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE\":\n                        case 1:\n                            message.severityNumber = 1;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE2\":\n                        case 2:\n                            message.severityNumber = 2;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE3\":\n                        case 3:\n                            message.severityNumber = 3;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE4\":\n                        case 4:\n                            message.severityNumber = 4;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG\":\n                        case 5:\n                            message.severityNumber = 5;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG2\":\n                        case 6:\n                            message.severityNumber = 6;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG3\":\n                        case 7:\n                            message.severityNumber = 7;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG4\":\n                        case 8:\n                            message.severityNumber = 8;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO\":\n                        case 9:\n                            message.severityNumber = 9;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO2\":\n                        case 10:\n                            message.severityNumber = 10;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO3\":\n                        case 11:\n                            message.severityNumber = 11;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO4\":\n                        case 12:\n                            message.severityNumber = 12;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN\":\n                        case 13:\n                            message.severityNumber = 13;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN2\":\n                        case 14:\n                            message.severityNumber = 14;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN3\":\n                        case 15:\n                            message.severityNumber = 15;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN4\":\n                        case 16:\n                            message.severityNumber = 16;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR\":\n                        case 17:\n                            message.severityNumber = 17;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR2\":\n                        case 18:\n                            message.severityNumber = 18;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR3\":\n                        case 19:\n                            message.severityNumber = 19;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR4\":\n                        case 20:\n                            message.severityNumber = 20;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL\":\n                        case 21:\n                            message.severityNumber = 21;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL2\":\n                        case 22:\n                            message.severityNumber = 22;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL3\":\n                        case 23:\n                            message.severityNumber = 23;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL4\":\n                        case 24:\n                            message.severityNumber = 24;\n                            break;\n                        }\n                        if (object.severityText != null)\n                            message.severityText = String(object.severityText);\n                        if (object.body != null) {\n                            if (typeof object.body !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n                            message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n                        }\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogRecord message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogRecord} message LogRecord\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogRecord.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n                            object.severityText = \"\";\n                            object.body = null;\n                            object.droppedAttributesCount = 0;\n                            object.flags = 0;\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === undefined ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            object.severityText = message.severityText;\n                        if (message.body != null && message.hasOwnProperty(\"body\"))\n                            object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (typeof message.observedTimeUnixNano === \"number\")\n                                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogRecord to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogRecord.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogRecord\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n                    };\n\n                    return LogRecord;\n                })();\n\n                return v1;\n            })();\n\n            return logs;\n        })();\n\n        return proto;\n    })();\n\n    return opentelemetry;\n})();\n\nmodule.exports = $root;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.WEBJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.17.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return 'unknown_service';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _isExporting = false;\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _droppedSpansCount: number = 0;\n\n  constructor(\n    private readonly _exporter: SpanExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n\n      if (this._droppedSpansCount === 0) {\n        diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n\n      return;\n    }\n\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      diag.warn(\n        `Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`\n      );\n      this._droppedSpansCount = 0;\n    }\n\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        const spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n\n        const doExport = () =>\n          this._exporter.export(spans, result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          });\n        const pendingResources = spans\n          .map(span => span.resource)\n          .filter(resource => resource.asyncAttributesPending);\n\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources.length === 0) {\n          doExport();\n        } else {\n          Promise.all(\n            pendingResources.map(\n              resource => resource.waitForAsyncAttributes?.()\n            )\n          ).then(doExport, err => {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._isExporting) return;\n    const flush = () => {\n      this._isExporting = true;\n      this._flushOneBatch()\n        .then(() => {\n          this._isExporting = false;\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          this._isExporting = false;\n          globalErrorHandler(e);\n        });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { SpanExporter } from '../../../export/SpanExporter';\nimport { BatchSpanProcessorBrowserConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BatchSpanProcessorBrowserConfig> {\n  private _visibilityChangeListener?: () => void;\n  private _pageHideListener?: () => void;\n\n  constructor(\n    _exporter: SpanExporter,\n    config?: BatchSpanProcessorBrowserConfig\n  ) {\n    super(_exporter, config);\n    this.onInit(config);\n  }\n\n  private onInit(config?: BatchSpanProcessorBrowserConfig): void {\n    if (\n      config?.disableAutoFlushOnDocumentHide !== true &&\n      typeof document !== 'undefined'\n    ) {\n      this._visibilityChangeListener = () => {\n        if (document.visibilityState === 'hidden') {\n          void this.forceFlush();\n        }\n      };\n      this._pageHideListener = () => {\n        void this.forceFlush();\n      };\n      document.addEventListener(\n        'visibilitychange',\n        this._visibilityChangeListener\n      );\n\n      // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n      document.addEventListener('pagehide', this._pageHideListener);\n    }\n  }\n\n  protected onShutdown(): void {\n    if (typeof document !== 'undefined') {\n      if (this._visibilityChangeListener) {\n        document.removeEventListener(\n          'visibilitychange',\n          this._visibilityChangeListener\n        );\n      }\n      if (this._pageHideListener) {\n        document.removeEventListener('pagehide', this._pageHideListener);\n      }\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const otperformance = performance;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system',\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string',\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user',\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name',\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement',\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation',\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table',\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:\n    'db.cassandra.speculative_execution_count',\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table',\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type',\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message',\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace',\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped',\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger',\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution',\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time',\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name',\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time',\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron',\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart',\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name',\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region',\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport',\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip',\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port',\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name',\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip',\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port',\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name',\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service',\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id',\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role',\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope',\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id',\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name',\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function',\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace',\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath',\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno',\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method',\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url',\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target',\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host',\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code',\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor',\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.request_content_length_uncompressed',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.response_content_length_uncompressed',\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name',\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip',\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:\n    'aws.dynamodb.provisioned_read_capacity',\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:\n    'aws.dynamodb.provisioned_write_capacity',\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:\n    'aws.dynamodb.global_secondary_indexes',\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:\n    'aws.dynamodb.global_secondary_index_updates',\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system',\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination',\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol',\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url',\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id',\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:\n    'messaging.message_payload_compressed_size_bytes',\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation',\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system',\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service',\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method',\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type',\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id',\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\n\nexport const DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql',\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql',\n  /** MySQL. */\n  MYSQL: 'mysql',\n  /** Oracle Database. */\n  ORACLE: 'oracle',\n  /** IBM Db2. */\n  DB2: 'db2',\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql',\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift',\n  /** Apache Hive. */\n  HIVE: 'hive',\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape',\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb',\n  /** Progress Database. */\n  PROGRESS: 'progress',\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb',\n  /** SAP HANA. */\n  HANADB: 'hanadb',\n  /** Ingres. */\n  INGRES: 'ingres',\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql',\n  /** EnterpriseDB. */\n  EDB: 'edb',\n  /** InterSystems Caché. */\n  CACHE: 'cache',\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas',\n  /** Firebird. */\n  FIREBIRD: 'firebird',\n  /** Apache Derby. */\n  DERBY: 'derby',\n  /** FileMaker. */\n  FILEMAKER: 'filemaker',\n  /** Informix. */\n  INFORMIX: 'informix',\n  /** InstantDB. */\n  INSTANTDB: 'instantdb',\n  /** InterBase. */\n  INTERBASE: 'interbase',\n  /** MariaDB. */\n  MARIADB: 'mariadb',\n  /** Netezza. */\n  NETEZZA: 'netezza',\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive',\n  /** PointBase. */\n  POINTBASE: 'pointbase',\n  /** SQLite. */\n  SQLITE: 'sqlite',\n  /** Sybase. */\n  SYBASE: 'sybase',\n  /** Teradata. */\n  TERADATA: 'teradata',\n  /** Vertica. */\n  VERTICA: 'vertica',\n  /** H2. */\n  H2: 'h2',\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion',\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra',\n  /** Apache HBase. */\n  HBASE: 'hbase',\n  /** MongoDB. */\n  MONGODB: 'mongodb',\n  /** Redis. */\n  REDIS: 'redis',\n  /** Couchbase. */\n  COUCHBASE: 'couchbase',\n  /** CouchDB. */\n  COUCHDB: 'couchdb',\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb',\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb',\n  /** Neo4j. */\n  NEO4J: 'neo4j',\n  /** Apache Geode. */\n  GEODE: 'geode',\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch',\n  /** Memcached. */\n  MEMCACHED: 'memcached',\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb',\n} as const;\nexport type DbSystemValues =\n  (typeof DbSystemValues)[keyof typeof DbSystemValues];\n\nexport const DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all',\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum',\n  /** quorum. */\n  QUORUM: 'quorum',\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum',\n  /** one. */\n  ONE: 'one',\n  /** two. */\n  TWO: 'two',\n  /** three. */\n  THREE: 'three',\n  /** local_one. */\n  LOCAL_ONE: 'local_one',\n  /** any. */\n  ANY: 'any',\n  /** serial. */\n  SERIAL: 'serial',\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial',\n} as const;\nexport type DbCassandraConsistencyLevelValues =\n  (typeof DbCassandraConsistencyLevelValues)[keyof typeof DbCassandraConsistencyLevelValues];\n\nexport const FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource',\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http',\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub',\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer',\n  /** If none of the others apply. */\n  OTHER: 'other',\n} as const;\nexport type FaasTriggerValues =\n  (typeof FaasTriggerValues)[keyof typeof FaasTriggerValues];\n\nexport const FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert',\n  /** When an object is modified. */\n  EDIT: 'edit',\n  /** When an object is deleted. */\n  DELETE: 'delete',\n} as const;\nexport type FaasDocumentOperationValues =\n  (typeof FaasDocumentOperationValues)[keyof typeof FaasDocumentOperationValues];\n\nexport const FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type FaasInvokedProviderValues =\n  (typeof FaasInvokedProviderValues)[keyof typeof FaasInvokedProviderValues];\n\nexport const NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp',\n  /** ip_udp. */\n  IP_UDP: 'ip_udp',\n  /** Another IP-based protocol. */\n  IP: 'ip',\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix',\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe',\n  /** In-process communication. */\n  INPROC: 'inproc',\n  /** Something else (non IP-based). */\n  OTHER: 'other',\n} as const;\nexport type NetTransportValues =\n  (typeof NetTransportValues)[keyof typeof NetTransportValues];\n\nexport const NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi',\n  /** wired. */\n  WIRED: 'wired',\n  /** cell. */\n  CELL: 'cell',\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable',\n  /** unknown. */\n  UNKNOWN: 'unknown',\n} as const;\nexport type NetHostConnectionTypeValues =\n  (typeof NetHostConnectionTypeValues)[keyof typeof NetHostConnectionTypeValues];\n\nexport const NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs',\n  /** EDGE. */\n  EDGE: 'edge',\n  /** UMTS. */\n  UMTS: 'umts',\n  /** CDMA. */\n  CDMA: 'cdma',\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0',\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a',\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt',\n  /** HSDPA. */\n  HSDPA: 'hsdpa',\n  /** HSUPA. */\n  HSUPA: 'hsupa',\n  /** HSPA. */\n  HSPA: 'hspa',\n  /** IDEN. */\n  IDEN: 'iden',\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b',\n  /** LTE. */\n  LTE: 'lte',\n  /** EHRPD. */\n  EHRPD: 'ehrpd',\n  /** HSPAP. */\n  HSPAP: 'hspap',\n  /** GSM. */\n  GSM: 'gsm',\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma',\n  /** IWLAN. */\n  IWLAN: 'iwlan',\n  /** 5G NR (New Radio). */\n  NR: 'nr',\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa',\n  /** LTE CA. */\n  LTE_CA: 'lte_ca',\n} as const;\nexport type NetHostConnectionSubtypeValues =\n  (typeof NetHostConnectionSubtypeValues)[keyof typeof NetHostConnectionSubtypeValues];\n\nexport const HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0',\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1',\n  /** HTTP 2. */\n  HTTP_2_0: '2.0',\n  /** SPDY protocol. */\n  SPDY: 'SPDY',\n  /** QUIC protocol. */\n  QUIC: 'QUIC',\n} as const;\nexport type HttpFlavorValues =\n  (typeof HttpFlavorValues)[keyof typeof HttpFlavorValues];\n\nexport const MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue',\n  /** A message sent to a topic. */\n  TOPIC: 'topic',\n} as const;\nexport type MessagingDestinationKindValues =\n  (typeof MessagingDestinationKindValues)[keyof typeof MessagingDestinationKindValues];\n\nexport const MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive',\n  /** process. */\n  PROCESS: 'process',\n} as const;\nexport type MessagingOperationValues =\n  (typeof MessagingOperationValues)[keyof typeof MessagingOperationValues];\n\nexport const RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0,\n  /** CANCELLED. */\n  CANCELLED: 1,\n  /** UNKNOWN. */\n  UNKNOWN: 2,\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3,\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4,\n  /** NOT_FOUND. */\n  NOT_FOUND: 5,\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6,\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7,\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8,\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9,\n  /** ABORTED. */\n  ABORTED: 10,\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11,\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12,\n  /** INTERNAL. */\n  INTERNAL: 13,\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14,\n  /** DATA_LOSS. */\n  DATA_LOSS: 15,\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16,\n} as const;\nexport type RpcGrpcStatusCodeValues =\n  (typeof RpcGrpcStatusCodeValues)[keyof typeof RpcGrpcStatusCodeValues];\n\nexport const MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT',\n  /** received. */\n  RECEIVED: 'RECEIVED',\n} as const;\nexport type MessageTypeValues =\n  (typeof MessageTypeValues)[keyof typeof MessageTypeValues];\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  private _droppedAttributesCount = 0;\n  private _droppedEventsCount: number = 0;\n  private _droppedLinksCount: number = 0;\n\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown // keeping this argument even though it is unused to ensure backwards compatibility\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      diag.warn('Dropping extra events.');\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0,\n    });\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error(\n        `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`\n      );\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp < otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] =\n          exception.code.toString();\n      } else if (exception.name) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SemanticAttributes.EXCEPTION_TYPE] ||\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  get droppedAttributesCount(): number {\n    return this._droppedAttributesCount;\n  }\n\n  get droppedEventsCount(): number {\n    return this._droppedEventsCount;\n  }\n\n  get droppedLinksCount(): number {\n    return this._droppedLinksCount;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with trucated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(\n      null,\n      SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2)\n    );\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime\n    );\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n    span.setAttributes(initAttributes);\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { SpanProcessor, Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: IResource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    const defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      const batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\n\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Keeps the reference to current context\n   */\n  public _currentContext = ROOT_CONTEXT;\n\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(\n    context = ROOT_CONTEXT,\n    target: T\n  ): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    return this._currentContext;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable(): this {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n\n    try {\n      return fn.call(thisArg, ...args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BasicTracerProvider,\n  SDKRegistrationConfig,\n  TracerConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n\n/**\n * WebTracerConfig provides an interface for configuring a Web Tracer.\n */\nexport type WebTracerConfig = TracerConfig;\n\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  constructor(config: WebTracerConfig = {}) {\n    super(config);\n\n    if ((config as SDKRegistrationConfig).contextManager) {\n      throw (\n        'contextManager should be defined in register method not in' +\n        ' constructor'\n      );\n    }\n    if ((config as SDKRegistrationConfig).propagator) {\n      throw 'propagator should be defined in register method not in constructor';\n    }\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  override register(config: SDKRegistrationConfig = {}): void {\n    if (config.contextManager === undefined) {\n      config.contextManager = new StackContextManager();\n    }\n    if (config.contextManager) {\n      config.contextManager.enable();\n    }\n\n    super.register(config);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider',\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id',\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region',\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform',\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name',\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id',\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime',\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name',\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag',\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id',\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name',\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name',\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id',\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version',\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance',\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory',\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id',\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name',\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type',\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch',\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name',\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id',\n\n  /**\n   * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version',\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name',\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name',\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid',\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid',\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name',\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name',\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid',\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name',\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type',\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description',\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name',\n\n  /**\n   * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version',\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid',\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command',\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line',\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args',\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner',\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name',\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name',\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace',\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id',\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version',\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name',\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version',\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n\nexport const CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type CloudProviderValues =\n  (typeof CloudProviderValues)[keyof typeof CloudProviderValues];\n\nexport const CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2',\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs',\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks',\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda',\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm',\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks',\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions',\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service',\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run',\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine',\n} as const;\nexport type CloudPlatformValues =\n  (typeof CloudPlatformValues)[keyof typeof CloudPlatformValues];\n\nexport const AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2',\n  /** fargate. */\n  FARGATE: 'fargate',\n} as const;\nexport type AwsEcsLaunchtypeValues =\n  (typeof AwsEcsLaunchtypeValues)[keyof typeof AwsEcsLaunchtypeValues];\n\nexport const HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64',\n  /** ARM32. */\n  ARM32: 'arm32',\n  /** ARM64. */\n  ARM64: 'arm64',\n  /** Itanium. */\n  IA64: 'ia64',\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32',\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64',\n  /** 32-bit x86. */\n  X86: 'x86',\n} as const;\nexport type HostArchValues =\n  (typeof HostArchValues)[keyof typeof HostArchValues];\n\nexport const OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows',\n  /** Linux. */\n  LINUX: 'linux',\n  /** Apple Darwin. */\n  DARWIN: 'darwin',\n  /** FreeBSD. */\n  FREEBSD: 'freebsd',\n  /** NetBSD. */\n  NETBSD: 'netbsd',\n  /** OpenBSD. */\n  OPENBSD: 'openbsd',\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd',\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux',\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix',\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris',\n  /** IBM z/OS. */\n  Z_OS: 'z_os',\n} as const;\nexport type OsTypeValues = (typeof OsTypeValues)[keyof typeof OsTypeValues];\n\nexport const TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp',\n  /** dotnet. */\n  DOTNET: 'dotnet',\n  /** erlang. */\n  ERLANG: 'erlang',\n  /** go. */\n  GO: 'go',\n  /** java. */\n  JAVA: 'java',\n  /** nodejs. */\n  NODEJS: 'nodejs',\n  /** php. */\n  PHP: 'php',\n  /** python. */\n  PYTHON: 'python',\n  /** ruby. */\n  RUBY: 'ruby',\n  /** webjs. */\n  WEBJS: 'webjs',\n} as const;\nexport type TelemetrySdkLanguageValues =\n  (typeof TelemetrySdkLanguageValues)[keyof typeof TelemetrySdkLanguageValues];\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","'use strict';\n/**\n * @license Angular v14.2.0-next.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n((function (global) {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    // Initialize before it's accessed below.\n    // __Zone_symbol_prefix global can be used to override the default zone\n    // symbol prefix with a custom one if needed.\n    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\n    function __symbol__(name) {\n        return symbolPrefix + name;\n    }\n    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n    if (global['Zone']) {\n        // if global['Zone'] already exists (maybe zone.js was already loaded or\n        // some other lib also registered a global object named Zone), we may need\n        // to throw an error, but sometimes user may not want this error.\n        // For example,\n        // we have two web pages, page1 includes zone.js, page2 doesn't.\n        // and the 1st time user load page1 and page2, everything work fine,\n        // but when user load page2 again, error occurs because global['Zone'] already exists.\n        // so we add a flag to let user choose whether to throw this error or not.\n        // By default, if existing Zone is from zone.js, we will not throw the error.\n        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\n            throw new Error('Zone already loaded.');\n        }\n        else {\n            return global['Zone'];\n        }\n    }\n    class Zone {\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new _ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = Zone.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        static __load_patch(name, fn, ignoreDuplicate = false) {\n            if (patches.hasOwnProperty(name)) {\n                // `checkDuplicate` option is defined from global variable\n                // so it works for all modules.\n                // `ignoreDuplicate` can work for the specified module\n                if (!ignoreDuplicate && checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            const previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    // tslint:disable-next-line:require-internal-with-underscore\n    Zone.__symbol__ = __symbol__;\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\n    };\n    class _ZoneDelegate {\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone =\n                zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone =\n                zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt = zoneSpec &&\n                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                // clang-format off\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                // clang-format on\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zone = null;\n            this.runCount = 0;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zoneDelegates = null;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            if (!callback) {\n                throw new Error('callback is not defined');\n            }\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function nativeScheduleMicroTask(func) {\n        if (!nativeMicroTaskQueuePromise) {\n            if (global[symbolPromise]) {\n                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n            }\n        }\n        if (nativeMicroTaskQueuePromise) {\n            let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n            if (!nativeThen) {\n                // native Promise is not patchable, we need to use `then` directly\n                // issue 1078\n                nativeThen = nativeMicroTaskQueuePromise['then'];\n            }\n            nativeThen.call(nativeMicroTaskQueuePromise, func);\n        }\n        else {\n            global[symbolSetTimeout](func, 0);\n        }\n    }\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            nativeScheduleMicroTask(drainMicroTaskQueue);\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop,\n        nativeScheduleMicroTask: nativeScheduleMicroTask\n    };\n    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n}))(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n/// <reference types=\"node\"/>\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** Zone symbol prefix string const. */\nconst ZONE_SYMBOL_PREFIX = Zone.__symbol__('');\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = Zone.__symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames$1 = {};\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames$1[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signature\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result = listener &&\n            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // slice(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.slice(2);\n    let eventNameSymbol = zoneSymbolEventNames$1[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        const previousValue = target[eventNameSymbol];\n        if (typeof previousValue === 'function') {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        originalDescSet && originalDescSet.call(target, null);\n        target[eventNameSymbol] = newValue;\n        if (typeof newValue === 'function') {\n            target.addEventListener(eventName, wrapFn, false);\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.slice(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) {\n    }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) {\n    }\n    return ieOrEdge;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    const ObjectDefineProperty = Object.defineProperty;\n    function readableObjectToString(obj) {\n        if (obj && obj.toString === Object.prototype.toString) {\n            const className = obj.constructor && obj.constructor.name;\n            return (className ? className : '') + ': ' + JSON.stringify(obj);\n        }\n        return obj ? obj.toString() : Object.prototype.toString.call(obj);\n    }\n    const __symbol__ = api.symbol;\n    const _uncaughtPromiseErrors = [];\n    const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    const creationTrace = '__creationTrace__';\n    api.onUnhandledError = (e) => {\n        if (api.showUncaughtError()) {\n            const rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = () => {\n        while (_uncaughtPromiseErrors.length) {\n            const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n            try {\n                uncaughtPromiseError.zone.runGuarded(() => {\n                    if (uncaughtPromiseError.throwOriginal) {\n                        throw uncaughtPromiseError.rejection;\n                    }\n                    throw uncaughtPromiseError;\n                });\n            }\n            catch (error) {\n                handleUnhandledRejection(error);\n            }\n        }\n    };\n    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (typeof handler === 'function') {\n                handler.call(this, e);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    const symbolState = __symbol__('state');\n    const symbolValue = __symbol__('value');\n    const symbolFinally = __symbol__('finally');\n    const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n    const symbolParentPromiseState = __symbol__('parentPromiseState');\n    const source = 'Promise.then';\n    const UNRESOLVED = null;\n    const RESOLVED = true;\n    const REJECTED = false;\n    const REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return (v) => {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    const once = function () {\n        let wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    const TYPE_ERROR = 'Promise resolved with itself';\n    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        const onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            let then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(() => {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                const queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                if (promise[symbolFinally] === symbolFinally) {\n                    // the promise is generated by Promise.prototype.finally\n                    if (state === RESOLVED) {\n                        // the state is resolved, should ignore the value\n                        // and use parent promise value\n                        promise[symbolState] = promise[symbolParentPromiseState];\n                        promise[symbolValue] = promise[symbolParentPromiseValue];\n                    }\n                }\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    // check if longStackTraceZone is here\n                    const trace = Zone.currentTask && Zone.currentTask.data &&\n                        Zone.currentTask.data[creationTrace];\n                    if (trace) {\n                        // only keep the long stack trace into error when in longStackTraceZone\n                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\n                    }\n                }\n                for (let i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    let uncaughtPromiseError = value;\n                    try {\n                        // Here we throws a new Error to print more readable error log\n                        // and if the value is not an error, zone.js builds an `Error`\n                        // Object here to attach the stack information.\n                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        uncaughtPromiseError = err;\n                    }\n                    if (isDisableWrappingUncaughtPromiseRejection) {\n                        // If disable wrapping uncaught promise reject\n                        // use the value instead of wrapping it.\n                        uncaughtPromiseError.throwOriginal = true;\n                    }\n                    uncaughtPromiseError.rejection = value;\n                    uncaughtPromiseError.promise = promise;\n                    uncaughtPromiseError.zone = Zone.current;\n                    uncaughtPromiseError.task = Zone.currentTask;\n                    _uncaughtPromiseErrors.push(uncaughtPromiseError);\n                    api.scheduleMicroTask(); // to make sure that it is running\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                const handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === 'function') {\n                    handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        const promiseState = promise[symbolState];\n        const delegate = promiseState ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected :\n                forwardRejection;\n        zone.scheduleMicroTask(source, () => {\n            try {\n                const parentPromiseValue = promise[symbolValue];\n                const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\n                if (isFinallyPromise) {\n                    // if the promise is generated from finally call, keep parent promise's state and value\n                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                    chainPromise[symbolParentPromiseState] = promiseState;\n                }\n                // should not pass value to finally callback\n                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\n                    [] :\n                    [parentPromiseValue]);\n                resolvePromise(chainPromise, true, value);\n            }\n            catch (error) {\n                // if error occurs, should always return this error\n                resolvePromise(chainPromise, false, error);\n            }\n        }, chainPromise);\n    }\n    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    const noop = function () { };\n    const AggregateError = global.AggregateError;\n    class ZoneAwarePromise {\n        static toString() {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        }\n        static resolve(value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        }\n        static reject(error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        }\n        static any(values) {\n            if (!values || typeof values[Symbol.iterator] !== 'function') {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            const promises = [];\n            let count = 0;\n            try {\n                for (let v of values) {\n                    count++;\n                    promises.push(ZoneAwarePromise.resolve(v));\n                }\n            }\n            catch (err) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            if (count === 0) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            let finished = false;\n            const errors = [];\n            return new ZoneAwarePromise((resolve, reject) => {\n                for (let i = 0; i < promises.length; i++) {\n                    promises[i].then(v => {\n                        if (finished) {\n                            return;\n                        }\n                        finished = true;\n                        resolve(v);\n                    }, err => {\n                        errors.push(err);\n                        count--;\n                        if (count === 0) {\n                            finished = true;\n                            reject(new AggregateError(errors, 'All promises were rejected'));\n                        }\n                    });\n                }\n            });\n        }\n        ;\n        static race(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            function onResolve(value) {\n                resolve(value);\n            }\n            function onReject(error) {\n                reject(error);\n            }\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        }\n        static all(values) {\n            return ZoneAwarePromise.allWithCallback(values);\n        }\n        static allSettled(values) {\n            const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\n            return P.allWithCallback(values, {\n                thenCallback: (value) => ({ status: 'fulfilled', value }),\n                errorCallback: (err) => ({ status: 'rejected', reason: err })\n            });\n        }\n        static allWithCallback(values, callback) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            // Start at 2 to prevent prematurely resolving if .then is called immediately.\n            let unresolvedCount = 2;\n            let valueIndex = 0;\n            const resolvedValues = [];\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                const curValueIndex = valueIndex;\n                try {\n                    value.then((value) => {\n                        resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\n                        unresolvedCount--;\n                        if (unresolvedCount === 0) {\n                            resolve(resolvedValues);\n                        }\n                    }, (err) => {\n                        if (!callback) {\n                            reject(err);\n                        }\n                        else {\n                            resolvedValues[curValueIndex] = callback.errorCallback(err);\n                            unresolvedCount--;\n                            if (unresolvedCount === 0) {\n                                resolve(resolvedValues);\n                            }\n                        }\n                    });\n                }\n                catch (thenErr) {\n                    reject(thenErr);\n                }\n                unresolvedCount++;\n                valueIndex++;\n            }\n            // Make the unresolvedCount zero-based again.\n            unresolvedCount -= 2;\n            if (unresolvedCount === 0) {\n                resolve(resolvedValues);\n            }\n            return promise;\n        }\n        constructor(executor) {\n            const promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                const onceWrapper = once();\n                executor &&\n                    executor(onceWrapper(makeResolver(promise, RESOLVED)), onceWrapper(makeResolver(promise, REJECTED)));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        get [Symbol.toStringTag]() {\n            return 'Promise';\n        }\n        get [Symbol.species]() {\n            return ZoneAwarePromise;\n        }\n        then(onFulfilled, onRejected) {\n            var _a;\n            // We must read `Symbol.species` safely because `this` may be anything. For instance, `this`\n            // may be an object without a prototype (created through `Object.create(null)`); thus\n            // `this.constructor` will be undefined. One of the use cases is SystemJS creating\n            // prototype-less objects (modules) via `Object.create(null)`. The SystemJS creates an empty\n            // object and copies promise properties into that object (within the `getOrCreateLoad`\n            // function). The zone.js then checks if the resolved value has the `then` method and invokes\n            // it with the `value` context. Otherwise, this will throw an error: `TypeError: Cannot read\n            // properties of undefined (reading 'Symbol(Symbol.species)')`.\n            let C = (_a = this.constructor) === null || _a === void 0 ? void 0 : _a[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = this.constructor || ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        }\n        catch(onRejected) {\n            return this.then(null, onRejected);\n        }\n        finally(onFinally) {\n            var _a;\n            // See comment on the call to `then` about why thee `Symbol.species` is safely accessed.\n            let C = (_a = this.constructor) === null || _a === void 0 ? void 0 : _a[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            chainPromise[symbolFinally] = symbolFinally;\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n            }\n            return chainPromise;\n        }\n    }\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    const NativePromise = global[symbolPromise] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    const symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        const proto = Ctor.prototype;\n        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n        if (prop && (prop.writable === false || !prop.configurable)) {\n            // check Ctor.prototype.then propertyDescriptor is writable or not\n            // in meteor env, writable is false, we should ignore such case\n            return;\n        }\n        const originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                originalThen.call(this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    api.patchThen = patchThen;\n    function zoneify(fn) {\n        return function (self, args) {\n            let resultPromise = fn.apply(self, args);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            let ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        patchMethod(global, 'fetch', delegate => zoneify(delegate));\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', (global) => {\n    // patch Func.prototype.toString to let them look like native\n    const originalFunctionToString = Function.prototype.toString;\n    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    const PROMISE_SYMBOL = zoneSymbol('Promise');\n    const ERROR_SYMBOL = zoneSymbol('Error');\n    const newFunctionToString = function toString() {\n        if (typeof this === 'function') {\n            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.call(originalDelegate);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                const nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.call(nativePromise);\n                }\n            }\n            if (this === Error) {\n                const nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.call(nativeError);\n                }\n            }\n        }\n        return originalFunctionToString.call(this);\n    };\n    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n    Function.prototype.toString = newFunctionToString;\n    // patch Object.prototype.toString to let them look like native\n    const originalObjectToString = Object.prototype.toString;\n    const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (typeof Promise === 'function' && this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.call(this);\n    };\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            }\n        });\n        // Note: We pass the `options` object as the event handler too. This is not compatible with the\n        // signature of `addEventListener` or `removeEventListener` but enables us to remove the handler\n        // without an actual handler.\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true\n};\nconst zoneSymbolEventNames = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\nconst IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\nfunction prepareEventNames(eventName, eventNameToString) {\n    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n    zoneSymbolEventNames[eventName] = {};\n    zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n    zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n}\nfunction patchEventTarget(_global, api, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        // need to try/catch error here, otherwise, the error in one event listener\n        // will break the executions of the other event listeners. Also error will\n        // not remove the event listener when `once` options is true.\n        let error;\n        try {\n            task.invoke(task, target, [event]);\n        }\n        catch (err) {\n            error = err;\n        }\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n        return error;\n    };\n    function globalCallback(context, event, isCapture) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = context || event.target || _global;\n        const tasks = target[zoneSymbolEventNames[event.type][isCapture ? TRUE_STR : FALSE_STR]];\n        if (tasks) {\n            const errors = [];\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                const err = invokeTask(tasks[0], target, event);\n                err && errors.push(err);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    const err = invokeTask(copyTasks[i], target, event);\n                    err && errors.push(err);\n                }\n            }\n            // Since there is only one error, we don't need to schedule microTask\n            // to throw the error.\n            if (errors.length === 1) {\n                throw errors[0];\n            }\n            else {\n                for (let i = 0; i < errors.length; i++) {\n                    const err = errors[i];\n                    api.nativeScheduleMicroTask(() => {\n                        throw err;\n                    });\n                }\n            }\n        }\n    }\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        return globalCallback(this, event, false);\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        return globalCallback(this, event, true);\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        const taskData = {};\n        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        /**\n         * This util function will build an option object with passive option\n         * to handle all possible input from the user.\n         */\n        function buildEventListenerOptions(options, passive) {\n            if (!passiveSupported && typeof options === 'object' && options) {\n                // doesn't support passive but user want to pass an object as options.\n                // this will not work on some old browser, so we just pass a boolean\n                // as useCapture parameter\n                return !!options.capture;\n            }\n            if (!passiveSupported || !passive) {\n                return options;\n            }\n            if (typeof options === 'boolean') {\n                return { capture: options, passive: true };\n            }\n            if (!options) {\n                return { passive: true };\n            }\n            if (typeof options === 'object' && options.passive !== false) {\n                return Object.assign(Object.assign({}, options), { passive: true });\n            }\n            return options;\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return (typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate);\n        };\n        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];\n        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                let eventName = arguments[0];\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\n                const options = buildEventListenerOptions(arguments[2], passive);\n                if (unpatchedEvents) {\n                    // check unpatched list\n                    for (let i = 0; i < unpatchedEvents.length; i++) {\n                        if (eventName === unpatchedEvents[i]) {\n                            if (passive) {\n                                return nativeListener.call(target, eventName, delegate, options);\n                            }\n                            else {\n                                return nativeListener.apply(this, arguments);\n                            }\n                        }\n                    }\n                }\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n                const once = options && typeof options === 'object' ? options.once : false;\n                const zone = Zone.current;\n                let symbolEventNames = zoneSymbolEventNames[eventName];\n                if (!symbolEventNames) {\n                    prepareEventNames(eventName, eventNameToString);\n                    symbolEventNames = zoneSymbolEventNames[eventName];\n                }\n                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource +\n                        (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const options = arguments[2];\n            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                            // in the target, we have an event listener which is added by on_property\n                            // such as target.onclick = function() {}, so we need to clear this internal\n                            // property too if all delegates all removed\n                            if (typeof eventName === 'string') {\n                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\n                                target[onPropertySymbol] = null;\n                            }\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // issue 930, didn't find the event name or callback\n            // from zone kept existingTasks, the callback maybe\n            // added outside of zone, we need to call native removeEventListener\n            // to try to remove it.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                const symbolEventNames = zoneSymbolEventNames[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    if (!eventName) {\n        const foundTasks = [];\n        for (let prop in target) {\n            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n            let evtName = match && match[1];\n            if (evtName && (!eventName || evtName === eventName)) {\n                const tasks = target[prop];\n                if (tasks) {\n                    for (let i = 0; i < tasks.length; i++) {\n                        foundTasks.push(tasks[i]);\n                    }\n                }\n            }\n        }\n        return foundTasks;\n    }\n    let symbolEventName = zoneSymbolEventNames[eventName];\n    if (!symbolEventName) {\n        prepareEventNames(eventName);\n        symbolEventName = zoneSymbolEventNames[eventName];\n    }\n    const captureFalseTasks = target[symbolEventName[FALSE_STR]];\n    const captureTrueTasks = target[symbolEventName[TRUE_STR]];\n    if (!captureFalseTasks) {\n        return captureTrueTasks ? captureTrueTasks.slice() : [];\n    }\n    else {\n        return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :\n            captureFalseTasks.slice();\n    }\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = target[symbol] = target[method];\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                // Note: the `patchCallbacks` is used for patching the `document.registerElement` and\n                // `customElements.define`. We explicitly wrap the patching code into try-catch since\n                // callbacks may be already patched by other web components frameworks (e.g. LWC), and they\n                // make those properties non-writable. This means that patching callback will throw an error\n                // `cannot assign to read-only property`. See this code as an example:\n                // https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/framework/base-bridge-element.ts#L180-L186\n                // We don't want to stop the application rendering if we couldn't patch some\n                // callback, e.g. `attributeChangedCallback`.\n                try {\n                    if (prototype.hasOwnProperty(callback)) {\n                        const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                        if (descriptor && descriptor.value) {\n                            descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                            api._redefineProperty(opts.prototype, callback, descriptor);\n                        }\n                        else if (prototype[callback]) {\n                            prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                        }\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                catch (_a) {\n                    // Note: we leave the catch block empty since there's no way to handle the error related\n                    // to non-writable property.\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter(ip => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\n/**\n * Get all event name properties which the event name startsWith `on`\n * from the target object itself, inherited properties are not considered.\n */\nfunction getOnEventNames(target) {\n    return Object.getOwnPropertyNames(target)\n        .filter(name => name.startsWith('on') && name.length > 2)\n        .map(name => name.substring(2));\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    let patchTargets = [];\n    if (isBrowser) {\n        const internalWindow = window;\n        patchTargets = patchTargets.concat([\n            'Document', 'SVGElement', 'Element', 'HTMLElement', 'HTMLBodyElement', 'HTMLMediaElement',\n            'HTMLFrameSetElement', 'HTMLFrameElement', 'HTMLIFrameElement', 'HTMLMarqueeElement', 'Worker'\n        ]);\n        const ignoreErrorProperties = isIE() ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, getOnEventNames(internalWindow), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n    }\n    patchTargets = patchTargets.concat([\n        'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'IDBIndex', 'IDBRequest', 'IDBOpenDBRequest',\n        'IDBDatabase', 'IDBTransaction', 'IDBCursor', 'WebSocket'\n    ]);\n    for (let i = 0; i < patchTargets.length; i++) {\n        const target = _global[patchTargets[i]];\n        target && target.prototype &&\n            patchFilteredProperties(target.prototype, getOnEventNames(target.prototype), ignoreProperties);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('util', (global, Zone, api) => {\n    // Collect native event names by looking at properties\n    // on the global namespace, e.g. 'onclick'.\n    const eventNames = getOnEventNames(global);\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n    api.bindArguments = bindArguments;\n    api.patchMacroTask = patchMacroTask;\n    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\n    // define which events will not be patched by `Zone.js`.\n    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\n    // the name consistent with angular repo.\n    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\n    // backwards compatibility.\n    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n    if (global[SYMBOL_UNPATCHED_EVENTS]) {\n        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n    }\n    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n            global[SYMBOL_BLACK_LISTED_EVENTS];\n    }\n    api.patchEventPrototype = patchEventPrototype;\n    api.patchEventTarget = patchEventTarget;\n    api.isIEOrEdge = isIEOrEdge;\n    api.ObjectDefineProperty = ObjectDefineProperty;\n    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n    api.ObjectCreate = ObjectCreate;\n    api.ArraySlice = ArraySlice;\n    api.patchClass = patchClass;\n    api.wrapWithCurrentZone = wrapWithCurrentZone;\n    api.filterProperties = filterProperties;\n    api.attachOriginToPatched = attachOriginToPatched;\n    api._redefineProperty = Object.defineProperty;\n    api.patchCallbacks = patchCallbacks;\n    api.getGlobalObjects = () => ({\n        globalSources,\n        zoneSymbolEventNames,\n        eventNames,\n        isBrowser,\n        isMix,\n        isNode,\n        TRUE_STR,\n        FALSE_STR,\n        ZONE_SYMBOL_PREFIX,\n        ADD_EVENT_LISTENER_STR,\n        REMOVE_EVENT_LISTENER_STR\n    });\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[0] = function () {\n            return task.invoke.apply(this, arguments);\n        };\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative.call(window, task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, (delegate) => function (self, args) {\n            if (typeof args[0] === 'function') {\n                const options = {\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\n                        undefined,\n                    args: args\n                };\n                const callback = args[0];\n                args[0] = function timer() {\n                    try {\n                        return callback.apply(this, arguments);\n                    }\n                    finally {\n                        // issue-934, task will be cancelled\n                        // even it is a periodic task such as\n                        // setInterval\n                        // https://github.com/angular/angular/issues/40387\n                        // Cleanup tasksByHandleId should be handled before scheduleTask\n                        // Since some zoneSpec may intercept and doesn't trigger\n                        // scheduleFn(scheduleTask) provided here.\n                        if (!(options.isPeriodic)) {\n                            if (typeof options.handleId === 'number') {\n                                // in non-nodejs env, we remove timerId\n                                // from local cache\n                                delete tasksByHandleId[options.handleId];\n                            }\n                            else if (options.handleId) {\n                                // Node returns complex objects as handleIds\n                                // we remove task reference from timer object\n                                options.handleId[taskSymbol] = null;\n                            }\n                        }\n                    }\n                };\n                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                const handle = task.data.handleId;\n                if (typeof handle === 'number') {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === 'number' || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        });\n    clearNative =\n        patchMethod(window, cancelName, (delegate) => function (self, args) {\n            const id = args[0];\n            let task;\n            if (typeof id === 'number') {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === 'number') {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, api, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('legacy', (global) => {\n    const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n    if (legacyPatch) {\n        legacyPatch();\n    }\n});\nZone.__load_patch('queueMicrotask', (global, Zone, api) => {\n    api.patchMethod(global, 'queueMicrotask', delegate => {\n        return function (self, args) {\n            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);\n        };\n    });\n});\nZone.__load_patch('timers', (global) => {\n    const set = 'set';\n    const clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', (global) => {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', (global, Zone) => {\n    const blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (let i = 0; i < blockingMethods.length; i++) {\n        const name = blockingMethods[i];\n        patchMethod(global, name, (delegate, symbol, name) => {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', (global, Zone, api) => {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, api, [XMLHttpRequestEventTarget.prototype]);\n    }\n});\nZone.__load_patch('MutationObserver', (global, Zone, api) => {\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n});\nZone.__load_patch('IntersectionObserver', (global, Zone, api) => {\n    patchClass('IntersectionObserver');\n});\nZone.__load_patch('FileReader', (global, Zone, api) => {\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', (global, Zone, api) => {\n    propertyDescriptorPatch(api, global);\n});\nZone.__load_patch('customElements', (global, Zone, api) => {\n    patchCustomElements(global, api);\n});\nZone.__load_patch('XHR', (global, Zone) => {\n    // Treat XMLHttpRequest as a macrotask.\n    patchXHR(global);\n    const XHR_TASK = zoneSymbol('xhrTask');\n    const XHR_SYNC = zoneSymbol('xhrSync');\n    const XHR_LISTENER = zoneSymbol('xhrListener');\n    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    const XHR_URL = zoneSymbol('xhrURL');\n    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n    function patchXHR(window) {\n        const XMLHttpRequest = window['XMLHttpRequest'];\n        if (!XMLHttpRequest) {\n            // XMLHttpRequest is not available in service worker\n            return;\n        }\n        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n        function findPendingTask(target) {\n            return target[XHR_TASK];\n        }\n        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n        if (!oriAddListener) {\n            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n        }\n        const READY_STATE_CHANGE = 'readystatechange';\n        const SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            const data = task.data;\n            const target = data.target;\n            target[XHR_SCHEDULED] = false;\n            target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n            // remove existing event listener\n            const listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n            }\n            const newListener = target[XHR_LISTENER] = () => {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        // check whether the xhr has registered onload listener\n                        // if that is the case, the task should invoke after all\n                        // onload listeners finish.\n                        // Also if the request failed without response (status = 0), the load event handler\n                        // will not be triggered, in that case, we should also invoke the placeholder callback\n                        // to close the XMLHttpRequest::send macroTask.\n                        // https://github.com/angular/angular/issues/38795\n                        const loadTasks = target[Zone.__symbol__('loadfalse')];\n                        if (target.status !== 0 && loadTasks && loadTasks.length > 0) {\n                            const oriInvoke = task.invoke;\n                            task.invoke = function () {\n                                // need to load the tasks again, because in other\n                                // load listener, they may remove themselves\n                                const loadTasks = target[Zone.__symbol__('loadfalse')];\n                                for (let i = 0; i < loadTasks.length; i++) {\n                                    if (loadTasks[i] === task) {\n                                        loadTasks.splice(i, 1);\n                                    }\n                                }\n                                if (!data.aborted && task.state === SCHEDULED) {\n                                    oriInvoke.call(task);\n                                }\n                            };\n                            loadTasks.push(task);\n                        }\n                        else {\n                            task.invoke();\n                        }\n                    }\n                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                        // error occurs when xhr.send()\n                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                    }\n                }\n            };\n            oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n            const storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            target[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            const data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        });\n        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n            if (Zone.current[fetchTaskScheduling] === true) {\n                // a fetch is scheduling, so we are using xhr to polyfill fetch\n                // and because we already schedule macroTask for fetch, we should\n                // not schedule a macroTask for xhr again\n                return sendNative.apply(self, args);\n            }\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\n                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\n                    task.state === SCHEDULED) {\n                    // xhr request throw error when send\n                    // we should invoke task instead of leaving a scheduled\n                    // pending macroTask\n                    task.invoke();\n                }\n            }\n        });\n        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n            const task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            else if (Zone.current[fetchTaskAborting] === true) {\n                // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                return abortNative.apply(self, args);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        });\n    }\n});\nZone.__load_patch('geolocation', (global) => {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            const eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(eventTask => {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["BaggageImpl","entries","this","_entries","Map","prototype","getEntry","key","entry","get","Object","assign","getAllEntries","Array","from","map","_a","_b","__read","setEntry","newBaggage","set","removeEntry","delete","removeEntries","keys","_i","arguments","length","keys_1","__values","keys_1_1","next","done","value","clear","baggageEntryMetadataSymbol","Symbol","diag","DiagAPI","createBaggage","baggageEntryMetadataFromString","str","error","__TYPE__","toString","ZONE_CONTEXT_KEY","ZoneContextManager","_enabled","_zoneCounter","_activeContextFromZone","activeZone","ROOT_CONTEXT","_bindFunction","context","target","manager","contextWrapper","_this","args","with","apply","defineProperty","enumerable","configurable","writable","_bindListener","obj","undefined","__ot_listeners","addEventListener","_patchAddEventListener","removeEventListener","_patchRemoveEventListener","_createZoneName","random","Math","_createZone","zoneName","Zone","current","fork","name","properties","_getActiveZone","original","contextManager","event","listener","opts","listeners","WeakMap","patchedListener","bind","call","events","active","disable","enable","fn","thisArg","run","ExportResultCode","BAGGAGE_KEY_PAIR_SEPARATOR","BAGGAGE_PROPERTIES_SEPARATOR","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_HEADER","BAGGAGE_MAX_NAME_VALUE_PAIRS","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","BAGGAGE_MAX_TOTAL_LENGTH","serializeKeyPairs","keyPairs","reduce","hValue","getKeyPairs","baggage","encodeURIComponent","metadata","parsePairKeyValue","valueProps","split","keyPairPart","shift","separatorIndex","indexOf","decodeURIComponent","substring","trim","join","parseKeyPairsIntoRecord","filter","keyPair","headers","delegateHandler","ex","JSON","stringify","result","getOwnPropertyNames","forEach","propertyName","String","getPrototypeOf","flattenException","stringifyException","globalErrorHandler","getEnv","globalEnv","parseEnvironment","_globalThis","DEFAULT_ENVIRONMENT","globalThis","self","window","global","VALID_KEY_CHAR_RANGE","VALID_KEY_REGEX","RegExp","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","TraceState","rawTraceState","_internalState","_parse","traceState","_clone","has","unset","serialize","_keys","agg","push","reverse","part","listMember","i","slice","test","validateKey","validateValue","size","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","TRACE_PARENT_REGEX","W3CTraceContextPropagator","inject","carrier","setter","spanContext","trace","isTracingSuppressed","isSpanContextValid","traceParent","VERSION","traceId","spanId","Number","traceFlags","TraceFlags","extract","getter","traceParentHeader","isArray","match","exec","parseInt","parseTraceParent","isRemote","traceStateHeader","state","fields","SUPPRESS_TRACING_KEY","createContextKey","suppressTracing","setValue","getValue","Deferred","_promise","Promise","resolve","reject","_resolve","_reject","val","err","BindOnceFuture","_callback","_that","_isCalled","_deferred","promise","__spreadArray","then","DEFAULT_LIST_SEPARATOR","ENVIRONMENT_BOOLEAN_KEYS","isEnvVarABoolean","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","DEFAULT_ATTRIBUTE_COUNT_LIMIT","OTEL_SDK_DISABLED","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_BLRP_EXPORT_TIMEOUT","OTEL_BLRP_MAX_EXPORT_BATCH_SIZE","OTEL_BLRP_MAX_QUEUE_SIZE","OTEL_BLRP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_AGENT_PORT","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_LOGS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_OTLP_LOGS_HEADERS","OTEL_EXPORTER_OTLP_TIMEOUT","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_METRICS_TIMEOUT","OTEL_EXPORTER_OTLP_LOGS_TIMEOUT","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","DiagLogLevel","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","TracesSamplerValues","OTEL_TRACES_SAMPLER_ARG","OTEL_LOGS_EXPORTER","OTEL_EXPORTER_OTLP_INSECURE","OTEL_EXPORTER_OTLP_TRACES_INSECURE","OTEL_EXPORTER_OTLP_METRICS_INSECURE","OTEL_EXPORTER_OTLP_LOGS_INSECURE","OTEL_EXPORTER_OTLP_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE","OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE","OTEL_EXPORTER_OTLP_COMPRESSION","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_METRICS_COMPRESSION","OTEL_EXPORTER_OTLP_LOGS_COMPRESSION","OTEL_EXPORTER_OTLP_CLIENT_KEY","OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY","OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY","OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY","OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_PROTOCOL","OTEL_EXPORTER_OTLP_TRACES_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_PROTOCOL","OTEL_EXPORTER_OTLP_LOGS_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","parseBoolean","environment","values","toLowerCase","parseNumber","min","max","isNaN","parseStringList","output","input","separator","givenValue","v","logLevelMap","ALL","VERBOSE","DEBUG","INFO","WARN","ERROR","NONE","setLogLevelFromEnv","theLevel","toUpperCase","env","getEnvWithoutDefaults","process","ServiceClientType","DEFAULT_TRACE_TIMEOUT","configureExporterTimeout","timeoutMillis","invalidTimeout","definedTimeout","getExporterTimeoutFromEnv","timeout","defaultTimeout","OTLPExporterError","_super","message","code","data","__extends","Error","sendWithXhr","body","url","exporterTimeout","onSuccess","onError","retryTimer","xhr","reqIsDestroyed","exporterTimer","setTimeout","clearTimeout","readyState","XMLHttpRequest","DONE","abort","sendWithRetry","retries","minDelay","open","__assign","Accept","k","setRequestHeader","send","onreadystatechange","status","statusCode","includes","retryTime","getResponseHeader","retryAfter","seconds","isInteger","delay","Date","getTime","now","parseRetryAfterToMills","round","onabort","onerror","OTLPExporterBase","config","_sendingPromises","getDefaultUrl","hostname","shutdown","_shutdownOnce","_shutdown","_concurrencyLimit","concurrencyLimit","onInit","export","items","resultCallback","isCalled","_export","catch","e","forceFlush","all","onShutdown","OTLPExporterBrowserBase","_useXHR","navigator","sendBeacon","_headers","partialHeaders","parseHeaders","baggageUtils","serviceRequest","convert","blobPropertyBag","Blob","sendWithBeacon","type","popPromise","index","splice","OTLPProtoExporterBrowserBase","objects","clientType","exportRequestType","getServiceClientType","SPANS","root","opentelemetry","proto","collector","v1","LOGS","logs","metrics","create","encode","finish","OTLPExporterBaseMain","toAttributes","attributes","toKeyValue","toAnyValue","t","stringValue","intValue","doubleValue","boolValue","Uint8Array","bytesValue","arrayValue","kvlistValue","UnsignedLong","low","high","fromU32","multiply","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","add","fromString","power","pow","NANOSECONDS","hrTimeToFixed64Nanos","hrTime","hexToBase64","hexStr","hexStrLen","hexAsciiCharsStr","hexPair","hexVal","fromCharCode","btoa","sdkSpanToOtlpSpan","span","useHex","ctx","parentSpanId","core","kind","startTimeUnixNano","startTime","endTimeUnixNano","endTime","droppedAttributesCount","toOtlpSpanEvent","droppedEventsCount","links","link","toOtlpLink","droppedLinksCount","timedEvent","timeUnixNano","time","spanRecordsToResourceSpans","readableSpans","resourceMap","readableSpans_1","readableSpans_1_1","record","ilmMap","resource","instrumentationLibraryKey","instrumentationLibrary","version","schemaUrl","records","createResourceMap","out","entryIterator","scopeResourceSpans","ilmIterator","ilmEntry","scopeSpans","name_1","spans","readableSpan","scope","transformedSpans","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","OTLPTraceExporter","resourceSpans","createExportTraceServiceRequest","parsedUrl","URL","pathname","appendRootPathToUrlIfNeeded","path","endsWith","NoopMeter","createHistogram","_name","_options","NOOP_HISTOGRAM_METRIC","createCounter","NOOP_COUNTER_METRIC","createUpDownCounter","NOOP_UP_DOWN_COUNTER_METRIC","createObservableGauge","NOOP_OBSERVABLE_GAUGE_METRIC","createObservableCounter","NOOP_OBSERVABLE_COUNTER_METRIC","createObservableUpDownCounter","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","addBatchObservableCallback","_observables","removeBatchObservableCallback","NoopMetric","NoopCounterMetric","_value","_attributes","NoopUpDownCounterMetric","NoopHistogramMetric","NoopObservableMetric","addCallback","removeCallback","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","NOOP_METER","NOOP_METER_PROVIDER","NoopMeterProvider","getMeter","_version","API_NAME","MetricsAPI","getInstance","_instance","setGlobalMeterProvider","provider","registerGlobal","getMeterProvider","getGlobal","options","unregisterGlobal","parseInstrumentationOptions","instrumentations","j","option","results","concat","instrumentationName","registerInstrumentations","tracerProvider","meterProvider","instrumentation","setTracerProvider","setMeterProvider","getConfig","enabled","enableInstrumentations","disableInstrumentations","$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","common","AnyValue","$oneOfFields","oneOfGetter","oneOfSetter","writer","hasOwnProperty","uint32","string","bool","int64","double","ArrayValue","ldelim","KeyValueList","bytes","encodeDelimited","decode","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","object","Boolean","Long","fromValue","unsigned","LongBits","toNumber","TypeError","base64","newBuffer","toObject","oneofs","longs","json","isFinite","toJSON","constructor","toJSONOptions","getTypeUrl","typeUrlPrefix","emptyArray","arrays","defaults","KeyValue","InstrumentationScope","Resource","TracesData","ResourceSpans","ScopeSpans","Span","int32","fixed64","Event","Link","Status","enums","long","SpanKind","valuesById","StatusCode","TraceService","rpcImpl","requestDelimited","responseDelimited","rpc","Service","export_","request","callback","rpcCall","ExportTraceServiceRequest","ExportTraceServiceResponse","partialSuccess","ExportTracePartialSuccess","rejectedSpans","errorMessage","MetricsService","ExportMetricsServiceRequest","ExportMetricsServiceResponse","resourceMetrics","ResourceMetrics","ExportMetricsPartialSuccess","rejectedDataPoints","LogsService","ExportLogsServiceRequest","ExportLogsServiceResponse","resourceLogs","ResourceLogs","ExportLogsPartialSuccess","rejectedLogRecords","MetricsData","scopeMetrics","ScopeMetrics","Metric","description","unit","gauge","sum","histogram","exponentialHistogram","summary","Gauge","Sum","Histogram","ExponentialHistogram","Summary","dataPoints","NumberDataPoint","aggregationTemporality","isMonotonic","AggregationTemporality","HistogramDataPoint","ExponentialHistogramDataPoint","SummaryDataPoint","DataPointFlags","exemplars","asDouble","asInt","flags","Exemplar","sfixed64","bucketCounts","explicitBounds","count","end2","_sum","_min","_max","scale","zeroCount","positive","negative","zeroThreshold","sint32","Buckets","offset","uint64","quantileValues","ValueAtQuantile","quantile","filteredAttributes","LogsData","scopeLogs","ScopeLogs","logRecords","LogRecord","SeverityNumber","LogRecordFlags","observedTimeUnixNano","severityNumber","severityText","fixed32","module","exports","SDK_INFO","SemanticResourceAttributes","TelemetrySdkLanguageValues","asyncAttributesPromise","asyncAttributesPending","_syncAttributes","_asyncAttributesPromise","asyncAttributes","empty","EMPTY","default","waitForAsyncAttributes","sent","merge","other","mergedSyncAttributes","mergedAttributesPromise","_c","thisAsyncAttributes","otherAsyncAttributes","BatchSpanProcessorBase","_exporter","_isExporting","_finishedSpans","_droppedSpansCount","_maxExportBatchSize","maxExportBatchSize","_maxQueueSize","maxQueueSize","_scheduledDelayMillis","scheduledDelayMillis","_exportTimeoutMillis","exportTimeoutMillis","_flushAll","onStart","_span","_parentContext","onEnd","_addToBuffer","_maybeStartTimer","promises","ceil","_flushOneBatch","_clearTimer","timer","doExport","pendingResources","flush","_timer","BatchSpanProcessor","disableAutoFlushOnDocumentHide","document","_visibilityChangeListener","visibilityState","_pageHideListener","NoopTextMapPropagator","_context","_carrier","defaultTextMapGetter","defaultTextMapSetter","BAGGAGE_KEY","getBaggage","getActiveBaggage","ContextAPI","setBaggage","deleteBaggage","deleteValue","func","transform","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","setGlobalPropagator","propagator","_getGlobalPropagator","propagation","objectTag","nullTag","undefinedTag","funcToString","Function","objectCtorString","getPrototype","arg","objectProto","symToStringTag","toStringTag","nativeObjectToString","isPlainObject","isObjectLike","isOwn","unmasked","getRawTag","objectToString","baseGetTag","Ctor","MAX_LEVEL","takeValue","mergeTwoObjects","one","two","level","isPrimitive","isFunction","isObject","shouldMerge","twoValue","obj1","obj2","wasObjectReferenced","arr1","arr2","arr","info","SamplingDecision","CompositePropagator","_propagators","propagators","_fields","Set","p","x","y","W3CBaggagePropagator","pair","headerValue","baggageString","baggageEntry","SpanStatusCode","sanitizeAttributes","_d","isAttributeKey","isAttributeValue","arr_1","arr_1_1","element","isValidPrimitiveAttributeValue","isHomogeneousAttributeValueArray","otperformance","performance","MILLISECONDS_TO_NANOSECONDS","SECOND_TO_NANOSECONDS","millisToHrTime","epochMillis","epochSeconds","trunc","getTimeOrigin","timeOrigin","perf","timing","fetchStart","performanceNow","addHrTimes","isTimeInputHrTime","isTimeInput","time1","time2","SemanticAttributes","parentTracer","spanName","_deprecatedClock","_droppedAttributesCount","_droppedEventsCount","_droppedLinksCount","UNSET","_ended","_duration","_spanContext","_performanceStartTime","_performanceOffset","_startTimeProvided","_getTime","_spanLimits","getSpanLimits","_spanProcessor","getActiveSpanProcessor","_attributeValueLengthLimit","attributeValueLengthLimit","setAttribute","_isSpanEnded","attributeCountLimit","_truncateToSize","setAttributes","addEvent","attributesOrStartTime","timeStamp","eventCountLimit","setStatus","updateName","nanos","hrTimeDuration","inp","msDuration","isRecording","recordException","exception","stack","_truncateToLimitUtil","limit","substr","AlwaysOffSampler","shouldSample","decision","AlwaysOnSampler","ParentBasedSampler","_root","_remoteParentSampled","remoteParentSampled","_remoteParentNotSampled","remoteParentNotSampled","_localParentSampled","localParentSampled","_localParentNotSampled","localParentNotSampled","spanKind","parentContext","TraceIdRatioBasedSampler","_ratio","_normalize","_upperBound","floor","isValidTraceId","_accumulate","ratio","accumulation","FALLBACK_OTEL_TRACES_SAMPLER","DEFAULT_RATIO","loadDefaultConfig","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","spanLimits","linkCountLimit","attributePerEventCountLimit","attributePerLinkCountLimit","getSamplerProbabilityFromEnv","probability","RandomIdGenerator","generateTraceId","getIdGenerator","generateSpanId","SHARED_CHAR_CODES_ARRAY","ForceFlushState","Tracer","_tracerProvider","localConfig","userConfig","perInstanceDefaults","DEFAULT_CONFIG","mergeConfig","_sampler","_generalLimits","_idGenerator","idGenerator","startSpan","api","parentSpan","parentSpanContext","samplingResult","initAttributes","startActiveSpan","arg2","arg3","arg4","contextWithSpanSet","getGeneralLimits","MultiSpanProcessor","_spanProcessors","spanProcessor","NoopSpanProcessor","BasicTracerProvider","_registeredSpanProcessors","_tracers","mergedConfig","parsedEnvConfig","_f","_e","_m","_l","_k","_h","_g","_j","reconfigureLimits","_config","defaultExporter","_buildExporterFromEnv","batchProcessor","activeSpanProcessor","getTracer","addSpanProcessor","register","_buildPropagatorFromEnv","timeoutInterval","resolved","errors","_getPropagator","_registeredPropagators","_getSpanExporter","_registeredExporters","uniquePropagatorNames","validPropagators","list","item","exporterName","exporter","StackContextManager","_currentContext","previousContext","WebTracerProvider","CLOUD_PROVIDER","CLOUD_ACCOUNT_ID","CLOUD_REGION","CLOUD_AVAILABILITY_ZONE","CLOUD_PLATFORM","AWS_ECS_CONTAINER_ARN","AWS_ECS_CLUSTER_ARN","AWS_ECS_LAUNCHTYPE","AWS_ECS_TASK_ARN","AWS_ECS_TASK_FAMILY","AWS_ECS_TASK_REVISION","AWS_EKS_CLUSTER_ARN","AWS_LOG_GROUP_NAMES","AWS_LOG_GROUP_ARNS","AWS_LOG_STREAM_NAMES","AWS_LOG_STREAM_ARNS","CONTAINER_ID","CONTAINER_RUNTIME","CONTAINER_IMAGE_NAME","CONTAINER_IMAGE_TAG","DEPLOYMENT_ENVIRONMENT","DEVICE_ID","DEVICE_MODEL_IDENTIFIER","DEVICE_MODEL_NAME","FAAS_NAME","FAAS_ID","FAAS_VERSION","FAAS_INSTANCE","FAAS_MAX_MEMORY","HOST_ID","HOST_NAME","HOST_TYPE","HOST_ARCH","HOST_IMAGE_NAME","HOST_IMAGE_ID","HOST_IMAGE_VERSION","K8S_CLUSTER_NAME","K8S_NODE_NAME","K8S_NODE_UID","K8S_NAMESPACE_NAME","K8S_POD_UID","K8S_POD_NAME","K8S_CONTAINER_NAME","K8S_REPLICASET_UID","K8S_REPLICASET_NAME","K8S_DEPLOYMENT_UID","K8S_DEPLOYMENT_NAME","K8S_STATEFULSET_UID","K8S_STATEFULSET_NAME","K8S_DAEMONSET_UID","K8S_DAEMONSET_NAME","K8S_JOB_UID","K8S_JOB_NAME","K8S_CRONJOB_UID","K8S_CRONJOB_NAME","OS_TYPE","OS_DESCRIPTION","OS_NAME","OS_VERSION","PROCESS_PID","PROCESS_EXECUTABLE_NAME","PROCESS_EXECUTABLE_PATH","PROCESS_COMMAND","PROCESS_COMMAND_LINE","PROCESS_COMMAND_ARGS","PROCESS_OWNER","PROCESS_RUNTIME_NAME","PROCESS_RUNTIME_VERSION","PROCESS_RUNTIME_DESCRIPTION","SERVICE_NAME","SERVICE_NAMESPACE","SERVICE_INSTANCE_ID","SERVICE_VERSION","TELEMETRY_SDK_NAME","TELEMETRY_SDK_LANGUAGE","TELEMETRY_SDK_VERSION","TELEMETRY_AUTO_VERSION","WEBENGINE_NAME","WEBENGINE_VERSION","WEBENGINE_DESCRIPTION","CPP","DOTNET","ERLANG","GO","JAVA","NODEJS","PHP","PYTHON","RUBY","WEBJS","params","pending","n","charAt","b64","s64","buffer","start","parts","chunk","b","invalidEncoding","c","charCodeAt","EventEmitter","_listeners","on","evt","off","emit","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","buf","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","exponent","log","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","replace","alloc","SIZE","MAX","slab","utf8","read","write","c1","c2","protobuf","configure","_configure","BufferWriter","BufferReader","build","indexOutOfRange","writeLength","RangeError","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","sfixed32","float","nativeBuffer","skip","wireType","BufferReader_","sint64","zzDecode","utf8Slice","method","requestCtor","responseCtor","asPromise","response","endedByRPC","zero","zzEncode","zeroHash","fromNumber","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","versions","node","freeze","emptyObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","_createForOfIteratorHelper","_classCallCheck","_createClass","mark","performanceMeasure","label","symbolPrefix","__symbol__","checkDuplicate","parent","zoneSpec","_parent","_properties","_zoneDelegate","_ZoneDelegate","zone","getZoneWith","source","intercept","runGuarded","applyThis","applyArgs","_currentZoneFrame","invoke","handleError","task","NO_ZONE","notScheduled","eventTask","macroTask","reEntryGuard","running","_transitionTo","scheduled","runCount","previousTask","_currentTask","isPeriodic","cancelFn","invokeTask","unknown","_updateTaskCount","newZone","scheduling","zoneDelegates","_zoneDelegates","_zone","scheduleTask","customSchedule","ZoneTask","microTask","customCancel","canceling","cancelTask","patches","ignoreDuplicate","perfName","_api","nativeMicroTaskQueuePromise","DELEGATE_ZS","onHasTask","delegate","_","hasTaskState","hasTask","onScheduleTask","onInvokeTask","onCancelTask","parentDelegate","_taskCounts","_parentDelegate","_forkZS","onFork","_forkDlgt","_forkCurrZone","_interceptZS","onIntercept","_interceptDlgt","_interceptCurrZone","_invokeZS","onInvoke","_invokeDlgt","_invokeCurrZone","_handleErrorZS","onHandleError","_handleErrorDlgt","_handleErrorCurrZone","_scheduleTaskZS","_scheduleTaskDlgt","_scheduleTaskCurrZone","_invokeTaskZS","_invokeTaskDlgt","_invokeTaskCurrZone","_cancelTaskZS","_cancelTaskDlgt","_cancelTaskCurrZone","_hasTaskZS","_hasTaskDlgt","_hasTaskDlgtOwner","_hasTaskCurrZone","zoneSpecHasTask","parentHasTask","targetZone","returnTask","scheduleFn","scheduleMicroTask","isEmpty","counts","prev","change","_state","useG","toState","fromState1","fromState2","handleId","_numberOfNestedTaskFrames","runTask","drainMicroTaskQueue","symbolSetTimeout","symbolPromise","symbolThen","_microTaskQueue","_isDrainingMicrotaskQueue","nativeScheduleMicroTask","nativeThen","queue","onUnhandledError","microtaskDrainDone","symbol","currentZoneFrame","showUncaughtError","patchEventTarget","patchOnProperties","patchMethod","bindArguments","patchThen","patchMacroTask","patchEventPrototype","isIEOrEdge","getGlobalObjects","ObjectDefineProperty","ObjectGetOwnPropertyDescriptor","ObjectCreate","ArraySlice","patchClass","wrapWithCurrentZone","filterProperties","attachOriginToPatched","_redefineProperty","patchCallbacks","getOwnPropertyDescriptor","ObjectGetPrototypeOf","ADD_EVENT_LISTENER_STR","REMOVE_EVENT_LISTENER_STR","ZONE_SYMBOL_ADD_EVENT_LISTENER","ZONE_SYMBOL_REMOVE_EVENT_LISTENER","TRUE_STR","FALSE_STR","ZONE_SYMBOL_PREFIX","wrap","scheduleMacroTaskWithCurrentZone","scheduleMacroTask","zoneSymbol","isWindowExists","internalWindow","_global","REMOVE_ATTRIBUTE","isPropertyWritable","propertyDesc","isWebWorker","WorkerGlobalScope","isBrowser","isMix","zoneSymbolEventNames$1","wrapFn","eventNameSymbol","errorEvent","filename","lineno","colno","preventDefault","patchProperty","desc","onPropPatchedSymbol","originalDescGet","originalDescSet","eventName","newValue","removeAttribute","onProperties","originalInstanceKey","className","OriginalClass","a","instance","patchFn","delegateName","patchDelegate","funcName","metaCreator","setNative","cbIdx","meta","patched","isDetectedIEOrEdge","ieOrEdge","ua","userAgent","__load_patch","_uncaughtPromiseErrors","isDisableWrappingUncaughtPromiseRejection","creationTrace","rejection","console","_loop2","uncaughtPromiseError","throwOriginal","handler","UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL","handleUnhandledRejection","isThenable","forwardResolution","forwardRejection","ZoneAwarePromise","symbolState","symbolValue","symbolFinally","symbolParentPromiseValue","symbolParentPromiseState","UNRESOLVED","RESOLVED","REJECTED","REJECTED_NO_CATCH","makeResolver","resolvePromise","once","wasCalled","wrappedFunction","TYPE_ERROR","CURRENT_TASK_TRACE_SYMBOL","onceWrapper","clearRejectedNoCatch","currentTask","scheduleResolveOrReject","readableObjectToString","REJECTION_HANDLED_HANDLER","chainPromise","onFulfilled","onRejected","promiseState","parentPromiseValue","isFinallyPromise","AggregateError","executor","species","C","onFinally","iterator","_step","_iterator","s","f","finished","res","rej","onResolve","onReject","_step2","_iterator2","allWithCallback","thenCallback","errorCallback","reason","_step3","unresolvedCount","valueIndex","resolvedValues","_iterator3","_loop3","curValueIndex","thenErr","race","NativePromise","symbolThenPatched","originalThen","_this2","resultPromise","ctor","originalFunctionToString","ORIGINAL_DELEGATE_SYMBOL","PROMISE_SYMBOL","ERROR_SYMBOL","newFunctionToString","originalDelegate","nativePromise","nativeError","originalObjectToString","passiveSupported","OPTIMIZED_ZONE_EVENT_TASK_DATA","zoneSymbolEventNames","globalSources","EVENT_NAME_SYMBOL_REGX","IMMEDIATE_PROPAGATION_SYMBOL","prepareEventNames","eventNameToString","falseEventName","trueEventName","symbolCapture","apis","patchOptions","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","rm","LISTENERS_EVENT_LISTENER","REMOVE_ALL_LISTENERS_EVENT_LISTENER","rmAll","zoneSymbolAddEventListener","ADD_EVENT_LISTENER_SOURCE","PREPEND_EVENT_LISTENER","PREPEND_EVENT_LISTENER_SOURCE","isRemoved","handleEvent","globalCallback","isCapture","tasks","copyTasks","_loop4","globalZoneAwareCallback","globalZoneAwareCaptureCallback","patchEventTargetMethods","useGlobalCallback","validateHandler","vh","chkDup","returnTarget","rt","nativePrependEventListener","taskData","nativeAddEventListener","nativeRemoveEventListener","nativeListeners","nativeRemoveAllListeners","prepend","isExisting","capture","symbolEventName","symbolEventNames","existingTasks","allRemoved","compare","diff","typeOfDelegate","unpatchedEvents","passiveEvents","makeAddListener","nativeListener","addSource","customScheduleFn","customCancelFn","transferEventName","isHandleEvent","passive","buildEventListenerOptions","constructorName","targetSource","scheduleEventTask","unshift","existingTask","findEventTasks","symbolCaptureEventName","captureTasks","removeTasks","evtName","foundTasks","captureFalseTasks","captureTrueTasks","targetName","callbacks","nativeDelegate","descriptor","ignoreProperties","tip","ip","targetIgnoreProperties","op","patchFilteredProperties","getOnEventNames","startsWith","propertyDescriptorPatch","patchTargets","ignoreErrorProperties","isIE","eventNames","SYMBOL_BLACK_LISTED_EVENTS","SYMBOL_UNPATCHED_EVENTS","taskSymbol","patchTimer","setName","cancelName","nameSuffix","clearNative","tasksByHandleId","clearTask","handle","ref","unref","id","eventTargetPatch","_api$getGlobalObjects2","EVENT_TARGET","legacyPatch","blockingMethods","patchEvent","XMLHttpRequestEventTarget","_api$getGlobalObjects","customElements","patchCustomElements","XMLHttpRequestPrototype","oriAddListener","oriRemoveListener","XMLHttpRequestEventTargetPrototype","READY_STATE_CHANGE","SCHEDULED","XHR_SCHEDULED","XHR_ERROR_BEFORE_SCHEDULED","XHR_LISTENER","newListener","aborted","loadTasks","oriInvoke","XHR_TASK","sendNative","placeholderCallback","abortNative","openNative","XHR_SYNC","XHR_URL","fetchTaskAborting","fetchTaskScheduling","patchXHR","geolocation","fnNames","_loop","patchPrototype","findPromiseRejectionHandler","PromiseRejectionEvent","Constructor","__esModule","toPropertyKey","_defineProperties","props","protoProps","staticProps","_typeof","hint","prim","toPrimitive"],"sourceRoot":""}