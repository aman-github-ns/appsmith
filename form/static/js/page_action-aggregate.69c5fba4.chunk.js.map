{"version":3,"file":"static/js/page_action-aggregate.69c5fba4.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/page_action/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry,\n        opts\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../../../common/util/map-own';\nimport { stringify } from '../../../common/util/stringify';\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { cleanURL } from '../../../common/url/clean-url';\nimport { getConfigurationValue, getInfo, getRuntime } from '../../../common/config/config';\nimport { FEATURE_NAME } from '../constants';\nimport { isBrowserScope } from '../../../common/constants/runtime';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { deregisterDrain } from '../../../common/drain/drain';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    var _this;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    _this = this;\n    this.eventsPerMinute = 240;\n    this.harvestTimeSeconds = getConfigurationValue(this.agentIdentifier, 'page_action.harvestTimeSeconds') || getConfigurationValue(this.agentIdentifier, 'ins.harvestTimeSeconds') || 30;\n    this.eventsPerHarvest = this.eventsPerMinute * this.harvestTimeSeconds / 60;\n    this.referrerUrl = undefined;\n    this.currentEvents = undefined;\n    this.events = [];\n    this.att = getInfo(this.agentIdentifier).jsAttributes; // per-agent, aggregators-shared info context\n\n    if (isBrowserScope && document.referrer) this.referrerUrl = cleanURL(document.referrer);\n    register('api-addPageAction', function () {\n      return _this.addPageAction(...arguments);\n    }, this.featureName, this.ee);\n    this.waitForFlags(['ins']).then(_ref => {\n      let [insFlag] = _ref;\n      if (insFlag) {\n        const scheduler = new HarvestScheduler('ins', {\n          onFinished: function () {\n            return _this.onHarvestFinished(...arguments);\n          }\n        }, this);\n        scheduler.harvest.on('ins', function () {\n          return _this.onHarvestStarted(...arguments);\n        });\n        scheduler.startTimer(this.harvestTimeSeconds, 0);\n        this.drain();\n      } else {\n        this.blocked = true; // if rum response determines that customer lacks entitlements for ins endpoint, this feature shouldn't harvest\n        deregisterDrain(this.agentIdentifier, this.featureName);\n      }\n    });\n  }\n  onHarvestStarted(options) {\n    const {\n      userAttributes,\n      atts\n    } = getInfo(this.agentIdentifier);\n    var payload = {\n      qs: {\n        ua: userAttributes,\n        at: atts\n      },\n      body: {\n        ins: this.events\n      }\n    };\n    if (options.retry) {\n      this.currentEvents = this.events;\n    }\n    this.events = [];\n    return payload;\n  }\n  onHarvestFinished(result) {\n    if (result && result.sent && result.retry && this.currentEvents) {\n      this.events = this.events.concat(this.currentEvents);\n      this.currentEvents = null;\n    }\n  }\n\n  // WARNING: Insights times are in seconds. EXCEPT timestamp, which is in ms.\n  addPageAction(t, name, attributes) {\n    if (this.events.length >= this.eventsPerHarvest || this.blocked) return;\n    var width;\n    var height;\n    var eventAttributes = {};\n    if (isBrowserScope && window.document.documentElement) {\n      // Doesn't include the nav bar when it disappears in mobile safari\n      // https://github.com/jquery/jquery/blob/10399ddcf8a239acc27bdec9231b996b178224d3/src/dimensions.js#L23\n      width = window.document.documentElement.clientWidth;\n      height = window.document.documentElement.clientHeight;\n    }\n    const agentRuntime = getRuntime(this.agentIdentifier);\n    var defaults = {\n      timestamp: agentRuntime.timeKeeper.convertRelativeTimestamp(t),\n      timeSinceLoad: t / 1000,\n      browserWidth: width,\n      browserHeight: height,\n      referrerUrl: this.referrerUrl,\n      currentUrl: cleanURL('' + location),\n      pageUrl: cleanURL(agentRuntime.origin),\n      eventType: 'PageAction'\n    };\n    mapOwn(defaults, set);\n    mapOwn(getInfo(this.agentIdentifier).jsAttributes, set);\n    if (attributes && typeof attributes === 'object') {\n      mapOwn(attributes, set);\n    }\n    eventAttributes.actionName = name || '';\n    this.events.push(eventAttributes);\n    function set(key, val) {\n      eventAttributes[key] = val && typeof val === 'object' ? stringify(val) : val;\n    }\n  }\n}"],"names":["HarvestScheduler","_SharedContext","endpoint","opts","parent","_this$sharedContext","_this","_classCallCheck","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","_assertThisInitialized","ee","on","SESSION_EVENTS","runHarvest","forceNoRetry","_inherits","_createClass","key","value","this","onUnload","interval","initialDelay","scheduleHarvest","permanently","arguments","length","undefined","clearTimeout","delay","_this2","setTimeout","_this3","submitMethod","payload","cbRanAfterSend","result","retry","onHarvestFinished","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","push","apply","_toConsumableArray","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","SharedContext","isWorkerScope","globalScope","origClose","_step","_iterator","_createForOfIteratorHelper","s","n","done","task","err","e","f","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","Aggregate","_AggregateBase","agentIdentifier","aggregator","FEATURE_NAME","eventsPerMinute","harvestTimeSeconds","getConfigurationValue","eventsPerHarvest","referrerUrl","currentEvents","events","att","getInfo","jsAttributes","document","referrer","cleanURL","register","addPageAction","featureName","waitForFlags","then","_ref","_slicedToArray","scheduler","_this4","_this5","onHarvestStarted","startTimer","drain","blocked","deregisterDrain","options","_getInfo","qs","ua","userAttributes","at","atts","body","ins","concat","t","name","attributes","width","height","eventAttributes","window","documentElement","clientWidth","clientHeight","agentRuntime","getRuntime","defaults","timestamp","timeKeeper","convertRelativeTimestamp","timeSinceLoad","browserWidth","browserHeight","currentUrl","location","pageUrl","origin","eventType","mapOwn","set","actionName","val","stringify","AggregateBase","_defineProperty"],"sourceRoot":""}