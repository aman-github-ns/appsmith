{"version":3,"file":"static/js/TernWorker.ca185302.chunk.js","mappings":"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","sources":["../packages/ast/src/constants/ast.ts","../packages/ast/src/index.ts","../packages/ast/src/jsObject/index.ts","../packages/ast/src/utils.ts","ce/constants/messages.ts","ce/workers/Evaluation/getEntityForEvalContextMap.ts","workers/Evaluation/getEntityForContext.ts","ce/workers/Evaluation/Actions.ts","components/editorComponents/ActionCreator/constants.ts","ce/entities/DataTree/utils.ts","ce/workers/Evaluation/evaluationUtils.ts","workers/Evaluation/fns/index.ts","utils/DynamicBindingUtils.ts","workers/Evaluation/JSObject/index.ts","workers/Evaluation/evaluate.ts","workers/Evaluation/setters.ts","utils/autocomplete/types.ts","workers/Tern/tern.worker.ts","utils/autocomplete/AutocompleteDataType.ts","ce/utils/autocomplete/EntityDefinitions.ts","workers/common/DependencyMap/utils.ts","workers/common/JSLibrary/index.ts","../webpack/bootstrap","../webpack/runtime/amd options","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/harmony module decorator","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/runtimeId","../webpack/runtime/publicPath","../webpack/runtime/compat","../webpack/runtime/importScripts chunk loading","../webpack/runtime/nonce","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export const ECMA_VERSION = 11;\n\n/* Indicates the mode the code should be parsed in. \nThis influences global strict mode and parsing of import and export declarations.\n*/\nexport enum SourceType {\n  script = \"script\",\n  module = \"module\",\n}\n\n// Each node has an attached type property which further defines\n// what all properties can the node have.\n// We will just define the ones we are working with\nexport enum NodeTypes {\n  Identifier = \"Identifier\",\n  AssignmentPattern = \"AssignmentPattern\",\n  Literal = \"Literal\",\n  Property = \"Property\",\n  // Declaration - https://github.com/estree/estree/blob/master/es5.md#declarations\n  FunctionDeclaration = \"FunctionDeclaration\",\n  ExportDefaultDeclaration = \"ExportDefaultDeclaration\",\n  VariableDeclarator = \"VariableDeclarator\",\n  // Expression - https://github.com/estree/estree/blob/master/es5.md#expressions\n  MemberExpression = \"MemberExpression\",\n  FunctionExpression = \"FunctionExpression\",\n  ArrowFunctionExpression = \"ArrowFunctionExpression\",\n  AssignmentExpression = \"AssignmentExpression\",\n  ObjectExpression = \"ObjectExpression\",\n  ArrayExpression = \"ArrayExpression\",\n  ThisExpression = \"ThisExpression\",\n  CallExpression = \"CallExpression\",\n  BinaryExpression = \"BinaryExpression\",\n  ExpressionStatement = \"ExpressionStatement\",\n  BlockStatement = \"BlockStatement\",\n  ConditionalExpression = \"ConditionalExpression\",\n  AwaitExpression = \"AwaitExpression\",\n}\n","import type { Node, SourceLocation, Options, Comment } from \"acorn\";\nimport { parse } from \"acorn\";\nimport { ancestor, simple } from \"acorn-walk\";\nimport { ECMA_VERSION, NodeTypes } from \"./constants\";\nimport { has, isFinite, isNil, isString, toPath } from \"lodash\";\nimport { getStringValue, isTrueObject, sanitizeScript } from \"./utils\";\nimport { jsObjectDeclaration } from \"./jsObject\";\nimport { attachComments } from \"astravel\";\nimport { generate } from \"astring\";\n/*\n * Valuable links:\n *\n * * ESTree spec: Javascript AST is called ESTree.\n * Each es version has its md file in the repo to find features\n * implemented and their node type\n * https://github.com/estree/estree\n *\n * * Acorn: The parser we use to get the AST\n * https://github.com/acornjs/acorn\n *\n * * Acorn walk: The walker we use to traverse the AST\n * https://github.com/acornjs/acorn/tree/master/acorn-walk\n *\n * * AST Explorer: Helpful web tool to see ASTs and its parts\n * https://astexplorer.net/\n *\n */\n\ntype Pattern = IdentifierNode | AssignmentPatternNode;\ntype Expression = Node;\nexport type ArgumentTypes =\n  | LiteralNode\n  | ArrowFunctionExpressionNode\n  | ObjectExpression\n  | MemberExpressionNode\n  | CallExpressionNode\n  | BinaryExpressionNode\n  | BlockStatementNode\n  | IdentifierNode;\n// doc: https://github.com/estree/estree/blob/master/es5.md#memberexpression\nexport interface MemberExpressionNode extends Node {\n  type: NodeTypes.MemberExpression;\n  object: MemberExpressionNode | IdentifierNode | CallExpressionNode;\n  property: IdentifierNode | LiteralNode;\n  computed: boolean;\n  // doc: https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n  optional?: boolean;\n}\n\nexport interface BinaryExpressionNode extends Node {\n  type: NodeTypes.BinaryExpression;\n  left: BinaryExpressionNode | IdentifierNode;\n  right: BinaryExpressionNode | IdentifierNode;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#identifier\nexport interface IdentifierNode extends Node {\n  type: NodeTypes.Identifier;\n  name: string;\n}\n\n//Using this to handle the Variable property refactor\ninterface RefactorIdentifierNode extends Node {\n  type: NodeTypes.Identifier;\n  name: string;\n  property?: IdentifierNode;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#variabledeclarator\ninterface VariableDeclaratorNode extends Node {\n  type: NodeTypes.VariableDeclarator;\n  id: IdentifierNode;\n  init: Expression | null;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#functions\ninterface Function extends Node {\n  id: IdentifierNode | null;\n  params: Pattern[];\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#functiondeclaration\ninterface FunctionDeclarationNode extends Node, Function {\n  type: NodeTypes.FunctionDeclaration;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#functionexpression\ninterface FunctionExpressionNode extends Expression, Function {\n  type: NodeTypes.FunctionExpression;\n  async: boolean;\n}\n\nexport interface ArrowFunctionExpressionNode extends Expression, Function {\n  type: NodeTypes.ArrowFunctionExpression;\n  async: boolean;\n}\n\nexport interface ObjectExpression extends Expression {\n  type: NodeTypes.ObjectExpression;\n  properties: Array<PropertyNode>;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es2015.md#assignmentpattern\ninterface AssignmentPatternNode extends Node {\n  type: NodeTypes.AssignmentPattern;\n  left: Pattern;\n}\n\n// doc: https://github.com/estree/estree/blob/master/es5.md#literal\nexport interface LiteralNode extends Node {\n  type: NodeTypes.Literal;\n  value: string | boolean | null | number | RegExp;\n  raw: string;\n}\n\nexport interface CallExpressionNode extends Node {\n  type: NodeTypes.CallExpression;\n  callee: CallExpressionNode | IdentifierNode | MemberExpressionNode;\n  arguments: ArgumentTypes[];\n}\n\n// https://github.com/estree/estree/blob/master/es5.md#thisexpression\nexport interface ThisExpressionNode extends Expression {\n  type: \"ThisExpression\";\n}\n\n// https://github.com/estree/estree/blob/master/es5.md#conditionalexpression\nexport interface ConditionalExpressionNode extends Expression {\n  type: \"ConditionalExpression\";\n  test: Expression;\n  alternate: Expression;\n  consequent: Expression;\n}\n\n// https://github.com/estree/estree/blob/master/es2017.md#awaitexpression\nexport interface AwaitExpressionNode extends Expression {\n  type: \"AwaitExpression\";\n  argument: Expression;\n}\n\nexport interface BlockStatementNode extends Node {\n  type: \"BlockStatement\";\n  body: [Node];\n}\n\ninterface NodeList {\n  references: Set<string>;\n  functionalParams: Set<string>;\n  variableDeclarations: Set<string>;\n  identifierList: Array<IdentifierNode>;\n}\n\n// https://github.com/estree/estree/blob/master/es5.md#property\nexport interface PropertyNode extends Node {\n  type: NodeTypes.Property;\n  key: LiteralNode | IdentifierNode;\n  value: Node;\n  kind: \"init\" | \"get\" | \"set\";\n}\n\nexport interface ExpressionStatement extends Node {\n  type: \"ExpressionStatement\";\n  expression: Expression;\n}\n\nexport interface Program extends Node {\n  type: \"Program\";\n  body: [Directive | Statement];\n}\n\nexport type Statement = Node;\n\nexport interface Directive extends ExpressionStatement {\n  expression: LiteralNode;\n  directive: string;\n}\n\nexport interface ExportDefaultDeclarationNode extends Node {\n  declaration: Node;\n}\n\n// Node with location details\nexport type NodeWithLocation<NodeType> = NodeType & {\n  loc: SourceLocation;\n};\n\ntype AstOptions = Omit<Options, \"ecmaVersion\">;\n\ninterface EntityRefactorResponse {\n  isSuccess: boolean;\n  body: { script: string; refactorCount: number } | { error: string };\n}\n\n/* We need these functions to typescript casts the nodes with the correct types */\nexport const isIdentifierNode = (node: Node): node is IdentifierNode => {\n  return node.type === NodeTypes.Identifier;\n};\n\nexport const isMemberExpressionNode = (\n  node: Node,\n): node is MemberExpressionNode => {\n  return node.type === NodeTypes.MemberExpression;\n};\n\nexport const isThisExpressionNode = (\n  node: Node,\n): node is ThisExpressionNode => {\n  return node.type === NodeTypes.ThisExpression;\n};\n\nexport const isConditionalExpressionNode = (\n  node: Node,\n): node is ConditionalExpressionNode =>\n  node.type === NodeTypes.ConditionalExpression;\n\nexport const isAwaitExpressionNode = (\n  node: Node,\n): node is AwaitExpressionNode => node.type === NodeTypes.AwaitExpression;\n\nexport const isBinaryExpressionNode = (\n  node: Node,\n): node is BinaryExpressionNode => {\n  return node.type === NodeTypes.BinaryExpression;\n};\n\nexport const isVariableDeclarator = (\n  node: Node,\n): node is VariableDeclaratorNode => {\n  return node.type === NodeTypes.VariableDeclarator;\n};\n\nconst isFunctionDeclaration = (node: Node): node is FunctionDeclarationNode => {\n  return node.type === NodeTypes.FunctionDeclaration;\n};\n\nconst isFunctionExpression = (node: Node): node is FunctionExpressionNode => {\n  return node.type === NodeTypes.FunctionExpression;\n};\nexport const isArrowFunctionExpression = (\n  node: Node,\n): node is ArrowFunctionExpressionNode => {\n  return node.type === NodeTypes.ArrowFunctionExpression;\n};\n\nexport const isAssignmentExpression = (\n  node: Node,\n): node is AssignmentExpressionNode => {\n  return node.type === NodeTypes.AssignmentExpression;\n};\n\nexport const isObjectExpression = (node: Node): node is ObjectExpression => {\n  return node.type === NodeTypes.ObjectExpression;\n};\n\nconst isAssignmentPatternNode = (node: Node): node is AssignmentPatternNode => {\n  return node.type === NodeTypes.AssignmentPattern;\n};\n\nexport const isLiteralNode = (node: Node): node is LiteralNode => {\n  return node.type === NodeTypes.Literal;\n};\n\nexport const isPropertyNode = (node: Node): node is PropertyNode => {\n  return node.type === NodeTypes.Property;\n};\n\nexport const isCallExpressionNode = (\n  node: Node,\n): node is CallExpressionNode => {\n  return node.type === NodeTypes.CallExpression;\n};\n\nexport const isBlockStatementNode = (\n  node: Node,\n): node is BlockStatementNode => {\n  return node.type === NodeTypes.BlockStatement;\n};\n\nexport const isExpressionStatementNode = (\n  node: Node,\n): node is ExpressionStatement => {\n  return node.type === NodeTypes.ExpressionStatement;\n};\n\nexport const isExportDefaultDeclarationNode = (\n  node: Node,\n): node is ExportDefaultDeclarationNode => {\n  return node.type === NodeTypes.ExportDefaultDeclaration;\n};\n\nexport const isPropertyAFunctionNode = (\n  node: Node,\n): node is ArrowFunctionExpressionNode | FunctionExpressionNode => {\n  return (\n    node.type === NodeTypes.ArrowFunctionExpression ||\n    node.type === NodeTypes.FunctionExpression\n  );\n};\n\nconst isArrayAccessorNode = (node: Node): node is MemberExpressionNode => {\n  return (\n    isMemberExpressionNode(node) &&\n    node.computed &&\n    isLiteralNode(node.property) &&\n    isFinite(node.property.value)\n  );\n};\n\nexport const wrapCode = (code: string) => {\n  return `\n    (function() {\n      return ${code}\n    })\n  `;\n};\n\n//Tech-debt: should upgrade this to better logic\n//Used slice for a quick resolve of critical bug\nconst unwrapCode = (code: string) => {\n  const unwrapedCode = code.slice(32);\n  return unwrapedCode.slice(0, -10);\n};\n\nconst getFunctionalParamNamesFromNode = (\n  node:\n    | FunctionDeclarationNode\n    | FunctionExpressionNode\n    | ArrowFunctionExpressionNode,\n) => {\n  return Array.from(getFunctionalParamsFromNode(node)).map(\n    (functionalParam) => functionalParam.paramName,\n  );\n};\n\n// Memoize the ast generation code to improve performance.\n// Since this will be used by both the server and the client, we want to prevent regeneration of ast\n// for the the same code snippet\nexport const getAST = (code: string, options?: AstOptions) =>\n  parse(code, { ...options, ecmaVersion: ECMA_VERSION });\n\nexport const attachCommentsToAst = (\n  ast: Node,\n  commentArray: Array<Comment>,\n) => {\n  return attachComments(ast, commentArray);\n};\n/**\n * An AST based extractor that fetches all possible references in a given\n * piece of code. We use this to get any references to the global entities in Appsmith\n * and create dependencies on them. If the reference was updated, the given piece of code\n * should run again.\n * @param code: The piece of script where references need to be extracted from\n */\n\nexport interface IdentifierInfo {\n  references: string[];\n  functionalParams: string[];\n  variables: string[];\n}\nexport const extractIdentifierInfoFromCode = (\n  code: string,\n  evaluationVersion: number,\n  invalidIdentifiers?: Record<string, unknown>,\n): IdentifierInfo => {\n  let ast: Node = { end: 0, start: 0, type: \"\" };\n  try {\n    const sanitizedScript = sanitizeScript(code, evaluationVersion);\n    /* wrapCode - Wrapping code in a function, since all code/script get wrapped with a function during evaluation.\n       Some syntax won't be valid unless they're at the RHS of a statement.\n       Since we're assigning all code/script to RHS during evaluation, we do the same here.\n       So that during ast parse, those errors are neglected.\n    */\n    /* e.g. IIFE without braces\n      function() { return 123; }() -> is invalid\n      let result = function() { return 123; }() -> is valid\n    */\n    const wrappedCode = wrapCode(sanitizedScript);\n    ast = getAST(wrappedCode);\n    const { functionalParams, references, variableDeclarations }: NodeList =\n      ancestorWalk(ast);\n    const referencesArr = Array.from(references).filter((reference) => {\n      // To remove references derived from declared variables and function params,\n      // We extract the topLevelIdentifier Eg. Api1.name => Api1\n      const topLevelIdentifier = toPath(reference)[0];\n      return !(\n        functionalParams.has(topLevelIdentifier) ||\n        variableDeclarations.has(topLevelIdentifier) ||\n        has(invalidIdentifiers, topLevelIdentifier)\n      );\n    });\n    return {\n      references: referencesArr,\n      functionalParams: Array.from(functionalParams),\n      variables: Array.from(variableDeclarations),\n    };\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      // Syntax error. Ignore and return empty list\n      return {\n        references: [],\n        functionalParams: [],\n        variables: [],\n      };\n    }\n    throw e;\n  }\n};\n\nexport const entityRefactorFromCode = (\n  script: string,\n  oldName: string,\n  newName: string,\n  isJSObject: boolean,\n  evaluationVersion: number,\n  invalidIdentifiers?: Record<string, unknown>,\n): EntityRefactorResponse => {\n  //Sanitizing leads to removal of special charater.\n  //Hence we are not sanatizing the script. Fix(#18492)\n  //If script is a JSObject then replace export default to decalartion.\n  if (isJSObject) script = jsObjectToCode(script);\n  else script = wrapCode(script);\n  let ast: Node = { end: 0, start: 0, type: \"\" };\n  //Copy of script to refactor\n  let refactorScript = script;\n  //Difference in length of oldName and newName\n  const nameLengthDiff: number = newName.length - oldName.length;\n  //Offset index used for deciding location of oldName.\n  let refactorOffset = 0;\n  //Count of refactors on the script\n  let refactorCount = 0;\n  try {\n    ast = getAST(script);\n    const {\n      functionalParams,\n      identifierList,\n      references,\n      variableDeclarations,\n    }: NodeList = ancestorWalk(ast);\n    const identifierArray = Array.from(\n      identifierList,\n    ) as Array<RefactorIdentifierNode>;\n    //To handle if oldName has property (\"JSObject.myfunc\")\n    const oldNameArr = oldName.split(\".\");\n    const referencesArr = Array.from(references).filter((reference) => {\n      // To remove references derived from declared variables and function params,\n      // We extract the topLevelIdentifier Eg. Api1.name => Api1\n      const topLevelIdentifier = toPath(reference)[0];\n      return !(\n        functionalParams.has(topLevelIdentifier) ||\n        variableDeclarations.has(topLevelIdentifier) ||\n        has(invalidIdentifiers, topLevelIdentifier)\n      );\n    });\n    //Traverse through all identifiers in the script\n    identifierArray.forEach((identifier) => {\n      if (identifier.name === oldNameArr[0]) {\n        let index = 0;\n        while (index < referencesArr.length) {\n          if (identifier.name === referencesArr[index].split(\".\")[0]) {\n            //Replace the oldName by newName\n            //Get start index from node and get subarray from index 0 till start\n            //Append above with new name\n            //Append substring from end index from the node till end of string\n            //Offset variable is used to alter the position based on `refactorOffset`\n            //In case of nested JS action get end postion fro the property.\n            ///Default end index\n            let endIndex = identifier.end;\n            const propertyNode = identifier.property;\n            //Flag variable : true if property should be updated\n            //false if property should not be updated\n            const propertyCondFlag =\n              oldNameArr.length > 1 &&\n              propertyNode &&\n              oldNameArr[1] === propertyNode.name;\n            //Condition to validate if Identifier || Property should be updated??\n            if (oldNameArr.length === 1 || propertyCondFlag) {\n              //Condition to extend end index in case of property match\n              if (propertyCondFlag && propertyNode) {\n                endIndex = propertyNode.end;\n              }\n              refactorScript =\n                refactorScript.substring(0, identifier.start + refactorOffset) +\n                newName +\n                refactorScript.substring(endIndex + refactorOffset);\n              refactorOffset += nameLengthDiff;\n              ++refactorCount;\n              //We are only looking for one match in refrence for the identifier name.\n              break;\n            }\n          }\n          index++;\n        }\n      }\n    });\n    //If script is a JSObject then revert decalartion to export default.\n    if (isJSObject) refactorScript = jsCodeToObject(refactorScript);\n    else refactorScript = unwrapCode(refactorScript);\n    return {\n      isSuccess: true,\n      body: { script: refactorScript, refactorCount },\n    };\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      // Syntax error. Ignore and return empty list\n      return { isSuccess: false, body: { error: \"Syntax Error\" } };\n    }\n    throw e;\n  }\n};\n\nexport interface functionParam {\n  paramName: string;\n  defaultValue: unknown;\n}\n\nexport const getFunctionalParamsFromNode = (\n  node:\n    | FunctionDeclarationNode\n    | FunctionExpressionNode\n    | ArrowFunctionExpressionNode,\n  needValue = false,\n): Set<functionParam> => {\n  const functionalParams = new Set<functionParam>();\n  node.params.forEach((paramNode) => {\n    if (isIdentifierNode(paramNode)) {\n      functionalParams.add({\n        paramName: paramNode.name,\n        defaultValue: undefined,\n      });\n    } else if (isAssignmentPatternNode(paramNode)) {\n      if (isIdentifierNode(paramNode.left)) {\n        const paramName = paramNode.left.name;\n        if (!needValue) {\n          functionalParams.add({ paramName, defaultValue: undefined });\n        } else {\n          // figure out how to get value of paramNode.right for each node type\n          // currently we don't use params value, hence skipping it\n          // functionalParams.add({\n          //   defaultValue: paramNode.right.value,\n          // });\n        }\n      }\n    }\n  });\n  return functionalParams;\n};\n\nconst constructFinalMemberExpIdentifier = (\n  node: MemberExpressionNode,\n  child = \"\",\n): string => {\n  const propertyAccessor = getPropertyAccessor(node.property);\n  if (isIdentifierNode(node.object)) {\n    return `${node.object.name}${propertyAccessor}${child}`;\n  } else {\n    const propertyAccessor = getPropertyAccessor(node.property);\n    const nestedChild = `${propertyAccessor}${child}`;\n    return constructFinalMemberExpIdentifier(\n      node.object as MemberExpressionNode,\n      nestedChild,\n    );\n  }\n};\n\nconst getPropertyAccessor = (propertyNode: IdentifierNode | LiteralNode) => {\n  if (isIdentifierNode(propertyNode)) {\n    return `.${propertyNode.name}`;\n  } else if (isLiteralNode(propertyNode) && isString(propertyNode.value)) {\n    // is string literal search a['b']\n    return `.${propertyNode.value}`;\n  } else if (isLiteralNode(propertyNode) && isFinite(propertyNode.value)) {\n    // is array index search - a[9]\n    return `[${propertyNode.value}]`;\n  }\n};\n\nexport const isTypeOfFunction = (type: string) => {\n  return (\n    type === NodeTypes.ArrowFunctionExpression ||\n    type === NodeTypes.FunctionExpression\n  );\n};\n\nexport interface MemberExpressionData {\n  property: NodeWithLocation<IdentifierNode | LiteralNode>;\n  object: NodeWithLocation<IdentifierNode>;\n}\n\nexport interface AssignmentExpressionData {\n  property: NodeWithLocation<IdentifierNode | LiteralNode>;\n  object: NodeWithLocation<IdentifierNode | MemberExpressionNode>;\n  parentNode: NodeWithLocation<AssignmentExpressionNode>;\n}\n\nexport interface CallExpressionData {\n  property: NodeWithLocation<IdentifierNode>;\n  params: NodeWithLocation<MemberExpressionNode | LiteralNode>[];\n}\n\n// This interface is used for storing call expression nodes with callee as member node\n// example of such case is when a function is called on object like obj.func()\n// This is required to understand whether appsmith.store.test.func() is present in script\n// in order to display mutation error on such statements.\nexport interface MemberCallExpressionData {\n  property: NodeWithLocation<MemberExpressionNode | LiteralNode>;\n  object: NodeWithLocation<MemberExpressionNode>;\n  parentNode: NodeWithLocation<CallExpressionNode>;\n}\n\nexport interface AssignmentExpressionNode extends Node {\n  operator: string;\n  left: Expression;\n  Right: Expression;\n}\n\n/** Function returns Invalid top-level member expressions from code\n * @param code\n * @param data\n * @param evaluationVersion\n * @returns information about all invalid property/method assessment in code\n * @example Given data {\n * JSObject1: {\n * name:\"JSObject\",\n * data:[]\n * },\n * Api1:{\n * name: \"Api1\",\n * data: []\n * }\n * },\n * For code {{Api1.name + JSObject.unknownProperty}}, function returns information about \"JSObject.unknownProperty\" node.\n */\nexport const extractExpressionsFromCode = (\n  code: string,\n  data: Record<string, any>,\n  evaluationVersion: number,\n): {\n  invalidTopLevelMemberExpressionsArray: MemberExpressionData[];\n  assignmentExpressionsData: AssignmentExpressionData[];\n  callExpressionsData: CallExpressionData[];\n  memberCallExpressionData: MemberCallExpressionData[];\n} => {\n  const assignmentExpressionsData = new Set<AssignmentExpressionData>();\n  const callExpressionsData = new Set<CallExpressionData>();\n  const memberCallExpressionData = new Set<MemberCallExpressionData>();\n  const invalidTopLevelMemberExpressions = new Set<MemberExpressionData>();\n  const variableDeclarations = new Set<string>();\n  let functionalParams = new Set<string>();\n  let ast: Node = { end: 0, start: 0, type: \"\" };\n  try {\n    const sanitizedScript = sanitizeScript(code, evaluationVersion);\n    const wrappedCode = wrapCode(sanitizedScript);\n    ast = getAST(wrappedCode, { locations: true });\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      // Syntax error. Ignore and return empty list\n      return {\n        invalidTopLevelMemberExpressionsArray: [],\n        assignmentExpressionsData: [],\n        callExpressionsData: [],\n        memberCallExpressionData: [],\n      };\n    }\n    throw e;\n  }\n  simple(ast, {\n    MemberExpression(node: Node) {\n      const { computed, object, property } = node as MemberExpressionNode;\n\n      // We are only interested in top-level MemberExpression nodes\n      // Eg. for Api1.data.name, we are only interested in Api1.data\n      if (!isIdentifierNode(object)) return;\n      if (!(object.name in data) || !isTrueObject(data[object.name])) return;\n      // For computed member expressions (assessed via [], eg. JSObject1[\"name\"] ),\n      // We are only interested in strings\n      if (\n        isLiteralNode(property) &&\n        isString(property.value) &&\n        !(property.value in data[object.name])\n      ) {\n        invalidTopLevelMemberExpressions.add({\n          object,\n          property,\n        } as MemberExpressionData);\n      }\n      // We ignore computed member expressions if property is an identifier (JSObject[name])\n      // This is because we can't statically determine what the value of the identifier might be.\n      if (\n        isIdentifierNode(property) &&\n        !computed &&\n        !(property.name in data[object.name])\n      ) {\n        invalidTopLevelMemberExpressions.add({\n          object,\n          property,\n        } as MemberExpressionData);\n      }\n    },\n    VariableDeclarator(node: Node) {\n      if (isVariableDeclarator(node)) {\n        variableDeclarations.add(node.id.name);\n      }\n    },\n    FunctionDeclaration(node: Node) {\n      if (!isFunctionDeclaration(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n    FunctionExpression(node: Node) {\n      if (!isFunctionExpression(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n    ArrowFunctionExpression(node: Node) {\n      if (!isArrowFunctionExpression(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n    AssignmentExpression(node: Node) {\n      if (\n        !isAssignmentExpression(node) ||\n        node.operator !== \"=\" ||\n        !isMemberExpressionNode(node.left)\n      )\n        return;\n\n      const { object, property } = node.left;\n\n      assignmentExpressionsData.add({\n        object,\n        property,\n        parentNode: node,\n      } as AssignmentExpressionData);\n    },\n    CallExpression(node: Node) {\n      if (isCallExpressionNode(node)) {\n        if (isIdentifierNode(node.callee)) {\n          callExpressionsData.add({\n            property: node.callee,\n            params: node.arguments,\n          } as CallExpressionData);\n        }\n\n        if (isMemberExpressionNode(node.callee)) {\n          const { object, property } = node.callee;\n\n          memberCallExpressionData.add({\n            object,\n            property,\n            parentNode: node,\n          } as MemberCallExpressionData);\n        }\n      }\n    },\n  });\n\n  const invalidTopLevelMemberExpressionsArray = Array.from(\n    invalidTopLevelMemberExpressions,\n  ).filter((MemberExpression) => {\n    return !(\n      variableDeclarations.has(MemberExpression.object.name) ||\n      functionalParams.has(MemberExpression.object.name)\n    );\n  });\n\n  return {\n    invalidTopLevelMemberExpressionsArray,\n    assignmentExpressionsData: [...assignmentExpressionsData],\n    callExpressionsData: [...callExpressionsData],\n    memberCallExpressionData: [...memberCallExpressionData],\n  };\n};\n\nconst ancestorWalk = (ast: Node): NodeList => {\n  //List of all Identifier nodes with their property(if exists).\n  const identifierList = new Array<RefactorIdentifierNode>();\n  // List of all references found\n  const references = new Set<string>();\n  // List of variables declared within the script. All identifiers and member expressions derived from declared variables will be removed\n  const variableDeclarations = new Set<string>();\n  // List of functional params declared within the script. All identifiers and member expressions derived from functional params will be removed\n  let functionalParams = new Set<string>();\n\n  /*\n   * We do an ancestor walk on the AST in order to extract all references. For example, for member expressions and identifiers, we need to know\n   * what surrounds the identifier (its parent and ancestors), ancestor walk will give that information in the callback\n   * doc: https://github.com/acornjs/acorn/tree/master/acorn-walk\n   */\n  ancestor(ast, {\n    Identifier(node: Node, ancestors: Node[]) {\n      /*\n       * We are interested in identifiers. Due to the nature of AST, Identifier nodes can\n       * also be nested inside MemberExpressions. For deeply nested object references, there\n       * could be nesting of many MemberExpressions. To find the final reference, we will\n       * try to find the top level MemberExpression that does not have a MemberExpression parent.\n       * */\n      let candidateTopLevelNode: IdentifierNode | MemberExpressionNode =\n        node as IdentifierNode;\n      let depth = ancestors.length - 2; // start \"depth\" with first parent\n      while (depth > 0) {\n        const parent = ancestors[depth];\n        if (\n          isMemberExpressionNode(parent) &&\n          /* Member expressions that are \"computed\" (with [ ] search)\n             and the ones that have optional chaining ( a.b?.c )\n             will be considered top level node.\n             We will stop looking for further parents */\n          /* \"computed\" exception - isArrayAccessorNode\n             Member expressions that are array accessors with static index - [9]\n             will not be considered top level.\n             We will continue looking further. */\n          (!parent.computed || isArrayAccessorNode(parent)) &&\n          !parent.optional\n        ) {\n          candidateTopLevelNode = parent;\n          depth = depth - 1;\n        } else {\n          // Top level found\n          break;\n        }\n      }\n      //If parent is a Member expression then attach property to the Node.\n      //else push Identifier Node.\n      const parentNode = ancestors[ancestors.length - 2];\n      if (isMemberExpressionNode(parentNode)) {\n        identifierList.push({\n          ...(node as IdentifierNode),\n          property: parentNode.property as IdentifierNode,\n        });\n      } else identifierList.push(node as RefactorIdentifierNode);\n      if (isIdentifierNode(candidateTopLevelNode)) {\n        // If the node is an Identifier, just save that\n        references.add(candidateTopLevelNode.name);\n      } else {\n        // For MemberExpression Nodes, we will construct a final reference string and then add\n        // it to the references list\n        const memberExpIdentifier = constructFinalMemberExpIdentifier(\n          candidateTopLevelNode,\n        );\n        references.add(memberExpIdentifier);\n      }\n    },\n    VariableDeclarator(node: Node) {\n      // keep a track of declared variables so they can be\n      // removed from the final list of references\n      if (isVariableDeclarator(node)) {\n        variableDeclarations.add(node.id.name);\n      }\n    },\n    FunctionDeclaration(node: Node) {\n      // params in function declarations are also counted as references so we keep\n      // track of them and remove them from the final list of references\n      if (!isFunctionDeclaration(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n    FunctionExpression(node: Node) {\n      // params in function expressions are also counted as references so we keep\n      // track of them and remove them from the final list of references\n      if (!isFunctionExpression(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n    ArrowFunctionExpression(node: Node) {\n      // params in arrow function expressions are also counted as references so we keep\n      // track of them and remove them from the final list of references\n      if (!isArrowFunctionExpression(node)) return;\n      functionalParams = new Set([\n        ...functionalParams,\n        ...getFunctionalParamNamesFromNode(node),\n      ]);\n    },\n  });\n  return {\n    references,\n    functionalParams,\n    variableDeclarations,\n    identifierList,\n  };\n};\n\n//Replace export default by a variable declaration.\n//This is required for acorn to parse code into AST.\nconst jsObjectToCode = (script: string) => {\n  return script.replace(/export default/g, jsObjectDeclaration);\n};\n\n//Revert the string replacement from 'jsObjectToCode'.\n//variable declaration is replaced back by export default.\nconst jsCodeToObject = (script: string) => {\n  return script.replace(jsObjectDeclaration, \"export default\");\n};\n\nexport const isFunctionPresent = (\n  script: string,\n  evaluationVersion: number,\n) => {\n  try {\n    const sanitizedScript = sanitizeScript(script, evaluationVersion);\n    const ast = getAST(sanitizedScript, {\n      locations: true,\n      ranges: true,\n    });\n\n    let isFunction = false;\n    simple(ast, {\n      FunctionDeclaration() {\n        isFunction = true;\n      },\n      FunctionExpression() {\n        isFunction = true;\n      },\n      ArrowFunctionExpression() {\n        isFunction = true;\n      },\n    });\n\n    return isFunction;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport function getMemberExpressionObjectFromProperty(\n  propertyName: string,\n  code: string,\n  evaluationVersion = 2,\n) {\n  if (!propertyName) return [];\n  const memberExpressionObjects = new Set<string>();\n  let ast: Node = { end: 0, start: 0, type: \"\" };\n  try {\n    const sanitizedScript = sanitizeScript(code, evaluationVersion);\n    const wrappedCode = wrapCode(sanitizedScript);\n    ast = getAST(wrappedCode, { locations: true });\n    simple(ast, {\n      MemberExpression(node: Node) {\n        const { object, property } = node as MemberExpressionNode;\n        if (!isLiteralNode(property) && !isIdentifierNode(property)) return;\n        const propName = isLiteralNode(property)\n          ? property.value\n          : property.name;\n        if (!isNil(propName) && getStringValue(propName) === propertyName) {\n          const memberExpressionObjectString = generate(object);\n          memberExpressionObjects.add(memberExpressionObjectString);\n        }\n      },\n    });\n    return Array.from(memberExpressionObjects);\n  } catch (e) {\n    return [];\n  }\n}\n","import type { Node } from \"acorn\";\nimport { simple } from \"acorn-walk\";\nimport type {\n  IdentifierNode,\n  LiteralNode,\n  NodeWithLocation,\n  PropertyNode,\n} from \"../index\";\nimport {\n  getAST,\n  isExportDefaultDeclarationNode,\n  isObjectExpression,\n  isTypeOfFunction,\n} from \"../index\";\nimport { generate } from \"astring\";\nimport type { functionParam } from \"../index\";\nimport { getFunctionalParamsFromNode, isPropertyAFunctionNode } from \"../index\";\nimport { SourceType } from \"../../index\";\nimport { attachComments } from \"escodegen\";\nimport { extractContentByPosition } from \"../utils\";\n\nconst jsObjectVariableName =\n  \"____INTERNAL_JS_OBJECT_NAME_USED_FOR_PARSING_____\";\n\nexport const jsObjectDeclaration = `var ${jsObjectVariableName} =`;\n\nexport interface JSPropertyPosition {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n  keyStartLine: number;\n  keyEndLine: number;\n  keyStartColumn: number;\n  keyEndColumn: number;\n}\n\ninterface BaseJSProperty {\n  key: string;\n  value: string;\n  type: string;\n  position: Partial<JSPropertyPosition>;\n  rawContent: string;\n}\n\nexport type JSFunctionProperty = BaseJSProperty & {\n  arguments: functionParam[];\n  // If function uses the \"async\" keyword\n  isMarkedAsync: boolean;\n};\nexport type JSVarProperty = BaseJSProperty;\n\nexport type TParsedJSProperty = JSVarProperty | JSFunctionProperty;\n\nexport const isJSFunctionProperty = (\n  t: TParsedJSProperty,\n): t is JSFunctionProperty => {\n  return isTypeOfFunction(t.type);\n};\n\nexport const parseJSObject = (code: string) => {\n  let ast: Node = { end: 0, start: 0, type: \"\" };\n  const result: TParsedJSProperty[] = [];\n  try {\n    const comments: any = [];\n    const token: any = [];\n    ast = getAST(code, {\n      sourceType: SourceType.module,\n      onComment: comments,\n      onToken: token,\n      ranges: true,\n      locations: true,\n    });\n    attachComments(ast, comments, token);\n  } catch (e) {\n    return { parsedObject: result, success: false };\n  }\n\n  const parsedObjectProperties = new Set<TParsedJSProperty>();\n  let JSObjectProperties: NodeWithLocation<PropertyNode>[] = [];\n\n  simple(ast, {\n    ExportDefaultDeclaration(node) {\n      if (\n        !isExportDefaultDeclarationNode(node) ||\n        !isObjectExpression(node.declaration)\n      )\n        return;\n      JSObjectProperties = node.declaration\n        .properties as NodeWithLocation<PropertyNode>[];\n    },\n  });\n\n  JSObjectProperties.forEach((node) => {\n    const propertyKey = node.key as NodeWithLocation<\n      LiteralNode | IdentifierNode\n    >;\n    let property: TParsedJSProperty = {\n      key: generate(node.key),\n      value: generate(node.value),\n      rawContent: extractContentByPosition(code, {\n        from: {\n          line: node.loc.start.line - 1,\n          ch: node.loc.start.column,\n        },\n        to: {\n          line: node.loc.end.line - 1,\n          ch: node.loc.end.column - 1,\n        },\n      }),\n      type: node.value.type,\n      position: {\n        startLine: node.loc.start.line,\n        startColumn: node.loc.start.column,\n        endLine: node.loc.end.line,\n        endColumn: node.loc.end.column,\n        keyStartLine: propertyKey.loc.start.line,\n        keyEndLine: propertyKey.loc.end.line,\n        keyStartColumn: propertyKey.loc.start.column,\n        keyEndColumn: propertyKey.loc.end.column,\n      },\n    };\n\n    if (isPropertyAFunctionNode(node.value)) {\n      // if in future we need default values of each param, we could implement that in getFunctionalParamsFromNode\n      // currently we don't consume it anywhere hence avoiding to calculate that.\n      const params = getFunctionalParamsFromNode(node.value);\n      property = {\n        ...property,\n        arguments: [...params],\n        isMarkedAsync: node.value.async,\n      };\n    }\n\n    parsedObjectProperties.add(property);\n  });\n\n  return { parsedObject: [...parsedObjectProperties], success: true };\n};\n","import unescapeJS from \"unescape-js\";\nimport type { PropertyNode } from \"../index\";\nimport { isLiteralNode } from \"../index\";\n\nconst beginsWithLineBreakRegex = /^\\s+|\\s+$/;\n\nexport function sanitizeScript(js: string, evaluationVersion: number) {\n  // We remove any line breaks from the beginning of the script because that\n  // makes the final function invalid. We also unescape any escaped characters\n  // so that eval can happen\n  //default value of evalutaion version is 2\n  evaluationVersion = evaluationVersion ? evaluationVersion : 2;\n  const trimmedJS = js.replace(beginsWithLineBreakRegex, \"\");\n  return evaluationVersion > 1 ? trimmedJS : unescapeJS(trimmedJS);\n}\n\n// For the times when you need to know if something truly an object like { a: 1, b: 2}\n// typeof, lodash.isObject and others will return false positives for things like array, null, etc\nexport const isTrueObject = (\n  item: unknown,\n): item is Record<string, unknown> => {\n  return Object.prototype.toString.call(item) === \"[object Object]\";\n};\n\nexport const getNameFromPropertyNode = (node: PropertyNode): string =>\n  isLiteralNode(node.key) ? String(node.key.value) : node.key.name;\n\ninterface Position {\n  line: number;\n  ch: number;\n}\n\nexport const extractContentByPosition = (\n  content: string,\n  position: { from: Position; to: Position },\n) => {\n  const eachLine = content.split(\"\\n\");\n\n  let returnedString = \"\";\n\n  for (let i = position.from.line; i <= position.to.line; i++) {\n    if (i === position.from.line) {\n      returnedString =\n        position.from.line !== position.to.line\n          ? eachLine[position.from.line].slice(position.from.ch)\n          : eachLine[position.from.line].slice(\n              position.from.ch,\n              position.to.ch + 1,\n            );\n    } else if (i === position.to.line) {\n      returnedString += eachLine[position.to.line].slice(0, position.to.ch + 1);\n    } else {\n      returnedString += eachLine[i];\n    }\n    if (i !== position.to.line) {\n      returnedString += \"\\n\";\n    }\n  }\n  return returnedString;\n};\n\nexport const getStringValue = (\n  inputValue: string | number | boolean | RegExp,\n) => {\n  if (typeof inputValue === \"object\" || typeof inputValue === \"boolean\") {\n    inputValue = JSON.stringify(inputValue);\n  } else if (typeof inputValue === \"number\" || typeof inputValue === \"string\") {\n    inputValue += \"\";\n  }\n  return inputValue;\n};\n","import type { PageErrorMessageProps } from \"pages/common/ErrorPages/Components/PageErrorMessage\";\n\nexport function createMessage(\n  format: (...strArgs: any[]) => string,\n  ...args: any[]\n) {\n  return format(...args);\n}\n\n/*\n  For self hosted CE, it displays the string \"Appsmith Community v1.10.0\".\n */\nexport const APPSMITH_DISPLAY_VERSION = (edition: string, version: string) =>\n  `Appsmith ${edition} ${version}`;\nexport const INTERCOM_CONSENT_MESSAGE = () =>\n  `Can we have your email for better support?`;\nexport const YES = () => `Yes`;\nexport const ARE_YOU_SURE = () => `Are you sure?`;\nexport const CHAT_WITH_US = () => `Chat with us`;\nexport const ERROR_ADD_API_INVALID_URL = () =>\n  `Unable to create API. Try adding a URL to the datasource`;\nexport const ERROR_MESSAGE_NAME_EMPTY = () => `Please select a name`;\nexport const ERROR_MESSAGE_CREATE_APPLICATION = () =>\n  `We could not create the Application`;\nexport const APPLICATION_NAME_UPDATE = () => `Application name updated`;\nexport const ERROR_EMPTY_APPLICATION_NAME = () =>\n  `Application name can't be empty`;\nexport const API_PATH_START_WITH_SLASH_ERROR = () => `Path cannot start with /`;\nexport const FIELD_REQUIRED_ERROR = () => `This field is required`;\nexport const INPUT_DEFAULT_TEXT_MAX_CHAR_ERROR = (max: number) =>\n  `Default text length must be less than or equal to ${max} characters`;\nexport const INPUT_TEXT_MAX_CHAR_ERROR = (max: number) =>\n  `Input text length must be less than ${max} characters`;\nexport const INPUT_DEFAULT_TEXT_MAX_NUM_ERROR = () =>\n  `Default Text value must be less than Max number allowed`;\nexport const INPUT_DEFAULT_TEXT_MIN_NUM_ERROR = () =>\n  `Default Text value must be greater than Min number allowed`;\nexport const INPUT_INVALID_TYPE_ERROR = () =>\n  `Type Mismatch. Please enter a valid value`;\nexport const VALID_FUNCTION_NAME_ERROR = () =>\n  `Must be a valid variable name (camelCase)`;\nexport const UNIQUE_NAME_ERROR = () => `Name must be unique`;\nexport const NAME_SPACE_ERROR = () => `Name must not have spaces`;\nexport const APLHANUMERIC_HYPHEN_SLASH_SPACE_ERROR = () =>\n  `Name must only contain alphanumeric characters, hyphen, slash, and space`;\n\nexport const FORM_VALIDATION_EMPTY_EMAIL = () => `Please enter an email`;\nexport const FORM_VALIDATION_INVALID_EMAIL = () =>\n  `Please provide a valid email address`;\nexport const ENTER_VIDEO_URL = () => `Please provide a valid url`;\nexport const ENTER_AUDIO_URL = () => `Please provide a valid url`;\n\nexport const FORM_VALIDATION_EMPTY_PASSWORD = () => `Please enter the password`;\nexport const FORM_VALIDATION_PASSWORD_RULE = () =>\n  `Please provide a password between 8 and 48 characters`;\nexport const FORM_VALIDATION_INVALID_PASSWORD = FORM_VALIDATION_PASSWORD_RULE;\n\nexport const LOGIN_PAGE_EMAIL_INPUT_LABEL = () => `Email`;\nexport const LOGIN_PAGE_PASSWORD_INPUT_LABEL = () => `Password`;\nexport const LOGIN_PAGE_EMAIL_INPUT_PLACEHOLDER = () => `Enter your email`;\nexport const LOGIN_PAGE_PASSWORD_INPUT_PLACEHOLDER = () =>\n  `Enter your password`;\nexport const LOGIN_PAGE_INVALID_CREDS_ERROR = () =>\n  `It looks like you may have entered incorrect/invalid credentials. Please try again or reset password using the button below.`;\nexport const LOGIN_PAGE_INVALID_CREDS_FORGOT_PASSWORD_LINK = () =>\n  `Reset password`;\nexport const NEW_TO_APPSMITH = () => `Don't have an account?`;\nexport const LOGIN_PAGE_TITLE = () => `Sign in to your account`;\nexport const LOGIN_PAGE_SUBTITLE = () => `Sign in to your account`;\n\nexport const LOGIN_PAGE_LOGIN_BUTTON_TEXT = () => `Sign in`;\nexport const LOGIN_PAGE_FORGOT_PASSWORD_TEXT = () => `Forgot password`;\nexport const LOGIN_PAGE_REMEMBER_ME_LABEL = () => `Remember`;\nexport const LOGIN_PAGE_SIGN_UP_LINK_TEXT = () => `Sign up`;\nexport const SIGNUP_PAGE_TITLE = () => `Create your account`;\nexport const SIGNUP_PAGE_SUBTITLE = () => `Use your workspace email`;\nexport const SIGNUP_PAGE_EMAIL_INPUT_LABEL = () => `Email`;\nexport const SIGNUP_PAGE_EMAIL_INPUT_PLACEHOLDER = () => `Enter your email`;\nexport const SIGNUP_PAGE_NAME_INPUT_PLACEHOLDER = () => `Name`;\nexport const SIGNUP_PAGE_NAME_INPUT_LABEL = () => `Name`;\nexport const SIGNUP_PAGE_PASSWORD_INPUT_LABEL = () => `Password`;\nexport const SIGNUP_PAGE_PASSWORD_INPUT_PLACEHOLDER = () =>\n  `Enter your password`;\nexport const SIGNUP_PAGE_LOGIN_LINK_TEXT = () => `Sign in`;\nexport const SIGNUP_PAGE_NAME_INPUT_SUBTEXT = () => `How should we call you?`;\nexport const SIGNUP_PAGE_SUBMIT_BUTTON_TEXT = () => `Sign up`;\nexport const ALREADY_HAVE_AN_ACCOUNT = () => `Already have an account?`;\nexport const LOOKING_TO_SELF_HOST = () => \"Looking to self-host Appsmith?\";\nexport const VISIT_OUR_DOCS = () => \"Visit our docs\";\n\nexport const SIGNUP_PAGE_SUCCESS = () =>\n  `Awesome! You have successfully registered.`;\nexport const SIGNUP_PAGE_SUCCESS_LOGIN_BUTTON_TEXT = () => `Login`;\n\nexport const RESET_PASSWORD_PAGE_PASSWORD_INPUT_LABEL = () => `New password`;\nexport const RESET_PASSWORD_PAGE_PASSWORD_INPUT_PLACEHOLDER = () =>\n  `New Password`;\nexport const RESET_PASSWORD_LOGIN_LINK_TEXT = () => `Back to sign in`;\nexport const RESET_PASSWORD_PAGE_TITLE = () => `Reset password`;\nexport const RESET_PASSWORD_SUBMIT_BUTTON_TEXT = () => `Reset`;\nexport const RESET_PASSWORD_PAGE_SUBTITLE = () =>\n  `Create a new password for your account `;\n\nexport const RESET_PASSWORD_RESET_SUCCESS = () =>\n  `Your password has been reset`; //`Your password has been reset. Please login` (see next entry));\nexport const RESET_PASSWORD_RESET_SUCCESS_LOGIN_LINK = () => `Login`;\n\nexport const RESET_PASSWORD_EXPIRED_TOKEN = () =>\n  `The password reset link has expired. Please try generating a new link`;\nexport const RESET_PASSWORD_INVALID_TOKEN = () =>\n  `The password reset link is invalid. Please try generating a new link`;\nexport const RESET_PASSWORD_FORGOT_PASSWORD_LINK = () => `Forgot password`;\n\nexport const FORGOT_PASSWORD_PAGE_EMAIL_INPUT_LABEL = () => `Email`;\nexport const FORGOT_PASSWORD_PAGE_EMAIL_INPUT_PLACEHOLDER = () =>\n  `Enter your email`;\nexport const FORGOT_PASSWORD_PAGE_TITLE = () => `Reset password`;\nexport const FORGOT_PASSWORD_PAGE_SUB_TITLE = () =>\n  `Enter the email address associated with your account`;\nexport const FORGOT_PASSWORD_PAGE_SUBTITLE = () =>\n  `We will send a reset link to the email below`;\nexport const FORGOT_PASSWORD_PAGE_SUBMIT_BUTTON_TEXT = () => `Send reset link`;\nexport const FORGOT_PASSWORD_SUCCESS_TEXT = (email: string) =>\n  `A password reset link has been sent to your email address ${email} registered with Appsmith.`;\n\nexport const VERIFICATION_PENDING_TITLE = () => `Check your inbox`;\nexport const VERIFICATION_PENDING_BODY = () =>\n  `To finish your account setup click on the verification link we have sent in an email to `;\n\nexport const VERIFICATION_PENDING_NOT_YOU = () => `Not you?`;\n\nexport const VERIFICATION_PENDING_NO_EMAIL = () =>\n  `No email in your inbox or spam folder?`;\n\nexport const VERIFICATION_PENDING_RESEND_LINK = () => `Resend link`;\n\nexport const VERIFY_ERROR_ALREADY_VERIFIED_TITLE = () =>\n  `Email already verified`;\n\nexport const VERIFY_ERROR_EXPIRED_TITLE = () => \"Oops, this link has expired\";\n\nexport const VERIFY_ERROR_MISMATCH_TITLE = () =>\n  \"This link seems damaged. Please request a new link\";\n\nexport const PRIVACY_POLICY_LINK = () => `Privacy policy`;\nexport const TERMS_AND_CONDITIONS_LINK = () => `Terms and conditions`;\n\nexport const ERROR_500 = () =>\n  `We apologize, something went wrong. We're trying to fix things.`;\nexport const ERROR_0 = () =>\n  `We could not connect to our servers. Please check your network connection`;\nexport const ERROR_401 = () =>\n  `We are unable to verify your identity. Please login again.`;\nexport const ERROR_413 = (maxFileSize: number) =>\n  `Payload too large. File size cannot exceed ${maxFileSize}MB.`;\nexport const GENERIC_API_EXECUTION_ERROR = () => `API execution error`;\nexport const APPSMITH_HTTP_ERROR_413 = () => `413 CONTENT_TOO_LARGE`;\nexport const ERROR_403 = (entity: string, userEmail: string) =>\n  `Sorry, but your account (${userEmail}) does not seem to have the required access to update this ${entity}. Please get in touch with your Appsmith admin to resolve this.`;\nexport const PAGE_NOT_FOUND_ERROR = () =>\n  `The page you’re looking for either does not exist, or cannot be found`;\nexport const INVALID_URL_ERROR = () => `Invalid URL`;\nexport const INVALID_NAME_ERROR = () => `Invalid name`;\nexport const MAKE_APPLICATION_PUBLIC = () => \"Make application public\";\nexport const MAKE_APPLICATION_PUBLIC_TOOLTIP = () =>\n  \"A public app is accessible to anyone who can access your instance of appsmith\";\nexport const INVITE_TAB = () => \"Invite\";\nexport const INVITE_USERS_VALIDATION_EMAIL_LIST = () =>\n  `Invalid email address(es) found`;\nexport const INVITE_USERS_VALIDATION_ROLE_EMPTY = () => `Please select a role`;\nexport const APPLICATION_INVITE = (name: string) => `Invite users to ${name}`;\nexport const INVITE_USERS_EMAIL_LIST_PLACEHOLDER = () =>\n  `Comma separated emails`;\nexport const INVITE_USERS_ROLE_SELECT_PLACEHOLDER = () => `Select role`;\nexport const INVITE_USERS_ROLE_SELECT_LABEL = () => `Role`;\nexport const INVITE_USERS_EMAIL_LIST_LABEL = () => `User emails`;\nexport const INVITE_USERS_ADD_EMAIL_LIST_FIELD = () => `Add more`;\nexport const INVITE_USERS_MESSAGE = () => `Invite users`;\nexport const INVITE_USERS_PLACEHOLDER = () => `Enter email address(es)`;\nexport const INVITE_USERS_SUBMIT_BUTTON_TEXT = () => `Invite users`;\nexport const INVITE_USERS_SUBMIT_SUCCESS = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  cloudHosting?: boolean,\n) => `The users have been invited successfully`;\nexport const INVITE_USER_SUBMIT_SUCCESS = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  cloudHosting?: boolean,\n) => `The user has been invited successfully`;\nexport const INVITE_USERS_VALIDATION_EMAILS_EMPTY = () =>\n  `Please enter the user emails`;\nexport const INVITE_USER_RAMP_TEXT = () =>\n  \"Users will have access to all applications in the workspace. For application-level access, try out our \";\nexport const CUSTOM_ROLES_RAMP_TEXT = () =>\n  \"To build and assign custom roles, try out our \";\nexport const ASSIGN_CUSTOM_ROLE = () => \"Assign Custom Role\";\nexport const CUSTOM_ROLE_TEXT = () => \"Custom role\";\nexport const CUSTOM_ROLE_DISABLED_OPTION_TEXT = () =>\n  \"Can access specific applications or only certain pages and queries within an application\";\nexport const USERS_HAVE_ACCESS_TO_ALL_APPS = () =>\n  \"Users will have access to all applications in this workspace\";\nexport const USERS_HAVE_ACCESS_TO_ONLY_THIS_APP = () =>\n  \"Users will only have access to this application\";\nexport const NO_USERS_INVITED = () => \"You haven't invited any users yet\";\nexport const BUSINESS_EDITION_TEXT = () => \"business plan\";\nexport const PARTNER_PROGRAM_CALLOUT = (\n  email: string,\n) => `${email} is outside your organisation. If you’re building this app\nfor someone else, you should check out our partner program.`;\nexport const PARTNER_PROGRAM_CALLOUT_LINK = () =>\n  `Learn about Appsmith Partner Program`;\nexport const NEW_APPLICATION = () => `New application`;\nexport const APPLICATIONS = () => `Applications`;\n\nexport const USER_PROFILE_PICTURE_UPLOAD_FAILED = () =>\n  \"Unable to upload display picture.\";\nexport const UPDATE_USER_DETAILS_FAILED = () =>\n  \"Unable to update user details.\";\nexport const USER_DISPLAY_PICTURE_FILE_INVALID = () =>\n  \"File content doesn't seem to be an image. Please verify.\";\nexport const USER_DISPLAY_NAME_CHAR_CHECK_FAILED = () =>\n  \"No special characters allowed except .'-\";\nexport const USER_DISPLAY_NAME_PLACEHOLDER = () => \"Display name\";\nexport const USER_DISPLAY_PICTURE_PLACEHOLDER = () => \"Display picture\";\nexport const USER_EMAIL_PLACEHOLDER = () => \"Email\";\nexport const USER_RESET_PASSWORD = () => \"Reset password\";\n\nexport const CREATE_PASSWORD_RESET_SUCCESS = () => `Your password has been set`;\nexport const CREATE_PASSWORD_RESET_SUCCESS_LOGIN_LINK = () => `Login`;\n\nexport const FORGOT_PASSWORD_PAGE_LOGIN_LINK = () => `Back to sign in`;\nexport const ADD_API_TO_PAGE_SUCCESS_MESSAGE = (actionName: string) =>\n  `${actionName} API added to page`;\nexport const INPUT_WIDGET_DEFAULT_VALIDATION_ERROR = () => `Invalid input`;\n\nexport const AUTOFIT_ALL_COLUMNS = () => `Autofit all columns`;\nexport const AUTOFIT_THIS_COLUMN = () => `Autofit this column`;\nexport const AUTOFIT_COLUMN = () => `Autofit column`;\n\nexport const DATE_WIDGET_DEFAULT_VALIDATION_ERROR = () => \"Date out of range\";\n\nexport const TIMEZONE = () => `Timezone`;\nexport const ENABLE_TIME = () => `Enable Time`;\n\nexport const EDIT_APP = () => `Edit app`;\nexport const FORK_APP = () => `Fork app`;\nexport const SIGN_IN = () => `Sign in`;\nexport const SHARE_APP = () => `Share app`;\nexport const ALL_APPS = () => `All apps`;\n\nexport const EDITOR_HEADER = {\n  saving: () => \"Saving\",\n  saveFailed: () => \"Save failed\",\n  share: () => \"Share\",\n  previewTooltip: {\n    text: () => \"Preview\",\n    shortcut: () => \"P\",\n  },\n};\n\n// Homepage\nexport const CREATE_NEW_APPLICATION = () => `Create new`;\nexport const SEARCH_APPS = () => `Search for apps...`;\nexport const GETTING_STARTED = () => `Getting started`;\nexport const WORKSPACES_HEADING = () => `Workspaces`;\nexport const CREATE_A_NEW_WORKSPACE = () => `Create a new workspace`;\nexport const WELCOME_TOUR = () => `Welcome tour`;\nexport const NO_APPS_FOUND = () =>\n  `Whale! Whale! This name doesn't ring a bell!`;\nexport const APPLICATION_CARD_LIST_ZERO_STATE = () =>\n  `There are no applications in this workspace.`;\nexport const TRY_GUIDED_TOUR = () => `Try guided tour`;\nexport const JOIN_OUR_DISCORD = () => `Join our discord`;\nexport const WHATS_NEW = () => `What's new?`;\nexport const WORKSPACE_ACTION_BUTTON = () => \"Create new\";\nexport const NEW_APP = () => \"Application\";\nexport const NEW_APP_FROM_TEMPLATE = () => \"Templates\";\nexport const NO_WORKSPACE_HEADING = () => \"Oops! No workspace found\";\nexport const NO_WORKSPACE_DESCRIPTION = () =>\n  \"You can find workspace list on the left sidebar, try selecting one of them to access a workspace.\";\n\n// Lightning menu\nexport const LIGHTNING_MENU_DATA_API = () => `Use data from an API`;\nexport const LIGHTNING_MENU_DATA_QUERY = () => `Use data from a query`;\nexport const LIGHTNING_MENU_DATA_TOOLTIP = () => `Quick start data binding`;\nexport const LIGHTNING_MENU_DATA_WIDGET = () => `Use data from a widget`;\nexport const LIGHTNING_MENU_QUERY_CREATE_NEW = () => `Create new query`;\nexport const LIGHTNING_MENU_API_CREATE_NEW = () => `Create new API`;\n\nexport const LIGHTNING_MENU_OPTION_TEXT = () => `Plain text`;\nexport const LIGHTNING_MENU_OPTION_JS = () => `Write JS`;\nexport const LIGHTNING_MENU_OPTION_HTML = () => `Write HTML`;\nexport const CHECK_REQUEST_BODY = () =>\n  `Please check your request configuration to debug`;\nexport const DONT_SHOW_THIS_AGAIN = () => `Don't show this again`;\n\nexport const TABLE_FILTER_COLUMN_TYPE_CALLOUT = () =>\n  `Change column datatype to see filter operators`;\n\nexport const SAVE_HOTKEY_TOASTER_MESSAGE = () =>\n  \"Don't worry about saving, we've got you covered!\";\n\nexport const WIDGET_SIDEBAR_TITLE = () => `Widgets`;\nexport const WIDGET_SIDEBAR_CAPTION = () =>\n  `Drag a widget and drop it on the canvas`;\nexport const GOOGLE_RECAPTCHA_KEY_ERROR = () =>\n  `Google reCAPTCHA token generation failed! Please check the reCAPTCHA site key.`;\nexport const GOOGLE_RECAPTCHA_DOMAIN_ERROR = () =>\n  `Google reCAPTCHA token generation failed! Please check the allowed domains.`;\n\nexport const SERVER_API_TIMEOUT_ERROR = () =>\n  `Appsmith server is taking too long to respond. Please try again after some time`;\nexport const DEFAULT_ERROR_MESSAGE = () => `There was an unexpected error`;\nexport const REMOVE_FILE_TOOL_TIP = () => \"Remove Upload\";\nexport const ERROR_FILE_TOO_LARGE = (fileSize: string) =>\n  `File size should be less than ${fileSize}!`;\nexport const ERROR_DATEPICKER_MIN_DATE = () =>\n  `Min date cannot be greater than current widget value`;\nexport const ERROR_DATEPICKER_MAX_DATE = () =>\n  `Min date cannot be greater than current widget value`;\nexport const ERROR_WIDGET_DOWNLOAD = (err: string) => `Download failed. ${err}`;\nexport const ERROR_PLUGIN_ACTION_EXECUTE = (actionName: string) =>\n  `${actionName} failed to execute`;\nexport const ACTION_EXECUTION_CANCELLED = (actionName: string) =>\n  `${actionName} was cancelled`;\nexport const ERROR_FAIL_ON_PAGE_LOAD_ACTIONS = () =>\n  `Failed to execute actions during page load`;\nexport const ERROR_ACTION_EXECUTE_FAIL = (actionName: string) =>\n  `${actionName} action returned an error response`;\nexport const ACTION_MOVE_SUCCESS = (actionName: string, pageName: string) =>\n  `${actionName} action moved to page ${pageName} successfully`;\nexport const ERROR_ACTION_MOVE_FAIL = (actionName: string) =>\n  `Error while moving action ${actionName}`;\nexport const ACTION_COPY_SUCCESS = (actionName: string, pageName: string) =>\n  `${actionName} action copied to page ${pageName} successfully`;\nexport const ERROR_ACTION_COPY_FAIL = (actionName: string) =>\n  `Error while copying action ${actionName}`;\nexport const ERROR_ACTION_RENAME_FAIL = (actionName: string) =>\n  `Unable to update action name to ${actionName}`;\n\n// Action Names Messages\nexport const ACTION_NAME_PLACEHOLDER = (type: string) =>\n  `Name of the ${type} in camelCase`;\nexport const ACTION_INVALID_NAME_ERROR = () => \"Please enter a valid name\";\nexport const ACTION_NAME_CONFLICT_ERROR = (name: string) =>\n  `${name} is already being used or is a restricted keyword.`;\nexport const ENTITY_EXPLORER_ACTION_NAME_CONFLICT_ERROR = (name: string) =>\n  `${name} is already being used.`;\n\nexport const ACTION_ID_NOT_FOUND_IN_URL =\n  \"No correct API id or Query id found in the url.\";\nexport const JSOBJECT_ID_NOT_FOUND_IN_URL =\n  \"No correct JS Object id found in the url.\";\n\nexport const DATASOURCE_CREATE = (dsName: string) =>\n  `${dsName} datasource created`;\nexport const DATASOURCE_DELETE = (dsName: string) =>\n  `${dsName} datasource deleted successfully`;\nexport const DATASOURCE_UPDATE = (dsName: string) =>\n  `${dsName} datasource updated successfully`;\nexport const DATASOURCE_VALID = (dsName: string) =>\n  `${dsName} datasource is valid`;\nexport const EDIT_DATASOURCE = () => \"Edit datasource\";\nexport const SAVE_DATASOURCE = () => \"Save as datasource\";\nexport const SAVE_DATASOURCE_MESSAGE = () =>\n  \"Save the URL as a datasource to access authentication settings\";\nexport const EDIT_DATASOURCE_MESSAGE = () =>\n  \"Edit datasource to access authentication settings\";\nexport const OAUTH_ERROR = () => \"OAuth Error\";\nexport const OAUTH_2_0 = () => \"OAuth 2.0\";\nexport const ENABLE = () => \"Enable\";\nexport const UPGRADE = () => \"Upgrade\";\nexport const EDIT = () => \"Edit\";\nexport const CONFIGURE = () => \"Configure\";\nexport const UNEXPECTED_ERROR = () => \"An unexpected error occurred\";\nexport const EXPECTED_ERROR = () => \"An error occurred\";\nexport const NO_DATASOURCE_FOR_QUERY = () =>\n  `Seems like you don’t have any Datasources to create a query`;\nexport const ACTION_EDITOR_REFRESH = () => \"Refresh\";\nexport const INVALID_FORM_CONFIGURATION = () => \"Invalid form configuration\";\nexport const ACTION_RUN_BUTTON_MESSAGE_FIRST_HALF = () => \"🙌 Click on\";\nexport const ACTION_RUN_BUTTON_MESSAGE_SECOND_HALF = () =>\n  \"after adding your query\";\nexport const CREATE_NEW_DATASOURCE = () => \"Create datasource\";\nexport const CREATE_NEW_DATASOURCE_DATABASE_HEADER = () => \"Databases\";\nexport const CREATE_NEW_DATASOURCE_MOST_POPULAR_HEADER = () => \"Most popular\";\nexport const CREATE_NEW_DATASOURCE_REST_API = () => \"REST API\";\nexport const SAMPLE_DATASOURCES = () => \"Sample datasources\";\n\nexport const ERROR_EVAL_ERROR_GENERIC = () =>\n  `Unexpected error occurred while evaluating the application`;\n\nexport const ERROR_EVAL_TRIGGER = (message: string) =>\n  `Error occurred while evaluating trigger: ${message}`;\n\nexport const WIDGET_COPY = (widgetName: string) => `Copied ${widgetName}`;\nexport const ERROR_WIDGET_COPY_NO_WIDGET_SELECTED = () =>\n  `Please select a widget to copy`;\nexport const ERROR_WIDGET_COPY_NOT_ALLOWED = () =>\n  `This selected widget cannot be copied.`;\nexport const WIDGET_CUT = (widgetName: string) => `Cut ${widgetName}`;\nexport const ERROR_WIDGET_CUT_NO_WIDGET_SELECTED = () =>\n  `Please select a widget to cut`;\nexport const ERROR_WIDGET_CUT_NOT_ALLOWED = () =>\n  `This selected widget cannot be cut.`;\nexport const SELECT_ALL_WIDGETS_MSG = () =>\n  `All widgets in this page including modals have been selected`;\nexport const ERROR_ADD_WIDGET_FROM_QUERY = () => `Failed to add widget`;\n\nexport const REST_API_AUTHORIZATION_SUCCESSFUL = () =>\n  \"Authorization was successful!\";\nexport const REST_API_AUTHORIZATION_FAILED = () =>\n  \"Authorization failed. Please check your details or try again.\";\n// Todo: improve this for appsmith_error error message\nexport const REST_API_AUTHORIZATION_APPSMITH_ERROR = () =>\n  \"Something went wrong.\";\n\nexport const OAUTH_AUTHORIZATION_SUCCESSFUL = \"Authorization was successful!\";\nexport const OAUTH_AUTHORIZATION_FAILED =\n  \"Authorization failed. Please check your details or try again.\";\n// Todo: improve this for appsmith_error error message\nexport const OAUTH_AUTHORIZATION_APPSMITH_ERROR = \"Something went wrong.\";\nexport const OAUTH_APPSMITH_TOKEN_NOT_FOUND = \"Appsmith token not found\";\n\nexport const GSHEET_AUTHORIZATION_ERROR =\n  \"Authorisation failed, to continue using this data source authorize now.\";\nexport const GSHEET_FILES_NOT_SELECTED =\n  \"Datasource does not have access to any files, please authorize google sheets to use this data source\";\nexport const FILES_NOT_SELECTED_EVENT = () => \"Files not selected\";\n\nexport const LOCAL_STORAGE_QUOTA_EXCEEDED_MESSAGE = () =>\n  \"Error saving a key in localStorage. You have exceeded the allowed storage size limit\";\nexport const LOCAL_STORAGE_NO_SPACE_LEFT_ON_DEVICE_MESSAGE = () =>\n  \"Error saving a key in localStorage. You have run out of disk space\";\nexport const LOCAL_STORAGE_NOT_SUPPORTED_APP_MIGHT_NOT_WORK_AS_EXPECTED = () =>\n  \"LocalStorage is not supported on your device. Some features including the Appsmith store won't work.\";\n\nexport const OMNIBAR_PLACEHOLDER = () =>\n  `Search widgets, queries or create new`;\nexport const OMNIBAR_PLACEHOLDER_NAV = () => \"Search widgets and queries\";\nexport const CREATE_NEW_OMNIBAR_PLACEHOLDER = () =>\n  \"Create a new query, API or JS Object\";\nexport const HELPBAR_PLACEHOLDER = () => \"Search\";\nexport const NO_SEARCH_DATA_TEXT = () => \"No results found\";\n\nexport const WIDGET_BIND_HELP = () =>\n  \"Having trouble taking inputs from widgets?\";\n\nexport const BACK_TO_HOMEPAGE = () => \"Go back to homepage\";\n\n// error pages\nexport const PAGE_NOT_FOUND_TITLE = () => \"404\";\nexport const PAGE_NOT_FOUND = () => \"Page not found\";\nexport const PAGE_SERVER_TIMEOUT_ERROR_CODE = () => \"504\";\nexport const PAGE_SERVER_TIMEOUT_TITLE = () =>\n  \"Appsmith server is taking too long to respond\";\nexport const PAGE_SERVER_TIMEOUT_DESCRIPTION = () =>\n  `Please retry after some time`;\nexport const PAGE_CLIENT_ERROR_TITLE = () => \"Whoops something went wrong!\";\nexport const PAGE_CLIENT_ERROR_DESCRIPTION = () =>\n  \"This is embarrassing, please contact Appsmith support for help\";\n\nexport const PAGE_SERVER_UNAVAILABLE_ERROR_CODE = () => \"503\";\n\n// Modules\nexport const CONVERT_MODULE_CTA_TEXT = () => \"Create module\";\nexport const CONVERT_MODULE_TO_NEW_PKG_OPTION = () => \"Add to a new package\";\n\n// cloudHosting used in EE\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const PAGE_SERVER_UNAVAILABLE_TITLE = (cloudHosting: boolean) =>\n  \"Appsmith server unavailable\";\n\nexport const PAGE_SERVER_UNAVAILABLE_DESCRIPTION = () =>\n  \"Please try again later\";\n\nexport const PAGE_SERVER_UNAVAILABLE_ERROR_MESSAGES = (\n  cloudHosting: boolean,\n): PageErrorMessageProps[] => {\n  if (cloudHosting) {\n    return [\n      {\n        text: \"If the problem persists, please contact customer support\",\n        links: [\n          {\n            from: 40,\n            to: 56,\n            href: \"mailto: support@appsmith.com?subject=Appsmith 503 Server Error\",\n          },\n        ],\n        addNewLine: true,\n      },\n    ];\n  } else {\n    return [\n      {\n        text: \"If the problem persists, please contact your admin\",\n        addNewLine: true,\n      },\n      {\n        text: \"You can find more information on how to debug and access the logs here\",\n        links: [\n          {\n            from: 66,\n            to: 70,\n            href: \"https://docs.appsmith.com/learning-and-resources/how-to-guides/how-to-get-container-logs\",\n          },\n        ],\n        addNewLine: true,\n      },\n      {\n        text: \"A quick view of the server logs is accessible here\",\n        links: [\n          {\n            from: 46,\n            to: 50,\n            href: \"/supervisor/logtail/backend\",\n          },\n        ],\n      },\n    ];\n  }\n};\n\n// comments\nexport const POST = () => \"Post\";\nexport const CANCEL = () => \"Cancel\";\nexport const REMOVE = () => \"Remove\";\nexport const CREATE = () => \"Create\";\n\n// Showcase Carousel\nexport const NEXT = () => \"NEXT\";\nexport const BACK = () => \"BACK\";\nexport const SKIP = () => \"SKIP\";\n\n// Debugger\nexport const CLICK_ON = () => \"🙌 Click on \";\nexport const PRESS = () => \"🎉 Press \";\nexport const OPEN_THE_DEBUGGER = () => \" to show/hide the debugger\";\nexport const DEBUGGER_QUERY_RESPONSE_SECOND_HALF = () =>\n  \" to see more info in the debugger\";\nexport const LOGS_FILTER_OPTION_ALL = () => \"Show all logs\";\nexport const LOGS_FILTER_OPTION_ERROR = () => \"Error logs\";\nexport const LOGS_FILTER_OPTION_CONSOLE = () => \"Console logs\";\nexport const LOGS_FILTER_OPTION_SYSTEM = () => \"System logs\";\nexport const NO_LOGS = () => \"No logs to show\";\nexport const NO_ERRORS = () => \"No signs of trouble here!\";\nexport const DEBUGGER_ERRORS = () => \"Errors\";\nexport const DEBUGGER_RESPONSE = () => \"Response\";\nexport const DEBUGGER_LOGS = () => \"Logs\";\nexport const INSPECT_ENTITY = () => \"Inspect entity\";\nexport const INSPECT_ENTITY_BLANK_STATE = () => \"Select an entity to inspect\";\nexport const VALUE_IS_INVALID = (propertyPath: string) =>\n  `The value at ${propertyPath} is invalid`;\nexport const ACTION_CONFIGURATION_UPDATED = () => \"Configuration updated\";\nexport const WIDGET_PROPERTIES_UPDATED = () => \"Widget properties were updated\";\nexport const EMPTY_RESPONSE_FIRST_HALF = () => \"🙌 Click on\";\nexport const EMPTY_RESPONSE_LAST_HALF = () => \"to get a response\";\nexport const EMPTY_JS_RESPONSE_LAST_HALF = () =>\n  \"to view response of selected function\";\nexport const INVALID_EMAIL = () => \"Please enter a valid email\";\nexport const DEBUGGER_INTERCOM_TEXT = (text: string) =>\n  `Hi, \\nI'm facing the following error on Appsmith, can you please help? \\n\\n${text}`;\nexport const DEBUGGER_TRIGGER_ERROR = (propertyName: string) =>\n  `Error occurred while evaluating trigger ${propertyName}`;\n\nexport const TROUBLESHOOT_ISSUE = () => \"Troubleshoot issue\";\nexport const DEBUGGER_OPEN_DOCUMENTATION = () => \"Open documentation\";\nexport const DEBUGGER_SEARCH_SNIPPET = () => \"Browse code snippets\";\nexport const DEBUGGER_APPSMITH_SUPPORT = () => \"Get Appsmith support\";\n\n//action creator menu\nexport const NO_ACTION = () => `No action`;\nexport const EXECUTE_A_QUERY = () => `Execute a query`;\nexport const NAVIGATE_TO = () => `Navigate to`;\nexport const SHOW_ALERT = () => `Show alert`;\nexport const SHOW_MODAL = () => `Show modal`;\nexport const CLOSE_MODAL = () => `Close modal`;\nexport const CLOSE = () => `Close`;\nexport const STORE_VALUE = () => `Store value`;\nexport const REMOVE_VALUE = () => `Remove value`;\nexport const CLEAR_STORE = () => `Clear store`;\nexport const DOWNLOAD = () => `Download`;\nexport const COPY_TO_CLIPBOARD = () => `Copy to clipboard`;\nexport const RESET_WIDGET = () => `Reset widget`;\nexport const EXECUTE_JS_FUNCTION = () => `Execute a JS function`;\nexport const SET_INTERVAL = () => `Set interval`;\nexport const CLEAR_INTERVAL = () => `Clear interval`;\nexport const GET_GEO_LOCATION = () => `Get geolocation`;\nexport const WATCH_GEO_LOCATION = () => `Watch geolocation`;\nexport const STOP_WATCH_GEO_LOCATION = () => `Stop watching geolocation`;\nexport const POST_MESSAGE = () => `Post message`;\n\n//js actions\nexport const JS_ACTION_COPY_SUCCESS = (actionName: string, pageName: string) =>\n  `${actionName} copied to page ${pageName} successfully`;\nexport const ERROR_JS_ACTION_COPY_FAIL = (actionName: string) =>\n  `Error while copying ${actionName}`;\nexport const JS_ACTION_DELETE_SUCCESS = (actionName: string) =>\n  `${actionName} deleted successfully`;\nexport const JS_ACTION_MOVE_SUCCESS = (actionName: string, pageName: string) =>\n  `${actionName} moved to page ${pageName} successfully`;\nexport const ERROR_JS_ACTION_MOVE_FAIL = (actionName: string) =>\n  `Error while moving ${actionName}`;\nexport const ERROR_JS_COLLECTION_RENAME_FAIL = (actionName: string) =>\n  `Unable to update JS collection name to ${actionName}`;\nexport const PARSE_JS_FUNCTION_ERROR = (message: string) =>\n  `Syntax error: ${message}`;\n\nexport const EXECUTING_FUNCTION = () => `Executing function`;\nexport const UPDATING_JS_COLLECTION = () => `Updating...`;\nexport const EMPTY_JS_OBJECT = () =>\n  `Nothing to show, write some code to get response`;\nexport const EXPORT_DEFAULT_BEGINNING = () =>\n  `Start object with export default`;\nexport const ACTION_EXECUTION_FAILED = (actionName: string) =>\n  `The action \"${actionName}\" has failed.`;\nexport const JS_EXECUTION_SUCCESS = () => \"JS Function executed successfully\";\nexport const JS_EXECUTION_FAILURE = () => \"JS Function execution failed\";\nexport const JS_EXECUTION_FAILURE_TOASTER = () =>\n  \"There was an error while executing function\";\nexport const JS_SETTINGS_ONPAGELOAD = () => \"Run function on page load (Beta)\";\nexport const JS_SETTINGS_ONPAGELOAD_SUBTEXT = () =>\n  \"Will refresh data every time page is reloaded\";\nexport const JS_SETTINGS_CONFIRM_EXECUTION = () =>\n  \"Request confirmation before calling function?\";\nexport const JS_SETTINGS_CONFIRM_EXECUTION_SUBTEXT = () =>\n  \"Ask confirmation from the user every time before refreshing data\";\nexport const JS_SETTINGS_EXECUTE_TIMEOUT = () =>\n  \"Function timeout (in milliseconds)\";\nexport const FUNCTION_SETTINGS_HEADING = () => \"Function settings\";\nexport const NO_JS_FUNCTIONS = () => \"There is no function in this JS Object\";\nexport const NO_JS_FUNCTION_TO_RUN = (JSObjectName: string) =>\n  `${JSObjectName} has no function`;\nexport const NO_JS_FUNCTION_RETURN_VALUE = (JSFunctionName: string) =>\n  `${JSFunctionName} did not return any data. Did you add a return statement?`;\n\nexport const REMOVE_CONFIRM_BEFORE_CALLING_HEADING = () =>\n  `Remove 'Confirm before calling' `;\nexport const REMOVE_CONFIRM_BEFORE_CALLING_DESCRIPTION =\n  () => `By turning off this setting, you won't be able to undo or turn on this setting again,\nas it has been deprecated. Are you sure you want to proceed?`;\n\n// Import/Export Application features\nexport const ERROR_IMPORTING_APPLICATION_TO_WORKSPACE = () =>\n  \"Error importing application. No workspace found\";\nexport const IMPORT_APPLICATION_MODAL_TITLE = () => \"Import application\";\nexport const IMPORT_APPLICATION_MODAL_LABEL = () =>\n  \"Where would you like to import your application from?\";\nexport const IMPORT_APP_FROM_FILE_TITLE = () => \"Import from file\";\nexport const UPLOADING_JSON = () => \"Uploading JSON file\";\nexport const UPLOADING_APPLICATION = () => \"Uploading application\";\nexport const IMPORT_APP_FROM_GIT_TITLE = () =>\n  \"Import from Git repository (Beta)\";\nexport const IMPORT_APP_FROM_FILE_MESSAGE = () =>\n  \"Drag and drop your file or upload from your computer\";\nexport const IMPORT_APP_FROM_GIT_MESSAGE = () =>\n  \"Import an application from its Git repository using its SSH URL\";\nexport const IMPORT_FROM_GIT_REPOSITORY = () => \"Import from Git repository\";\nexport const RECONNECT_MISSING_DATASOURCE_CREDENTIALS = () =>\n  \"Reconnect missing datasource credentials\";\nexport const RECONNECT_MISSING_DATASOURCE_CREDENTIALS_DESCRIPTION = () =>\n  \"Fill these with utmost care as the application will not behave normally otherwise\";\nexport const RECONNECT_DATASOURCE_SUCCESS_MESSAGE1 = () =>\n  \"These datasources were imported successfully!\";\nexport const RECONNECT_DATASOURCE_SUCCESS_MESSAGE2 = () =>\n  \"Please fill up the missing datasources\";\nexport const ADD_MISSING_DATASOURCES = () => \"Add missing datasources\";\nexport const SKIP_TO_APPLICATION_TOOLTIP_HEADER = () =>\n  \"This action is irreversible.\";\nexport const SKIP_TO_APPLICATION_TOOLTIP_DESCRIPTION = () =>\n  `Skip this step to configure datasources later`;\nexport const SKIP_TO_APPLICATION = () => \"Go to application\";\nexport const SKIP_CONFIGURATION = () => \"Skip configuration\";\nexport const SELECT_A_METHOD_TO_ADD_CREDENTIALS = () =>\n  \"Select a method to add credentials\";\nexport const DELETE_CONFIRMATION_MODAL_TITLE = () => `Are you sure?`;\nexport const DELETE_CONFIRMATION_MODAL_SUBTITLE = (\n  name?: string | null,\n  entityType?: string,\n) =>\n  `You want to remove ${name} from this ${\n    entityType === \"Application\" ? \"application\" : \"workspace\"\n  }`;\nexport const PARSING_ERROR = () =>\n  \"Syntax error: Unable to parse code, please check error logs to debug\";\nexport const PARSING_WARNING = () =>\n  \"Linting errors: Please resolve linting errors before using these functions\";\nexport const JS_FUNCTION_CREATE_SUCCESS = () =>\n  \"New JS function added successfully\";\nexport const JS_FUNCTION_UPDATE_SUCCESS = () =>\n  \"JS Function updated successfully\";\nexport const JS_FUNCTION_DELETE_SUCCESS = () =>\n  \"JS function deleted successfully\";\nexport const JS_OBJECT_BODY_INVALID = () => \"JS Object could not be parsed\";\nexport const JS_ACTION_EXECUTION_ERROR = (jsFunctionName: string) =>\n  `An error occured while trying to execute ${jsFunctionName}, please check error logs to debug`;\n//Editor Page\nexport const EDITOR_HEADER_SAVE_INDICATOR = () => \"Saved\";\n\n//Import Application Succesful\nexport const IMPORT_APP_SUCCESSFUL = () => \"Application imported successfully\";\n//Unable to import application in workspace\nexport const UNABLE_TO_IMPORT_APP = () =>\n  \"Unable to import application in workspace\";\n//\nexport const ERROR_IN_EXPORTING_APP = () =>\n  \"Error exporting application. Please try again.\";\n//undo redo\nexport const WIDGET_REMOVED = (widgetName: string) =>\n  `${widgetName} is removed`;\nexport const WIDGET_ADDED = (widgetName: string) =>\n  `${widgetName} is added back`;\nexport const BULK_WIDGET_REMOVED = (widgetName: string) =>\n  `${widgetName} widgets are removed`;\nexport const BULK_WIDGET_ADDED = (widgetName: string) =>\n  `${widgetName} widgets are added back`;\n\nexport const ACTION_CONFIGURATION_CHANGED = (name: string) =>\n  `${name}'s configuration has changed`;\n\n// Generate page from DB Messages\n\nexport const UNSUPPORTED_PLUGIN_DIALOG_TITLE = () =>\n  `We could not auto-generate a page from this Datasource`;\n\nexport const UNSUPPORTED_PLUGIN_DIALOG_SUBTITLE = () =>\n  `You can continue building your app with it using our drag & drop builder`;\nexport const UNSUPPORTED_PLUGIN_DIALOG_MAIN_HEADING = () =>\n  `Issue with auto generation`;\n\nexport const BUILD_FROM_SCRATCH_ACTION_SUBTITLE = () =>\n  \"Start from scratch and create your custom UI\";\n\nexport const BUILD_FROM_SCRATCH_ACTION_TITLE = () => \"Build with drag & drop\";\n\nexport const GENERATE_PAGE_ACTION_TITLE = () => \"Generate page with data\";\n\nexport const GENERATE_PAGE_FORM_TITLE = () => \"Generate from data\";\n\nexport const GEN_CRUD_SUCCESS_MESSAGE = () =>\n  \"Hurray! Your application is ready for use.\";\nexport const GEN_CRUD_INFO_DIALOG_TITLE = () => \"How it works?\";\nexport const GEN_CRUD_INFO_DIALOG_SUBTITLE = () =>\n  \"CRUD page is generated from selected datasource. You can use the form to modify data. Since all your data is already connected, you can add more queries and modify the bindings\";\nexport const GEN_CRUD_COLUMN_HEADER_TITLE = () => \"Column headers fetched\";\nexport const GEN_CRUD_NO_COLUMNS = () => \"No columns found\";\nexport const GEN_CRUD_DATASOURCE_DROPDOWN_LABEL = () => \"Select datasource\";\nexport const GEN_CRUD_TABLE_HEADER_LABEL = () => \"Table header index\";\nexport const GEN_CRUD_TABLE_HEADER_TOOLTIP_DESC = () =>\n  \"Row index of the column headers in the sheet table\";\n// Actions Right pane\nexport const SEE_CONNECTED_ENTITIES = () => \"See all connected entities\";\nexport const INCOMING_ENTITIES = () => \"Incoming entities\";\nexport const NO_INCOMING_ENTITIES = () => \"No incoming entities\";\nexport const OUTGOING_ENTITIES = () => \"Outgoing entities\";\nexport const NO_OUTGOING_ENTITIES = () => \"No outgoing entities\";\nexport const NO_CONNECTIONS = () => \"No connections to show here\";\nexport const BACK_TO_CANVAS = () => \"Back to canvas\";\nexport const SUGGESTED_WIDGET_DESCRIPTION = () =>\n  \"This will add a new widget to the canvas.\";\nexport const ADD_NEW_WIDGET = () => \"Add a widget\";\nexport const SUGGESTED_WIDGETS = () => \"Suggested widgets\";\nexport const SUGGESTED_WIDGET_TOOLTIP = () => \"Add to canvas\";\nexport const WELCOME_TOUR_STICKY_BUTTON_TEXT = () => \"Next mission\";\nexport const BINDING_SECTION_LABEL = () => \"Bindings\";\nexport const ADD_NEW_WIDGET_SUB_HEADING = () =>\n  \"Select how you want to display data.\";\nexport const CONNECT_EXISTING_WIDGET_LABEL = () => \"Select a widget\";\nexport const CONNECT_EXISTING_WIDGET_SUB_HEADING = () =>\n  \"Replace the data of an existing widget\";\nexport const NO_EXISTING_WIDGETS = () => \"Display data in a new widget\";\nexport const BINDING_WALKTHROUGH_TITLE = () => \"Display your data\";\nexport const BINDING_WALKTHROUGH_DESC = () =>\n  \"You can replace data of an existing widget of your page or you can select a new widget.\";\nexport const BINDINGS_DISABLED_TOOLTIP = () =>\n  \"You can display data when you have a successful response to your query\";\n\n// Data Sources pane\nexport const EMPTY_ACTIVE_DATA_SOURCES = () => \"No active datasources found.\";\n\n// Datasource structure\n\nexport const SCHEMA_NOT_AVAILABLE = () => \"Schema not available\";\nexport const TABLE_NOT_FOUND = () => \"Table not found.\";\nexport const DATASOURCE_STRUCTURE_INPUT_PLACEHOLDER_TEXT = (name: string) =>\n  `Tables in ${name}`;\nexport const SCHEMA_LABEL = () => \"Schema\";\nexport const STRUCTURE_NOT_FETCHED = () =>\n  \"We could not fetch the schema of the database.\";\nexport const TEST_DATASOURCE_AND_FIX_ERRORS = () =>\n  \"Test the datasource and fix the errors.\";\nexport const LOADING_SCHEMA = () => \"Loading schema...\";\nexport const SCHEMA_WALKTHROUGH_TITLE = () => \"Query data fast\";\nexport const SCHEMA_WALKTHROUGH_DESC = () =>\n  \"Select a template from a database table to quickly create your first query. \";\nexport const SUGGESTED_TAG = () => \"Suggested\";\n\n// structure - View Mode\n\nexport const DATASOURCE_VIEW_DATA_TAB = () => \"View data\";\nexport const DATASOURCE_CONFIGURATIONS_TAB = () => \"Configurations\";\nexport const DATASOURCE_NO_RECORDS_TO_SHOW = () => \"No data records to show\";\n\n// Git sync\nexport const CONNECTED_TO_GIT = () => \"Connected to Git\";\n\nexport const GIT_DISCONNECT_POPUP_TITLE = () =>\n  `This will disconnect the Git repository from this application`;\n\nexport const GIT_DISCONNECT_POPUP_SUBTITLE = () =>\n  `Git features will no more be shown for this application`;\nexport const GIT_DISCONNECT_POPUP_MAIN_HEADING = () => `Are you sure?`;\n\nexport const CONFIGURE_GIT = () => \"Configure Git\";\nexport const IMPORT_APP = () => \"Import app via Git\";\nexport const SETTINGS_GIT = () => \"Settings\";\n\nexport const GIT_CONNECTION = () => \"Git connection\";\nexport const GIT_IMPORT = () => \"Git import\";\nexport const MERGE = () => \"Merge\";\nexport const GIT_SETTINGS = () => \"Git settings\";\nexport const CONNECT_TO_GIT = () => \"Connect to Git repository\";\nexport const CONNECT_TO_GIT_SUBTITLE = () =>\n  \"Checkout branches, make commits, and deploy your application\";\nexport const REMOTE_URL = () => \"Remote URL\";\nexport const REMOTE_URL_INFO = () =>\n  `Create an empty Git repository and paste the remote URL here.`;\nexport const IMPORT_URL_INFO = () => `Paste the remote URL here:`;\nexport const REMOTE_URL_VIA = () => \"Remote URL via\";\n\nexport const USER_PROFILE_SETTINGS_TITLE = () => \"User settings\";\nexport const GIT_USER_SETTINGS_TITLE = () => \"Git author\";\n\nexport const USE_DEFAULT_CONFIGURATION = () => \"Use default configuration\";\nexport const AUTHOR_NAME_ONLY = () => \"Name\";\nexport const AUTHOR_EMAIL_ONLY = () => \"E-mail\";\nexport const AUTHOR_NAME = () => \"Author name\";\nexport const AUTHOR_EMAIL = () => \"Author email\";\nexport const AUTHOR_NAME_CANNOT_BE_EMPTY = () => \"Author name cannot be empty\";\nexport const AUTHOR_EMAIL_CANNOT_BE_EMPTY = () =>\n  \"Author email cannot be empty\";\n\nexport const NAME_YOUR_NEW_BRANCH = () => \"Name your new branch\";\nexport const SWITCH_BRANCHES = () => \"Switch branches\";\n\nexport const DOCUMENTATION = () => \"Documentation\";\nexport const DOCUMENTATION_TOOLTIP = () => \"Open docs in new tab\";\nexport const CONNECT = () => \"Connect\";\nexport const LATEST_DP_TITLE = () => \"Latest deployed preview\";\nexport const LATEST_DP_SUBTITLE = () => \"last deployed\";\nexport const CHECK_DP = () => \"CHECK\";\nexport const DEPLOY_TO_CLOUD = () => \"Deploy to cloud\";\nexport const DEPLOY_WITHOUT_GIT = () =>\n  \"Deploy your application without version control\";\nexport const COMMIT_CHANGES = () => \"Commit changes\";\nexport const COMMIT_TO = () => \"Commit to\";\nexport const COMMIT_AND_PUSH = () => \"Commit & push\";\nexport const PULL_CHANGES = () => \"Pull changes\";\nexport const REGENERATE_SSH_KEY = (keyType: string, keySize: number) =>\n  `Regenerate ${keyType} ${keySize} key`;\nexport const GENERATE_SSH_KEY = (keyType: string, keySize: number) =>\n  `${keyType} ${keySize} key`;\nexport const SSH_KEY_PLATFORM = (name: string) => ` (${name})`;\nexport const SSH_KEY = () => \"SSH key\";\nexport const COPY_SSH_KEY = () => \"Copy SSH key\";\nexport const SSH_KEY_GENERATED = () => \"SSH key generated\";\nexport const REGENERATE_KEY_CONFIRM_MESSAGE = () =>\n  \"This might cause the application to break. This key needs to be updated in your Git repository too!\";\nexport const DEPLOY_KEY_USAGE_GUIDE_MESSAGE = () =>\n  \"Paste this key in your repository settings and give it write access.\";\nexport const COMMITTING_AND_PUSHING_CHANGES = () =>\n  \"Committing and pushing changes...\";\nexport const DISCARDING_AND_PULLING_CHANGES = () =>\n  \"Discarding and pulling changes...\";\nexport const DISCARD_SUCCESS = () => \"Discarded changes successfully.\";\nexport const DISCARD_AND_PULL_SUCCESS = () => \"Pulled from remote successfully\";\n\nexport const IS_MERGING = () => \"Merging changes...\";\n\nexport const MERGE_CHANGES = () => \"Merge changes\";\nexport const SELECT_BRANCH_TO_MERGE = () => \"Select branch to merge\";\nexport const CONNECT_GIT = () => \"Connect Git\";\nexport const CONNECT_GIT_BETA = () => \"Connect Git (Beta)\";\nexport const RETRY = () => \"Retry\";\nexport const CREATE_NEW_BRANCH = () => \"Create new branch\";\nexport const ERROR_WHILE_PULLING_CHANGES = () => \"ERROR WHILE PULLING CHANGES\";\nexport const SUBMIT = () => \"Submit\";\nexport const GIT_USER_UPDATED_SUCCESSFULLY = () =>\n  \"Git user updated successfully\";\nexport const REMOTE_URL_INPUT_PLACEHOLDER = () =>\n  \"git@example.com:user/repository.git\";\nexport const GIT_COMMIT_MESSAGE_PLACEHOLDER = () => \"Your commit message here\";\nexport const INVALID_USER_DETAILS_MSG = () => \"Please enter valid user details\";\nexport const PASTE_SSH_URL_INFO = () =>\n  \"Please enter a valid SSH URL of your repository\";\nexport const GENERATE_KEY = () => \"Generate key\";\nexport const UPDATE_CONFIG = () => \"Update config\";\nexport const CONNECT_BTN_LABEL = () => \"Connect\";\nexport const IMPORT_BTN_LABEL = () => \"Import\";\nexport const FETCH_GIT_STATUS = () => \"Fetching status...\";\nexport const FETCH_MERGE_STATUS = () => \"Checking mergeability...\";\nexport const NO_MERGE_CONFLICT = () =>\n  \"This branch has no conflicts with the base branch.\";\nexport const MERGE_CONFLICT_ERROR = () => \"Merge conflicts found!\";\nexport const FETCH_MERGE_STATUS_FAILURE = () => \"Unable to fetch merge status\";\nexport const GIT_UPSTREAM_CHANGES = () =>\n  \"Looks like there are pending upstream changes. We will pull the changes and push them to your repository.\";\nexport const GIT_CONFLICTING_INFO = () =>\n  \"Please resolve the merge conflicts manually on your repository.\";\nexport const CANNOT_PULL_WITH_LOCAL_UNCOMMITTED_CHANGES = () =>\n  \"You have uncommitted changes. Please commit or discard before pulling the remote changes.\";\nexport const CANNOT_MERGE_DUE_TO_UNCOMMITTED_CHANGES = () =>\n  \"Your current branch has uncommitted changes. Please commit them before proceeding to merge.\";\n\nexport const DISCONNECT_SERVICE_SUBHEADER = () =>\n  \"Changes to this section can disrupt user authentication. Proceed with caution.\";\nexport const DISCONNECT_SERVICE_WARNING = () =>\n  \"will be removed as primary method of authentication\";\nexport const AUTHENTICATION_METHOD_ENABLED = (methodName: string) => `\n  ${methodName} authentication is enabled\n`;\n\nexport const REVOKE_EXISTING_REPOSITORIES = () =>\n  \"Revoke existing repositories\";\nexport const REVOKE_EXISTING_REPOSITORIES_INFO = () =>\n  \"To make space for newer repositories, you can remove existing repositories.\";\nexport const CONTACT_SUPPORT = () => \"Contact support\";\nexport const CONTACT_SALES_MESSAGE_ON_INTERCOM = (workspaceName: string) =>\n  `Hey there, thanks for getting in touch! We understand that you’d like to extend the number of private repos for your ${workspaceName}. Could you tell us how many private repositories you require and why? We'll get back to you in a short while.`;\nexport const REPOSITORY_LIMIT_REACHED = () => \"Repository limit reached\";\nexport const REPOSITORY_LIMIT_REACHED_INFO = () =>\n  \"Adding and using upto 3 repositories is free. To add more repositories, kindly upgrade.\";\nexport const APPLICATION_IMPORT_SUCCESS = () =>\n  `Your application is ready to use.`;\nexport const APPLICATION_IMPORT_SUCCESS_DESCRIPTION = () =>\n  \"All your datasources are configured and ready to use.\";\nexport const NONE_REVERSIBLE_MESSAGE = () =>\n  \"This action is non-reversible. Please proceed with caution.\";\nexport const CONTACT_SUPPORT_TO_UPGRADE = () =>\n  \"Please contact support to upgrade. You can add unlimited private repositories in upgraded plan.\";\nexport const REVOKE_CAUSE_APPLICATION_BREAK = () =>\n  \"Revoking your repository might cause the application to break.\";\nexport const REVOKE_GIT = () => \"Revoke access\";\nexport const DISCONNECT = () => \"Disconnect\";\nexport const REVOKE = () => \"Revoke\";\nexport const REVOKE_ACCESS = () => \"Revoke Access\";\nexport const GIT_DISCONNECTION_SUBMENU = () => \"Git Connection > Disconnect\";\nexport const DISCONNECT_FROM_GIT = (name: string) =>\n  `Disconnect ${name} from Git`;\nexport const GIT_REVOKE_ACCESS = (name: string) => `Revoke access to ${name}`;\nexport const GIT_TYPE_REPO_NAME_FOR_REVOKING_ACCESS = (name: string) =>\n  `Type “${name}” in the input box to revoke access.`;\nexport const APPLICATION_NAME = () => \"Application name\";\nexport const OPEN_REPO = () => \"Open repository\";\nexport const CONNECTING_REPO = () => \"Connecting to Git repository\";\nexport const IMPORTING_APP_FROM_GIT = () => \"Importing application from Git\";\nexport const CONFIRM_SSH_KEY = () =>\n  \"Please make sure your SSH key has write access.\";\nexport const READ_DOCUMENTATION = () => \"Read documentation\";\nexport const LEARN_MORE = () => \"Learn more\";\n\nexport const I_UNDERSTAND = () => \"I understand\";\nexport const GIT_NO_UPDATED_TOOLTIP = () => \"No new updates to push\";\n\nexport const FIND_OR_CREATE_A_BRANCH = () => \"Find or create a branch\";\nexport const SYNC_BRANCHES = () => \"Sync branches\";\n\nexport const CONFLICTS_FOUND = () =>\n  \"Conflicts found. Please resolve them and pull again.\";\nexport const UNCOMMITTED_CHANGES = () => \"You have uncommitted changes\";\nexport const NO_COMMITS_TO_PULL = () =>\n  \"No commits to pull. This branch is in sync with the remote repository\";\nexport const CONFLICTS_FOUND_WHILE_PULLING_CHANGES = () =>\n  \"Conflicts found while pulling changes.\";\nexport const NOT_LIVE_FOR_YOU_YET = () => \"It's not live for you yet\";\nexport const COMING_SOON = () => \"Coming Soon!\";\nexport const CONNECTING_TO_REPO_DISABLED = () =>\n  \"Connecting to a Git repository is disabled\";\nexport const DURING_ONBOARDING_TOUR = () => \"during the onboarding tour\";\nexport const MERGED_SUCCESSFULLY = () => \"Merged successfully\";\nexport const DISCARD_CHANGES_WARNING = () =>\n  \"This action will replace your local changes with the latest remote version.\";\nexport const DISCARD_CHANGES = () => \"Discard & pull\";\n\n// GIT DEPLOY begin\nexport const DEPLOY = () => \"Deploy\";\nexport const DEPLOY_YOUR_APPLICATION = () => \"Deploy your application\";\nexport const CHANGES_APP_SETTINGS = () => \"Application settings modified\";\nexport const CHANGES_THEME = () => \"Theme modified\";\nexport const CHANGES_SINCE_LAST_DEPLOYMENT = () =>\n  \"Changes since last deployment\";\nexport const CHANGES_ONLY_USER = () => \"Changes since last commit\";\nexport const CHANGES_MADE_SINCE_LAST_COMMIT = () =>\n  \"Changes made since last commit\";\nexport const CHANGES_ONLY_MIGRATION = () =>\n  \"Appsmith update changes since last commit\";\nexport const CHANGES_USER_AND_MIGRATION = () =>\n  \"Appsmith update and user changes since last commit\";\nexport const CURRENT_PAGE_DISCARD_WARNING = (page: string) =>\n  `Current page (${page}) is in the discard list.`;\nexport const DISCARD_MESSAGE = () =>\n  `Some changes may reappear after discarding them, these changes support new features in Appsmith. You can safely commit them to your repository.`;\n// GIT DEPLOY end\n\n// GIT CHANGE LIST begin\nexport const CHANGES_FROM_APPSMITH = () =>\n  \"Some changes are platform upgrades from Appsmith.\";\nexport const TRY_TO_PULL = () =>\n  \"We will try to pull before pushing your changes.\";\nexport const NOT_PUSHED_YET = () =>\n  \"These are the commits that haven't been pushed to remote yet.\";\n// GIT CHANGE LIST end\n\n// GIT DELETE BRANCH begin\nexport const DELETE = () => \"Delete\";\nexport const LOCAL_BRANCHES = () => \"Local branches\";\nexport const REMOTE_BRANCHES = () => \"Remote branches\";\n\nexport const DELETE_BRANCH_SUCCESS = (branchName: string) =>\n  `Successfully deleted branch: ${branchName}`;\n\n// warnings\nexport const DELETE_BRANCH_WARNING_CHECKED_OUT = (currentBranchName: string) =>\n  `Cannot delete checked out branch. Please check out other branch before deleting ${currentBranchName}.`;\nexport const DELETE_BRANCH_WARNING_DEFAULT = (defaultBranchName: string) =>\n  `Cannot delete default branch: ${defaultBranchName}`;\n// GIT DELETE BRANCH end\n\n// GIT ERRORS begin\nexport const ERROR_GIT_AUTH_FAIL = () =>\n  \"Please make sure that regenerated SSH key is added and has write access to the repository.\";\nexport const ERROR_GIT_INVALID_REMOTE = () =>\n  \"Either the remote repository doesn't exist or is unreachable.\";\n// GIT ERRORS end\n\n// Git Connect V2\nexport const CHOOSE_A_GIT_PROVIDER_STEP = () => \"Choose a Git provider\";\nexport const GENERATE_SSH_KEY_STEP = () => \"Generate SSH key\";\nexport const ADD_DEPLOY_KEY_STEP = () => \"Add deploy key\";\nexport const CHOOSE_GIT_PROVIDER_QUESTION = () =>\n  \"To begin with, choose your Git service provider\";\nexport const IS_EMPTY_REPO_QUESTION = () =>\n  \"Do you have an existing empty repository to connect to Git?\";\nexport const HOW_TO_CREATE_EMPTY_REPO = () => \"How to create a new repository?\";\nexport const IMPORT_APP_IF_NOT_EMPTY = () =>\n  \"If you already have an app connected to Git, you can import it to the workspace.\";\nexport const I_HAVE_EXISTING_REPO = () =>\n  \"I have an existing appsmith app connected to Git\";\nexport const ERROR_REPO_NOT_EMPTY_TITLE = () =>\n  \"The repo you added isn't empty\";\nexport const ERROR_REPO_NOT_EMPTY_MESSAGE = () =>\n  \"Kindly create a new repository and provide its remote SSH URL here. We require an empty repository to continue.\";\nexport const READ_DOCS = () => \"Read Docs\";\nexport const COPY_SSH_URL_MESSAGE = () =>\n  \"To generate the SSH Key, in your repo, copy the Remote SSH URL & paste it in the input field below.\";\nexport const REMOTE_URL_INPUT_LABEL = () => \"Remote SSH URL\";\nexport const HOW_TO_COPY_REMOTE_URL = () =>\n  \"How to copy & paste SSH remote URL\";\nexport const ERROR_SSH_KEY_MISCONF_TITLE = () => \"SSH key misconfiguration\";\nexport const ERROR_SSH_KEY_MISCONF_MESSAGE = () =>\n  \"It seems that your SSH key hasn't been added to your repository. To proceed, please revisit the steps below and configure your SSH key correctly.\";\nexport const ADD_DEPLOY_KEY_STEP_TITLE = () =>\n  \"Add deploy key & give write access\";\nexport const HOW_TO_ADD_DEPLOY_KEY = () =>\n  \"How to paste SSH Key in repo and give write access?\";\nexport const CONSENT_ADDED_DEPLOY_KEY = () =>\n  \"I've added the deploy key and gave it write access\";\nexport const PREVIOUS_STEP = () => \"Previous step\";\nexport const GIT_AUTHOR = () => \"Git author\";\nexport const DISCONNECT_GIT = () => \"Disconnect Git\";\nexport const DISCONNECT_GIT_MESSAGE = () =>\n  \"This is irreversible. If you wish to reconnect, you will have to connect a new empty repository.\";\nexport const AUTOCOMMIT = () => \"Auto - commit\";\nexport const AUTOCOMMIT_MESSAGE = () =>\n  \"Enable/disable auto migrations from Appsmith.\";\nexport const AUTOCOMMIT_ENABLE = () => \"Enable auto - commit\";\nexport const AUTOCOMMIT_DISABLE = () => \"Disable auto - commit\";\nexport const AUTOCOMMIT_CONFIRM_DISABLE_MESSAGE = () =>\n  \"Disabling auto-commit may result in uncommitted system changes after an Appsmith instance upgrade, requiring manual handling and potential discrepancies in Git versioning.\";\nexport const AUTOCOMMIT_IN_PROGRESS_MESSAGE = () =>\n  \"Auto-committing Appsmith upgrade changes...\";\nexport const AUTOCOMMIT_ENABLED_TOAST = () =>\n  \"Auto-commit enabled successfully\";\nexport const AUTOCOMMIT_DISABLED_TOAST = () =>\n  \"Auto-commit disabled successfully\";\nexport const NEED_EMPTY_REPO_MESSAGE = () =>\n  \"You need an empty repository to connect to Git on Appsmith, please create one on your Git service provider to continue.\";\nexport const GIT_IMPORT_WAITING = () =>\n  \"Please wait while we import the app...\";\nexport const GIT_CONNECT_WAITING = () =>\n  \"Please wait while we connect to Git...\";\nexport const CONNECT_GIT_TEXT = () => \"Connect Git\";\nexport const ERROR_SSH_RECONNECT_MESSAGE = () =>\n  \"We couldn't connect to the repo due to a missing deploy key. You can fix this in two ways:\";\nexport const ERROR_SSH_RECONNECT_OPTION1 = () =>\n  \"Copy the SSH key below and add it to your repository.\";\nexport const ERROR_SSH_RECONNECT_OPTION2 = () =>\n  \"If you want to connect a new repository, you can disconnect and do that instead.\";\nexport const COPIED_SSH_KEY = () => \"Copied SSH key\";\nexport const NO_COPIED_SSH_KEY = () => \"Could not copy SSH key\";\n// Git Connect V2 end\n\n// Git Branch Protection\nexport const UPDATE = () => \"Update\";\nexport const DEFAULT_BRANCH = () => \"Default branch\";\nexport const DEFAULT_BRANCH_DESC = () =>\n  \"This is the base branch of the app. Users launching the app from the dashboard will see the deployed version from this branch.\";\nexport const BRANCH_PROTECTION = () => \"Branch protection\";\nexport const BRANCH_PROTECTION_DESC = () =>\n  \"Protected branches enable you to enforce Git workflows. Changes to the app are not allowed in the protected branches.\";\nexport const GO_TO_SETTINGS = () => \"Go to settings\";\nexport const NOW_PROTECT_BRANCH = () =>\n  \"You can now protect your default branch.\";\nexport const APPSMITH_ENTERPRISE = () => \"Appsmith Enterprise\";\nexport const PROTECT_BRANCH_SUCCESS = () => \"Changed protected branches\";\nexport const UPDATE_DEFAULT_BRANCH_SUCCESS = (branchName: string) =>\n  `Updated default branch ${!!branchName ? `to ${branchName}` : \"\"}`;\nexport const CONTACT_ADMIN_FOR_GIT = () =>\n  \"Please contact your workspace admin to connect your app to a git repo\";\nexport const BRANCH_PROTECTION_CALLOUT_MSG = () =>\n  \"The branch is protected; please switch to or create a new branch to edit the app.\";\nexport const BRANCH_PROTECTION_CALLOUT_CREATE_BRANCH = () =>\n  \"Create new branch\";\nexport const BRANCH_PROTECTION_CALLOUT_UNPROTECT = () => \"Unprotect branch\";\nexport const BRANCH_PROTECTION_CALLOUT_UNPROTECT_LOADING = () =>\n  \"Unprotecting branch ...\";\nexport const BRANCH_PROTECTION_PROTECTED = () => \"Protected\";\n// Git Branch Protection end\n\n// Git Connection Success\nexport const GIT_CONNECT_SUCCESS_TITLE = () => \"Successfully connected to Git\";\nexport const GIT_CONNECT_SUCCESS_MESSAGE = () =>\n  \"Now you can start collaborating with your team members by committing, merging and deploying your app\";\nexport const GIT_CONNECT_SUCCESS_ACTION_CONTINUE = () =>\n  \"Continue to edit application\";\nexport const GIT_CONNECT_SUCCESS_ACTION_SETTINGS = () => \"Protect your branch\";\nexport const GIT_CONNECT_SUCCESS_PROTECTION_MSG = () =>\n  \"We recommend protecting your default branch to have a seamless collaboration.\";\nexport const GIT_CONNECT_SUCCESS_REPO_NAME = () => \"Repository name\";\nexport const GIT_CONNECT_SUCCESS_DEFAULT_BRANCH = () => \"Default branch\";\nexport const GIT_CONNECT_SUCCESS_DEFAULT_BRANCH_TOOLTIP = () =>\n  \"This is the base branch of the app. Users launching the app from the dashboard will see the deployed version from this branch.\";\nexport const GIT_CONNECT_SUCCESS_PROTECTION_DOC_CTA = () =>\n  \"Learn more about branch protection\";\n// Git Connection Success end\n\nexport const GENERAL = () => \"General\";\nexport const BRANCH = () => \"Branch\";\n\nexport const CONTINUOUS_DELIVERY = () => \"Continuous delivery\";\nexport const CONFIGURE_CD_TITLE = () => \"Configure continuous delivery\";\nexport const CONFIGURE_CD_DESC = () =>\n  \"To automatically trigger a pull when changes occur on the remote branch, consider upgrading to our enterprise plan for enhanced functionality\";\nexport const TRY_APPSMITH_ENTERPRISE = () => \"Try Appsmith Enterprise\";\n\nexport const NAV_DESCRIPTION = () =>\n  `Navigate to any page, widget or file across this project.`;\nexport const ACTION_OPERATION_DESCRIPTION = () =>\n  `Create a new query, API or JS Object`;\nexport const TABLE_WIDGET_VALIDATION_ASSIST_PROMPT = () =>\n  `Access the current cell using `;\n\nexport const TRIGGER_ACTION_VALIDATION_ERROR = (\n  functionName: string,\n  argumentName: string,\n  expectedType: string,\n  received: string,\n) =>\n  `${functionName} expected ${expectedType} for '${argumentName}' argument but received ${received}`;\n\n// Comment card tooltips\nexport const MORE_OPTIONS = () => \"More options\";\nexport const ADD_REACTION = () => \"Add reaction\";\nexport const RESOLVE_THREAD = () => \"Resolve thread\";\nexport const RESOLVED_THREAD = () => \"Resolved thread\";\nexport const EMOJI = () => \"Emoji\";\n\n// Sniping mode messages\nexport const SNIPING_SELECT_WIDGET_AGAIN = () =>\n  \"Unable to detect the widget, please select the widget again.\";\n\nexport const SNIPING_NOT_SUPPORTED = () =>\n  \"Binding on selection is not supported for this type of widget!\";\n\n//First Time User Onboarding\n//Checklist page\nexport enum ONBOARDING_CHECKLIST_ACTIONS {\n  CONNECT_A_DATASOURCE = \"Connect datasource\",\n  CREATE_A_QUERY = \"Create a query\",\n  ADD_WIDGETS = \"Add widgets\",\n  CONNECT_DATA_TO_WIDGET = \"Connect data to widget\",\n  DEPLOY_APPLICATIONS = \"Deploy application\",\n}\n\nexport const ONBOARDING_CHECKLIST_BANNER_HEADER = () =>\n  \"Amazing work! You’ve explored the basics of Appsmith\";\nexport const ONBOARDING_CHECKLIST_BANNER_BODY = () =>\n  \"You can carry on here, or explore the homepage to see how your projects are stored.\";\nexport const ONBOARDING_CHECKLIST_BANNER_BUTTON = () => \"Explore homepage\";\nexport const ONBOARDING_SKIPPED_FIRST_TIME_USER = () =>\n  \"Skipped onboarding tour\";\nexport const ONBOARDING_CHECKLIST_HEADER = () => \"👋 Welcome to Appsmith!\";\nexport const ONBOARDING_CHECKLIST_BODY = () =>\n  \"Let’s get you started on your first application, explore Appsmith yourself or follow our guide below to discover what Appsmith can do.\";\nexport const ONBOARDING_CHECKLIST_COMPLETE_TEXT = () => \"complete\";\n\nexport const SIGNPOSTING_POPUP_SUBTITLE = () =>\n  \"Here’s what you need to do to build your first app:\";\nexport const SIGNPOSTING_SUCCESS_POPUP = {\n  title: () => \"🎉 Awesome! You’ve explored the basics of Appsmith\",\n  subtitle: () =>\n    \"You can carry on building the app from here on. If you are still not sure, checkout our documentation or try guided tour.\",\n};\n\nexport const ONBOARDING_CHECKLIST_CONNECT_DATA_SOURCE = {\n  bold: () => \"Connect to a datasource\",\n  normal: () => \"So your UI can talk to your data.\",\n};\n\nexport const ONBOARDING_CHECKLIST_CREATE_A_QUERY = {\n  bold: () => \"Write your first query\",\n  normal: () => \"To get the data to present in widgets\",\n};\n\nexport const ONBOARDING_CHECKLIST_ADD_WIDGETS = {\n  bold: () => \"Drop a widget on the canvas\",\n  normal: () => \"To start building your UI\",\n};\n\nexport const ONBOARDING_CHECKLIST_CONNECT_DATA_TO_WIDGET = {\n  bold: () => \"Connect queries and widgets\",\n  normal: () => \"using query names in bindings {{}}\",\n};\n\nexport const ONBOARDING_CHECKLIST_DEPLOY_APPLICATIONS = {\n  bold: () => \"Deploy your application\",\n  normal: () => \"To see your live app and share it with end-users.\",\n};\n\nexport const SIGNPOSTING_LAST_STEP_TOOLTIP = () => \"Almost there!\";\nexport const SIGNPOSTING_TOOLTIP = {\n  DEFAULT: {\n    content: () =>\n      \"Finish these 5 steps to learn the basics in-order to build an app & deploy it. This would take 5 mins of your time.\",\n  },\n  CONNECT_A_DATASOURCE: {\n    content: () => \"Let's add a datasource\",\n  },\n  CREATE_QUERY: {\n    content: () => \"Datasource connected. Let's write your first query now.\",\n  },\n  ADD_WIDGET: {\n    content: () => \"The query seems fine, right? Let's build our UI next.\",\n  },\n  CONNECT_DATA_TO_WIDGET: {\n    content: () =>\n      \"That was easy. Connect the query you wrote in Step 2 to present data in this widget.\",\n  },\n  DEPLOY_APPLICATION: {\n    content: () =>\n      \"Deploy your app to see it live and share it with your users.\",\n  },\n  DOCUMENTATION: {\n    content: () => \"Open documentation\",\n  },\n};\n\nexport const ONBOARDING_CHECKLIST_FOOTER = () =>\n  \"Not sure where to start? Take the welcome tour\";\n\nexport const ONBOARDING_TELEMETRY_POPUP = () =>\n  \"We only collect usage data to make Appsmith better for everyone. Visit admin settings to toggle this off.\";\n\n//Introduction modal\nexport const HOW_APPSMITH_WORKS = () =>\n  \"Here’s a quick overview of how Appsmith works. \";\nexport const ONBOARDING_INTRO_CONNECT_YOUR_DATABASE = () =>\n  \"Connect to your database or APIs\";\nexport const DRAG_AND_DROP = () =>\n  \"Drag and drop pre-built widgets to build UI\";\nexport const CUSTOMIZE_WIDGET_STYLING = () =>\n  \"Customise the styling of every widget. Then bind your data to the widget and use JS to write any logic.\";\nexport const ONBOARDING_INTRO_PUBLISH = () =>\n  \"Publish & Share with permissions\";\nexport const CHOOSE_ACCESS_CONTROL_ROLES = () =>\n  \"Instantly publish & share your apps with users. Choose from pre-defined access control roles.\";\nexport const BUILD_MY_FIRST_APP = () => \"Build on my own\";\nexport const ONBOARDING_INTRO_FOOTER = () =>\n  \"Let’s start building your first application\";\nexport const START_TUTORIAL = () => \"Start tutorial\";\nexport const WELCOME_TO_APPSMITH = () => \"Welcome to Appsmith!\";\nexport const QUERY_YOUR_DATABASE = () =>\n  \"Query your own database or API inside Appsmith. Write JS to construct dynamic queries.\";\nexport const SIGNPOSTING_INFO_MENU = {\n  documentation: () => \"Open documentation\",\n};\n\n//Statusbar\nexport const ONBOARDING_STATUS_STEPS_FIRST = () => \"First, add a datasource\";\nexport const ONBOARDING_STATUS_STEPS_FIRST_ALT = () => \"Next, add a datasource\";\nexport const ONBOARDING_STATUS_STEPS_SECOND = () => \"Next, create a query\";\nexport const ONBOARDING_STATUS_STEPS_THIRD = () => \"Next, add a widget\";\nexport const ONBOARDING_STATUS_STEPS_THIRD_ALT = () => \"First, add a widget\";\nexport const ONBOARDING_STATUS_STEPS_FOURTH = () =>\n  \"Next, connect data to widget\";\nexport const ONBOARDING_STATUS_STEPS_FIVETH = () =>\n  \"Next, deploy your application\";\nexport const ONBOARDING_STATUS_STEPS_SIXTH = () => \"Completed 🎉\";\nexport const ONBOARDING_STATUS_GET_STARTED = () => \"Get started\";\n\n//Tasks\n//1. datasource\nexport const ONBOARDING_TASK_DATASOURCE_HEADER = () =>\n  \"Start by adding your first datasource\";\nexport const ONBOARDING_TASK_DATASOURCE_BODY = () =>\n  \"Adding a datasource makes creating applications more powerful. Don’t worry if you don’t have any data on hand, we have a sample dataset that you can use.\";\nexport const ONBOARDING_TASK_DATASOURCE_BUTTON = () => \"Add a datasource\";\nexport const ONBOARDING_TASK_DATASOURCE_FOOTER_ACTION = () => \"add a widget\";\nexport const ONBOARDING_TASK_DATASOURCE_FOOTER = () => \"first.\";\n//2. query\nexport const ONBOARDING_TASK_QUERY_HEADER = () => \"Next, create a query\";\nexport const ONBOARDING_TASK_QUERY_BODY = () =>\n  \"Great job adding a datasource! The next thing you can do is create a query on your data.\";\nexport const ONBOARDING_TASK_QUERY_BUTTON = () => \"Create a query\";\nexport const ONBOARDING_TASK_QUERY_FOOTER_ACTION = () => \"add a widget\";\n//2. widget\nexport const ONBOARDING_TASK_WIDGET_HEADER = () =>\n  \"Next, add a widget to start displaying data\";\nexport const ONBOARDING_TASK_WIDGET_BODY = () =>\n  \"Great job adding a datasource! The next thing you can do is add widget to start visualizing your data.\";\nexport const ONBOARDING_TASK_WIDGET_BUTTON = () => \"Add a widget\";\nexport const ONBOARDING_TASK_WIDGET_FOOTER_ACTION = () =>\n  \"deploy your application\";\nexport const ONBOARDING_TASK_FOOTER = () => \"Alternatively, you can also\";\n\nexport const USE_SNIPPET = () => \"Snippet\";\nexport const SNIPPET_TOOLTIP = () => \"Search code snippets\";\n\n//Welcome page\nexport const WELCOME_HEADER = () => \"Almost there\";\nexport const WELCOME_BODY = () => \"Let's setup your account first\";\nexport const WELCOME_ACTION = () => \"Get started\";\nexport const PRODUCT_UPDATES_CONFIRMATION_LABEL = () =>\n  \"I accept receiving security and product updates\";\n\n// API Editor\nexport const API_EDITOR_TAB_TITLES = {\n  HEADERS: () => \"Headers\",\n  PARAMS: () => \"Params\",\n  BODY: () => \"Body\",\n  PAGINATION: () => \"Pagination\",\n  AUTHENTICATION: () => \"Authentication\",\n  SETTINGS: () => \"Settings\",\n};\nexport const ACTION_EXECUTION_MESSAGE = (actionType: string) =>\n  `Sending the ${actionType} request`;\nexport const ACTION_EXECUTION_CANCEL = () => \"Cancel request\";\n\nexport const WELCOME_FORM_HEADER = () => \"Let us get to know you better!\";\nexport const WELCOME_FORM_FIRST_NAME = () => \"First name\";\nexport const WELCOME_FORM_LAST_NAME = () => \"Last name\";\nexport const WELCOME_FORM_EMAIL_ID = () => \"Email\";\nexport const WELCOME_FORM_CREATE_PASSWORD = () => \"Enter password\";\nexport const WELCOME_FORM_VERIFY_PASSWORD = () => \"Verify password\";\nexport const WELCOME_FORM_DATA_COLLECTION_HEADER = () =>\n  \"Usage data preference\";\nexport const WELCOME_FORM_DATA_COLLECTION_BODY = () =>\n  \"Share anonymous usage data to help improve the product.\";\nexport const WELCOME_FORM_DATA_COLLECTION_LINK = () => \"See what is shared\";\nexport const WELCOME_FORM_DATA_COLLECTION_LABEL_ENABLE = () =>\n  \"Share data & make Appsmith better!\";\nexport const WELCOME_FORM_DATA_COLLECTION_LABEL_DISABLE = () =>\n  \"Don't share any data\";\nexport const WELCOME_FORM_NEWLETTER_HEADER = () => \"Stay in touch\";\nexport const WELCOME_FORM_NEWLETTER_LABEL = () =>\n  \"Get updates about what we are cooking. We will not spam you.\";\nexport const WELCOME_FORM_SUBMIT_LABEL = () => \"Make your first app\";\n\n//help tooltips\nexport const ACCOUNT_TOOLTIP = () => \"Your account\";\nexport const RENAME_APPLICATION_TOOLTIP = () => \"Rename application\";\nexport const LOGO_TOOLTIP = () => \"Back to homepage\";\nexport const ADD_PAGE_TOOLTIP = () => \"Add a new page\";\nexport const ADD_DATASOURCE_TOOLTIP = () =>\n  \"Add datasource or create new query\";\nexport const ADD_WIDGET_TOOLTIP = () => \"Find and add a widget\";\nexport const HELP_RESOURCE_TOOLTIP = () => \"Help and resources\";\nexport const COPY_ELEMENT = () => \"Copy element\";\nexport const SHOW_TEMPLATES = () => \"Add a query\";\nexport const LAYOUT_DROPDOWN_TOOLTIP = () =>\n  \"Choose how your application looks on desktop, tablet and mobile devices\";\nexport const DEPLOY_BUTTON_TOOLTIP = () =>\n  \"Deploy the current version of the application\";\nexport const SHARE_BUTTON_TOOLTIP = () => \"Invite your team to Appsmith\";\nexport const SHARE_BUTTON_TOOLTIP_WITH_USER = (length: number) => () =>\n  `Shared with ${length} other`;\nexport const DEBUGGER_TOOLTIP = () => \"Open Debugger\";\nexport const PAGE_PROPERTIES_TOOLTIP = () => \"Page properties\";\nexport const CLEAR_LOG_TOOLTIP = () => \"Clear logs\";\nexport const ADD_JS_ACTION = () => \"Add a new JS Object\";\nexport const ENTITY_MORE_ACTIONS_TOOLTIP = () => \"More actions\";\nexport const NOTIFICATIONS_TOOLTIP = () => \"Notifications\";\n\n// Navigation Menu\nexport const DEPLOY_MENU_OPTION = () => \"Deploy\";\nexport const CURRENT_DEPLOY_PREVIEW_OPTION = () => \"Current deployed version\";\nexport const CONNECT_TO_GIT_OPTION = () => \"Connect to Git repository\";\n//\nexport const GO_TO_PAGE = () => \"Go to page\";\nexport const DEFAULT_PAGE_TOOLTIP = () => \"Default page\";\nexport const HIDDEN_TOOLTIP = () => \"Hidden\";\nexport const CLONE_TOOLTIP = () => \"Clone\";\nexport const DELETE_TOOLTIP = () => \"Delete\";\nexport const SETTINGS_TOOLTIP = () => \"Settings\";\n\n//settings\nexport const ADMIN_SETTINGS = () => \"Admin settings\";\nexport const HELP = () => \"Help\";\nexport const RESTART_BANNER_BODY = () =>\n  \"Hang in there. This should be done soon.\";\nexport const RESTART_BANNER_HEADER = () => \"Restarting your server\";\nexport const RESTART_ERROR_BODY = () =>\n  \"You can try restarting the server again for the settings to take place.\";\nexport const RESTART_ERROR_HEADER = () => \"Restarting failed\";\nexport const RETRY_BUTTON = () => \"Retry\";\nexport const INFO_VERSION_MISMATCH_FOUND_RELOAD_REQUEST = () =>\n  \"Hey! There is a new version of Appsmith available. Please consider refreshing your window.\";\nexport const TEST_EMAIL_SUCCESS = (email: string) => () =>\n  `Test email sent, please check the inbox of ${email}`;\nexport const TEST_EMAIL_SUCCESS_TROUBLESHOOT = () => \"Troubleshoot\";\nexport const TEST_EMAIL_FAILURE = () => \"Sending test email failed\";\n\nexport const ADMIN_SETTINGS_EMAIL_WARNING = () =>\n  \"Please ensure that the SMTP server is correctly configured. This will be used to send emails about forgot password and email verification.\";\nexport const DISCONNECT_AUTH_ERROR = () =>\n  \"Cannot disconnect the only connected authentication method.\";\nexport const MANDATORY_FIELDS_ERROR = () => \"Mandatory fields cannot be empty\";\nexport const FORM_LOGIN_DESC = () =>\n  \"Enable your workspace to sign in with Appsmith Form.\";\nexport const GOOGLE_AUTH_DESC = () =>\n  \"Enable your workspace to sign in with Google (OAuth 2.0) single sign-on (SSO).\";\nexport const GITHUB_AUTH_DESC = () =>\n  \"Enable your workspace to sign in with GitHub (OAuth 2.0) single sign-on (SSO).\";\nexport const SAPCDC_AUTH_DESC = () =>\n  \"Enable your workspace to sign in with SAP CDC (OAuth 2.0) single sign-on (SSO).\";\nexport const SAML_AUTH_DESC = () =>\n  \"Enable your workspace to sign in with your preferred SAML2 compliant provider.\";\nexport const OIDC_AUTH_DESC = () =>\n  \"Enable your workspace to sign in with your preferred OIDC compliant provider.\";\nexport const SAVE_BUTTON = () => \"Save\";\nexport const SAVE_AND_RESTART_BUTTON = () => \"Save & Restart\";\nexport const SAVE_AND_REFRESH_BUTTON = () => \"Save & Refresh\";\nexport const RESET_BUTTON = () => \"Reset\";\nexport const BUSINESS_TAG = () => \"Business\";\nexport const ENTERPRISE_TAG = () => \"Enterprise\";\n\n// Upgrade pages begin\nexport const AVAILABLE_ON_BUSINESS = () => \"Available on a business plan only\";\nexport const EXCLUSIVE_TO_BUSINESS = (featureName: string) =>\n  `The ${featureName} feature is exclusive to workspaces on the business plan`;\nexport const AVAILABLE_ON_ENTERPRISE = () => \"Available on Appsmith Enterprise\";\n// Upgrade pages end\n\n// Audit logs begin\nexport const AUDIT_LOGS = () => \"Audit logs\";\nexport const TRY_AGAIN_WITH_YOUR_FILTER = () => \"Try again with your filter\";\n\n// Audit logs Upgrade page begin\nexport const INTRODUCING = (featureName: string) =>\n  `Introducing ${featureName}`;\nexport const AUDIT_LOGS_UPGRADE_PAGE_SUB_HEADING = () =>\n  \"See a timestamped trail of events in your workspace. Filter by type of event, user, resource ID, and time. Drill down into each event to investigate further.\";\nexport const SECURITY_AND_COMPLIANCE = () => \"Security & compliance\";\nexport const SECURITY_AND_COMPLIANCE_DETAIL1 = () =>\n  \"Proactively derisk misconfigured permissions, roll back changes from a critical security event, and keep checks against your compliance policies.\";\nexport const SECURITY_AND_COMPLIANCE_DETAIL2 = () =>\n  \"Exports to popular compliance tools coming soon\";\nexport const DEBUGGING = () => \"Debugging\";\nexport const DEBUGGING_DETAIL1 = () =>\n  \"Debug with a timeline of events filtered by user and resource ID, correlate them with end-user and app developer actions, and investigate back to the last known good state of your app.\";\nexport const INCIDENT_MANAGEMENT = () => \"Incident management\";\nexport const INCIDENT_MANAGEMENT_DETAIL1 = () =>\n  \"Go back in time from an incident to see who did what, correlate events with breaking changes, and run RCAs to remediate incidents for now and the future.\";\n// Audit logs Upgrade page end\n// Audit logs end\n\n// Access control upgrade page begin\nexport const GRANULAR_ACCESS_CONTROL_FOR_TEAMS = () =>\n  \"granular access controls for teams\";\nexport const ACCESS_CONTROL_UPGRADE_PAGE_SUB_HEADING = () =>\n  \"Control all permissions for all resources in your apps in a workspace. Manage permissions granularly by attributes. Use permissions and user groups to easily define access levels.\";\nexport const SECURITY_APPS_LEAST_PRIVILEGE = () =>\n  \"Secure apps by the least privilege needed\";\nexport const SECURITY_APPS_LEAST_PRIVILEGE_DETAIL1 = () =>\n  `Create roles by the least privilege needed as defaults, <span>e.g.: View only</span>, assign them to users in groups, <span>e.g.: Marketing</span>, and modify for special access, <span>e.g.: Content creators_Execute queries</span>`;\nexport const PREVENT_ACCIDENTAL_DAMAGE = () =>\n  \"Prevent accidental damage to data\";\nexport const PREVENT_ACCIDENTAL_DAMAGE_DETAIL1 = () =>\n  `Assign edit and delete permissions to an entire group, then modify granularly so non-native users of your data don’t drop a table or bulk-delete streaming data records before you can say, “Retrieve”.`;\nexport const RESTRICT_PUBLIC_EXPOSURE = () =>\n  \"Restrict public exposure of sensitive data\";\nexport const RESTRICT_PUBLIC_EXPOSURE_DETAIL1 = () =>\n  \"Proactively disallow groups of non-admin or non-super-admin users from publicly sharing your app or exporting app data out of your environment, domain, and security perimeters.\";\nexport const ACCESS_CONTROL_UPGRADE_PAGE_FOOTER = () =>\n  \"Unlock granular access controls along with audit logs and SSO for enhanced security and reliability with an upgrade to our Business plan.\";\n// Access control upgrade page end\n\n// Provisioning upgrade page begin\nexport const USER_PROVISIONING_FOR_ENTERPRISES = () =>\n  \"Manage Appsmith users via your identity provider\";\nexport const PROVISIONING_UPGRADE_PAGE_SUB_HEADING = () =>\n  `Add and remove Appsmith users centrally. Sync existing groups to Appsmith.`;\nexport const PROVISION_DEPROVISION_USERS = () =>\n  \"Provision and deprovision users from your IdP\";\nexport const PROVISION_DEPROVISION_USERS_DETAIL1 = () =>\n  `Control user authorization and access to Appsmith workspaces and apps via your IdP using the SCIM protocol.<div>&nbsp;</div><div><span style=\"font-style: italic;font-weight: normal;\">More protocols coming soon</span></div>`;\nexport const AUTO_GROUP_SYNC = () => \"Automatic group sync\";\nexport const AUTO_GROUP_SYNC_DETAIL1 = () =>\n  `Easily manage access for groups when you sync them to Appsmith from your IdP.`;\nexport const PROVISIONING_UPGRADE_PAGE_FOOTER = () =>\n  \"Secure your Appsmith apps with Granular Access Controls, Audit Logs, Custom SSO, and more on Appsmith Enterprise.\";\n// Provisioning upgrade page end\n\n//\nexport const WELCOME_FORM_NON_SUPER_USER_ROLE_DROPDOWN = () =>\n  \"Tell us about your primary skillset\";\nexport const WELCOME_FORM_NON_SUPER_USER_ROLE = () => \"Role\";\nexport const WELCOME_FORM_NON_SUPER_USER_USE_CASE = () =>\n  \"What would you like to use Appsmith for?\";\nexport const WELCOME_FORM_NON_SUPER_USER_PROFICIENCY_LEVEL = () =>\n  \"What is your general development proficiency?\";\n\nexport const WELCOME_FORM_PROFICIENCY_ERROR_MESSAGE = () =>\n  \"Please select a proficiency level\";\nexport const WELCOME_FORM_USE_CASE_ERROR_MESSAGE = () =>\n  \"Please select an use case\";\n\nexport const WELCOME_FORM_EMAIL_ERROR_MESSAGE = () =>\n  \"Enter a valid email address.\";\n\nexport const WELCOME_FORM_STRONG_PASSWORD_ERROR_MESSAGE = () =>\n  \"Please enter a strong password.\";\n\nexport const WELCOME_FORM_GENERIC_ERROR_MESSAGE = () =>\n  \"This field is required.\";\n\nexport const WELCOME_FORM_PASSWORDS_NOT_MATCHING_ERROR_MESSAGE = () =>\n  \"Passwords don't match.\";\n\nexport const QUERY_CONFIRMATION_MODAL_MESSAGE = () =>\n  `Are you sure you want to run `;\nexport const ENTITY_EXPLORER_TITLE = () => \"NAVIGATION\";\nexport const MULTI_SELECT_PROPERTY_PANE_MESSAGE = () =>\n  `Select a widget to see it's properties`;\nexport const WIDGET_MULTI_SELECT = () => \"Multiple selected\";\nexport const WIDGET_DEPRECATION_MESSAGE = (widgetName: string) =>\n  `Drag the latest ${widgetName} to unlock new features and prevent end-of-life headaches for this widget.`;\n\nexport const LOCK_ENTITY_EXPLORER_MESSAGE = () => `Lock sidebar open`;\nexport const CLOSE_ENTITY_EXPLORER_MESSAGE = () => `Close sidebar`;\nexport const JS_TOGGLE_DISABLED_MESSAGE = \"Clear the field to toggle back\";\nexport const JS_TOGGLE_SWITCH_JS_MESSAGE =\n  \"Switch to JS mode to customize your data using javascript\";\nexport const PROPERTY_PANE_EMPTY_SEARCH_RESULT_MESSAGE =\n  \"No properties found based on your search\";\nexport const PROPERTY_SEARCH_INPUT_PLACEHOLDER =\n  \"Search for controls, labels etc\";\nexport const EXPLORER_BETA_ENTITY = () => \"BETA\";\nexport const BINDING_WIDGET_WALKTHROUGH_TITLE = () => \"Widget properties\";\nexport const BINDING_WIDGET_WALKTHROUGH_DESC = () =>\n  `We’ve set the table data property for you. You can change it at anytime. The properties pane is a central hub for configuring widgets, allowing you to easily modify settings.`;\n\n// API Pane\nexport const API_PANE_NO_BODY = () => \"This request does not have a body\";\nexport const API_PANE_AUTO_GENERATED_HEADER = () =>\n  \"This content-type header is auto-generated by appsmith based on body type of the API. Create a new header content-type to overwrite this value.\";\nexport const API_PANE_DUPLICATE_HEADER = (headerName: string) =>\n  `This is a duplicate header and will be overridden by the ${headerName} header added by you.`;\n\nexport const TABLE_WIDGET_TOTAL_RECORD_TOOLTIP = () =>\n  \"It stores the total no. of rows in the table. Helps in calculating the no. of pages that further allows to enable or disable the next/previous control in pagination.\";\nexport const CREATE_DATASOURCE_TOOLTIP = () => \"Add a new datasource\";\nexport const ADD_QUERY_JS_TOOLTIP = () => \"Add a new query/JS Object\";\nexport const LIST_WIDGET_V2_TOTAL_RECORD_TOOLTIP = () =>\n  \"Count of all the records in the source data for the list. This helps us calculate the number of pages to be shown\";\n\n// Add datasource\nexport const GENERATE_APPLICATION_TITLE = () => \"Generate page\";\nexport const GENERATE_APPLICATION_DESCRIPTION = () =>\n  \"Quickly generate a page to perform CRUD operations on your database tables\";\nexport const DELETE_WORKSPACE_SUCCESSFUL = () =>\n  \"Workspace deleted successfully\";\n// theming\nexport const CHANGE_APP_THEME = (name: string) => `Theme ${name} applied`;\nexport const SET_DEFAULT_SELECTED_THEME = (name: string) =>\n  `Applied the ${name} theme, since custom theme was not found`;\nexport const SAVE_APP_THEME = (name: string) => `Theme ${name} saved`;\nexport const DELETE_APP_THEME = (name: string) => `Theme ${name} deleted`;\nexport const DELETE_APP_THEME_WARNING = () =>\n  `Do you really want to delete this theme? This process cannot be undone.`;\nexport const APP_THEME_BETA_CARD_HEADING = () => `🎨 Theme your app`;\nexport const APP_THEME_BETA_CARD_CONTENT = () =>\n  `Customize your app's look through global styles. Full widget support coming soon`;\n\nexport const UPGRADE_TO_EE = (authLabel: string) =>\n  `Hello, I would like to upgrade and start using ${authLabel} authentication.`;\nexport const UPGRADE_TO_EE_FEATURE = (feature: string) =>\n  `Hello, I would like to upgrade and start using the ${feature} feature.`;\nexport const UPGRADE_TO_EE_GENERIC = () => `Hello, I would like to upgrade`;\nexport const ADMIN_AUTH_SETTINGS_TITLE = () => \"Authentication\";\nexport const ADMIN_AUTH_SETTINGS_SUBTITLE = () =>\n  \"Select a protocol you want to authenticate users with\";\nexport const DANGER_ZONE = () => \"Danger zone\";\nexport const DISCONNECT_AUTH_METHOD = () => \"Disconnect\";\nexport const DISCONNECT_CONFIRMATION = () => \"Are you sure?\";\n\n// Branding\nexport const ADMIN_BRANDING_SETTINGS_TITLE_UPGRADE = () =>\n  \"Custom Branding for your workspaces\";\nexport const ADMIN_BRANDING_SETTINGS_SUBTITLE_UPGRADE = () =>\n  \"Make your workspaces and apps look more yours in a few clicks as in the example below. Upload your logo and favicon, set your primary color, and preview the new look. To save a look you like, upgrade to our Business plan.\";\nexport const ADMIN_BRANDING_COLOR_TOOLTIP = () =>\n  `When you choose a primary color, we auto-magically fill in the secondary and accent colors. You can change them to get the look you want.`;\nexport const ADMIN_BRANDING_LOGO_SIZE_ERROR = () =>\n  `Uploaded file must be less than 2MB`;\nexport const ADMIN_BRANDING_LOGO_DIMENSION_ERROR = () =>\n  `Logo should  be atleast 256px in height`;\nexport const ADMIN_BRANDING_LOGO_FORMAT_ERROR = () =>\n  `Uploaded file must be in .SVG .PNG, and .JPG formats`;\nexport const ADMIN_BRANDING_LOGO_REQUIREMENT = () =>\n  `.SVG, .PNG, or .JPG only • Max 2MB`;\nexport const ADMIN_BRANDING_FAVICON_DIMENSION_ERROR = () =>\n  `Uploaded file must have a max size of 32X32 pixels`;\nexport const ADMIN_BRANDING_FAVICON_SIZE_ERROR = () =>\n  `Uploaded file must be less than 2MB`;\nexport const ADMIN_BRANDING_FAVICON_FORMAT_ERROR = () =>\n  `Uploaded file must be in .ICO, .PNG, and .JPG formats`;\nexport const ADMIN_BRANDING_FAVICON_REQUIREMENT = () =>\n  `.ICO, .PNG, or .JPG only • Max 32X32`;\nexport const ADMIN_BRANDING_COLOR_TOOLTIP_PRIMARY = () =>\n  `Used on buttons, links, and other interactive elements.`;\nexport const ADMIN_BRANDING_COLOR_TOOLTIP_BACKGROUND = () =>\n  `Used as background color for the auth pages`;\nexport const ADMIN_BRANDING_COLOR_TOOLTIP_HOVER = () =>\n  `Used as hover color for the button.`;\nexport const ADMIN_BRANDING_COLOR_TOOLTIP_FONT = () =>\n  `Used as text color for the buttons.`;\nexport const ADMIN_BRANDING_COLOR_TOOLTIP_DISABLED = () =>\n  `Used as background color for disabled buttons.`;\nexport const ADMIN_BRANDING_UPGRADE_INTERCOM_MESSAGE = () =>\n  `I would like to enable Custom Branding for my workspace and am interested in Appsmith Business.`;\n\n// Guided tour\n// -- STEPS ---\nexport const STEP_ONE_TITLE = () =>\n  \"First step is querying the database. Here we are querying a Postgres database populated with customers data.\";\nexport const STEP_ONE_SUCCESS_TEXT = () =>\n  \"Excellent! You successfully queried the database and you can see the response of the query below. \";\nexport const STEP_ONE_BUTTON_TEXT = () => \"Proceed to next step\";\nexport const STEP_TWO_TITLE = () =>\n  \"Let’s display this response in a table. Select the table widget we’ve added for you.\";\nexport const STEP_THREE_TITLE = () =>\n  \"Display the response of the query in a table.\";\nexport const STEP_THREE_SUCCESS_TEXT = () =>\n  \"Great job! The table is now displaying the response of a query. You can use {{ }} in any input field to bind data to widgets.\";\nexport const STEP_THREE_SUCCESS_BUTTON_TEXT = () => \"Proceed to next step\";\nexport const STEP_FOUR_TITLE = () =>\n  \"Let’s build a form to update a customer record \";\nexport const STEP_FOUR_HINT_BUTTON_TEXT = () => \"Proceed\";\nexport const STEP_FOUR_SUCCESS_TEXT = () =>\n  \"Awesome! You connected the input widget to table’s selected row. The input will always show the data from the selected row.\";\nexport const STEP_FOUR_SUCCESS_BUTTON_TEXT = () => \"Proceed to next step\";\nexport const STEP_FIVE_TITLE = () =>\n  \"Connect all input fields in the Customer Update Form with the table\";\nexport const STEP_FIVE_HINT_TEXT = () =>\n  `Now let's connect rest of widgets in the container to the table's selected row`;\nexport const STEP_FIVE_SUCCESS_TEXT = () =>\n  \"Great work! All inputs are now connected to the table’s selected row\";\nexport const STEP_FIVE_SUCCESS_BUTTON_TEXT = () => \"Proceed to next step\";\nexport const STEP_SIX_TITLE = () =>\n  \"Add an update button to trigger an update query\";\nexport const STEP_SIX_SUCCESS_TEXT = () =>\n  \"Perfect! Your update button is ready to trigger an update query.\";\nexport const STEP_SIX_SUCCESS_BUTTON_TEXT = () => \"Proceed to next step\";\nexport const STEP_SEVEN_TITLE = () =>\n  \"Trigger updateCustomerInfo query by binding to the button widget\";\nexport const STEP_EIGHT_TITLE = () =>\n  \"After successfully triggering the update query, fetch the updated customer data. \";\nexport const STEP_EIGHT_SUCCESS_TEXT = () =>\n  \"Exceptional work! You’ve now built a way to see customer data and update it.\";\nexport const STEP_NINE_TITLE = () => \"Final step - test & deploy your app\";\nexport const CONTINUE = () => \"Continue\";\nexport const PROCEED_TO_NEXT_STEP = () => \"Proceed to next step\";\nexport const PROCEED = () => \"Proceed\";\nexport const COMPLETE = () => \"Complete\";\n// -- End Tutorial --\nexport const END_TUTORIAL = () => \"End tutorial\";\nexport const CANCEL_DIALOG = () => \"Cancel\";\n// -- Intro content --\nexport const TITLE = () =>\n  \"In this tutorial we’ll build a tool to display customer information\";\nexport const DESCRIPTION = () =>\n  \"This tool has a table that displays customer data and a form to update a particular customer record. Try out the tool below before you start building.\";\nexport const BUTTON_TEXT = () => \"Start building\";\n// -- Rating --\nexport const RATING_TITLE = () =>\n  \"Congratulations! You just built your first app in Appsmith.\";\nexport const RATING_DESCRIPTION = () =>\n  \"You can now invite others to this application.\";\nexport const RATING_TEXT = () => \"Rate your experience\";\n// -- End Message --\nexport const END_TITLE = () => \"What’s next? Start building your own apps.\";\nexport const END_DESCRIPTION = () =>\n  \"Inspect properties of queries, components, etc.\";\nexport const END_BUTTON_TEXT = () => \"Start building an app\";\n\nexport const CONTEXT_EDIT_NAME = () => \"Edit name\";\nexport const CONTEXT_SHOW_BINDING = () => \"Show bindings\";\nexport const CONTEXT_MOVE = () => \"Move to page\";\nexport const CONTEXT_COPY = () => \"Copy to page\";\nexport const CONTEXT_DELETE = () => \"Delete\";\nexport const CONFIRM_CONTEXT_DELETE = () => \"Are you sure?\";\nexport const CONFIRM_CONTEXT_DELETING = () => \"Deleting\";\nexport const CONTEXT_NO_PAGE = () => \"No pages\";\nexport const CONTEXT_REFRESH = () => \"Refresh\";\nexport const CONTEXT_CLONE = () => \"Clone\";\nexport const CONTEXT_SETTINGS = () => \"Settings\";\nexport const CONTEXT_PARTIAL_EXPORT = () => \"Export\";\nexport const CONTEXT_PARTIAL_IMPORT = () => \"Import\";\nexport const CONTEXT_SET_AS_HOME_PAGE = () => \"Set as home page\";\nexport const PAGE = () => \"Page\";\nexport const PAGES = () => \"Pages\";\n\n// Entity explorer\nexport const ADD_DATASOURCE_BUTTON = () => \"Add datasource\";\nexport const ADD_WIDGET_BUTTON = () => \"Add widget\";\nexport const ADD_QUERY_JS_BUTTON = () => \"Add query/JS\";\nexport const EMPTY_WIDGET_MAIN_TEXT = () => \"No widget to display\";\nexport const EMPTY_WIDGET_BUTTON_TEXT = () => \"New widget\";\nexport const EMPTY_QUERY_JS_MAIN_TEXT = () => \"No query/JS to display\";\nexport const EMPTY_QUERY_JS_BUTTON_TEXT = () => \"New query/JS\";\nexport const EMPTY_DATASOURCE_MAIN_TEXT = () => \"No datasource to display\";\nexport const EMPTY_DATASOURCE_BUTTON_TEXT = () => \"New datasource\";\nexport const SEARCH_DATASOURCES = () => \"Search datasources\";\n\n// Templates\nexport const MORE = () => \"More\";\nexport const SHOW_LESS = () => \"Show less\";\nexport const CHOOSE_WHERE_TO_FORK = () => \"Choose where to fork the template\";\nexport const SELECT_WORKSPACE = () => \"Select workspace\";\nexport const FORK_TEMPLATE = () => \"Fork template\";\nexport const TEMPLATES = () => \"Templates\";\nexport const FORK_THIS_TEMPLATE = () => \"Use template\";\nexport const FORK_THIS_TEMPLATE_BUILDING_BLOCK = () => \"Use building block\";\nexport const COULDNT_FIND_TEMPLATE = () =>\n  \"Couldn’t find what you are looking for?\";\nexport const COULDNT_FIND_TEMPLATE_DESCRIPTION = () =>\n  \"Submit suggestions for templates you'd like to see or upvote requests raised by others and our team will work on it.\";\nexport const REQUEST_TEMPLATE = () => \"Request for a template\";\nexport const REQUEST_BUILDING_BLOCK = () => \"Request a building block\";\nexport const SEARCH_TEMPLATES = () => \"Search templates\";\nexport const INTRODUCING_TEMPLATES = () => \"Introducing templates\";\nexport const TEMPLATE_NOTIFICATION_DESCRIPTION = () =>\n  \"Use these templates to learn, create, and build apps even faster\";\nexport const GO_BACK = () => \"Back\";\nexport const OVERVIEW = () => \"Overview\";\nexport const FUNCTION = () => \"Function\";\nexport const INDUSTRY = () => \"Use case\";\nexport const DATASOURCES = () => \"Datasources\";\nexport const NOTE = () => \"Note: \";\nexport const NOTE_MESSAGE = () => \"You can add your datasources as well\";\nexport const WIDGET_USED = () => \"Widgets\";\nexport const SIMILAR_TEMPLATES = () => \"Similar templates\";\nexport const VIEW_ALL_TEMPLATES = () => \"View all templates\";\nexport const FILTERS = () => \"Filters\";\nexport const FILTER_SELECTALL = () => \"Select all\";\nexport const FILTER_SELECT_PAGE = () => \"Add selected page\";\nexport const FILTER_SELECT_PAGES = () => \"Add selected pages\";\nexport const FORKING_TEMPLATE = () => \"Setting up the template\";\nexport const FETCHING_TEMPLATES = () => \"Loading template details\";\nexport const FETCHING_TEMPLATE_LIST = () => \"Loading templates list\";\n\nexport const TEMPLATES_BACK_BUTTON = () => \"Back\";\nexport const SKIP_START_WITH_USE_CASE_TEMPLATES = () =>\n  \"Skip this step, I’ll do it later\";\n\nexport const IMAGE_LOAD_ERROR = () => \"Unable to display the image\";\n\nexport const REDIRECT_URL_TOOLTIP = () =>\n  \"This URL will be used while configuring your Identity Provider's Callback/Redirect URL\";\nexport const ENTITY_ID_TOOLTIP = () =>\n  \"This URL will be used while configuring your Identity Provider's Entity ID URL\";\n\nexport const FORK_APP_MODAL_LOADING_TITLE = () =>\n  \"Fetching workspaces to fork to...\";\nexport const FORK_APP_MODAL_EMPTY_TITLE = () =>\n  \"No workspace available to fork to\";\nexport const FORK_APP_MODAL_SUCCESS_TITLE = () =>\n  \"Choose where to fork the app\";\nexport const FORK = () => `Fork`;\n\nexport const CLEAN_URL_UPDATE = {\n  name: () => \"Update URLs\",\n  shortDesc: () =>\n    \"All URLs in your applications will update to a new readable format that includes the application and page names.\",\n  description: [\n    () =>\n      \"All URLs in your applications will be updated to match our new style. This will make your apps easier to find, and URLs easier to remember.\",\n    (url: string) =>\n      `The current app’s URL will be:<br /><code style=\"line-break: anywhere; padding: 2px 4px; line-height: 22px\">${url}</code>`,\n  ],\n  disclaimer: () =>\n    \"Existing references to <strong>appsmith.URL.fullpath</strong> and <strong>appsmith.URL.pathname</strong> properties will behave differently.\",\n};\n\nexport const MEMBERS_TAB_TITLE = (\n  length: number,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isFreeInstance?: boolean,\n) => `Users (${length})`;\nexport const SEARCH_USERS = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isFreeInstance?: boolean,\n) => `Search for users`;\n\nexport const CREATE_PAGE = () => \"New blank page\";\nexport const CANVAS_NEW_PAGE_CARD = () => \"Create new page\";\nexport const ADD_PAGE_FROM_TEMPLATE = () => \"Add page from template\";\nexport const INVALID_URL = () =>\n  \"Please enter a valid URL, for example, https://example.com\";\nexport const SAVE_OR_DISCARD_DATASOURCE_WARNING = () =>\n  `Unsaved changes will be lost if you exit this page, save the changes before exiting.`;\n\nexport const APP_SETTINGS_PANE_HEADER = () => \"Settings\";\nexport const APP_SETTINGS_CLOSE_TOOLTIP = () => \"Close settings panel\";\n\nexport const GENERAL_SETTINGS_SECTION_HEADER = () => \"General\";\nexport const GENERAL_SETTINGS_SECTION_CONTENT_HEADER = () => \"General settings\";\nexport const GENERAL_SETTINGS_SECTION_HEADER_DESC = () => \"App name and icon\";\nexport const GENERAL_SETTINGS_APP_NAME_LABEL = () => \"App name\";\nexport const GENERAL_SETTINGS_NAME_EMPTY_MESSAGE = () =>\n  \"App name cannot be empty\";\nexport const GENERAL_SETTINGS_NAME_SPECIAL_CHARACTER_ERROR = () =>\n  \"Only alphanumeric or '-()' are allowed\";\nexport const GENERAL_SETTINGS_APP_ICON_LABEL = () => \"App icon\";\n\nexport const THEME_SETTINGS_SECTION_HEADER = () => \"Theme\";\nexport const THEME_SETTINGS_SECTION_CONTENT_HEADER = () => \"Theme settings\";\nexport const THEME_SETTINGS_SECTION_HEADER_DESC = () =>\n  \"Set theme, color and font\";\n\nexport const PAGE_SETTINGS_SECTION_HEADER = () => \"Page settings\";\nexport const PAGE_SETTINGS_SECTION_CONTENT_HEADER = () => \"settings\";\nexport const PAGE_SETTINGS_PAGE_NAME_LABEL = () => \"Page name\";\nexport const PAGE_SETTINGS_NAME_EMPTY_MESSAGE = () =>\n  \"Page name cannot be empty\";\nexport const PAGE_SETTINGS_NAME_SPECIAL_CHARACTER_ERROR = () =>\n  \"Only alphanumeric or '-' are allowed\";\nexport const PAGE_SETTINGS_PAGE_URL_LABEL = () => \"Change page URL\";\nexport const PAGE_SETTINGS_PAGE_URL_VERSION_UPDATE_1 = () => \"Please\";\nexport const PAGE_SETTINGS_PAGE_URL_VERSION_UPDATE_2 = () => \"update\";\nexport const PAGE_SETTINGS_PAGE_URL_VERSION_UPDATE_3 = () =>\n  \"your app URL to the new format to set the page URL.\";\nexport const PAGE_SETTINGS_SHOW_PAGE_NAV = () => \"Show page navigation\";\nexport const PAGE_SETTINGS_SHOW_PAGE_NAV_TOOLTIP = () =>\n  \"Show or hide the page in the appsmith navbar in view mode\";\nexport const PAGE_SETTINGS_SET_AS_HOMEPAGE = () => \"Set as home page\";\nexport const PAGE_SETTINGS_SET_AS_HOMEPAGE_TOOLTIP = () =>\n  \"This is the current home page, you can change this by setting another page as the home page\";\nexport const PAGE_SETTINGS_SET_AS_HOMEPAGE_TOOLTIP_NON_HOME_PAGE = () =>\n  \"Set this page as your home page. This will override your previously set home page.\";\nexport const PAGE_SETTINGS_ACTION_NAME_CONFLICT_ERROR = (name: string) =>\n  `${name} is already being used.`;\n\nexport const CODE_EDITOR_LOADING_ERROR = (message?: string) =>\n  `Failed to load the code editor${message ? `: ${message}` : \"\"}`;\n\nexport const UPDATE_VIA_IMPORT_SETTING = {\n  settingHeader: () => \"Update through file import\",\n  settingDesc: () => \"Update app by importing file\",\n  settingLabel: () => \"Import\",\n  settingContent: () =>\n    \"This action will override your existing application. Please exercise caution while selecting the file to import.\",\n  settingActionButtonTxt: () => \"Import\",\n  disabledForGit: () =>\n    \"This feature is not supported for apps connected to Git version control. Please use git pull to update and sync your app.\",\n};\n\nexport const IN_APP_EMBED_SETTING = {\n  applicationUrl: () => \"application url\",\n  allowEmbeddingLabel: () => \"Embedding enabled\",\n  allowEmbeddingTooltip: () =>\n    \"This app can be embedded in all domains, including malicious ones\",\n  forkApplicationConfirmation: {\n    title: () => \"Allow developers to fork this app to their workspace?\",\n    body: () => \"Forking allows developers to copy your app to their workspace\",\n    cancel: () => \"Cancel\",\n    confirm: () => \"Allow forking\",\n  },\n  copy: () => \"Copy\",\n  copied: () => \"Copied\",\n  limitEmbeddingLabel: () => \"Embedding restricted\",\n  limitEmbeddingTooltip: () => \"This app can be embedded in approved URLs only\",\n  disableEmbeddingLabel: () => \"Embedding disabled\",\n  disableEmbeddingTooltip: () =>\n    \"This app cannot be embedded anywhere on the internet\",\n  embed: () => \"Embed\",\n  embedSnippetTitle: () => \"Embed URL\",\n  change: () => \"Change\",\n  copiedEmbedCode: () => \"Embed code copied to clipboard\",\n  embedSize: () => \"Embed size\",\n  previewEmbeddedApp: () => \"Preview embedded app\",\n  sectionHeader: () => \"Share & Embed\",\n  sectionContentHeader: () => \"Share\",\n  sectionHeaderDesc: () => \"Make public, embed properties\",\n  showNavigationBar: () => \"Show navigation bar\",\n  forkContentHeader: () => \"Fork\",\n  forkLabel: () => \"Make application forkable\",\n  forkLabelTooltip: () =>\n    \"Forking allows developers to copy your app to their workspace\",\n  upgradeHeading: () =>\n    \"Embedding in public mode is supported in the free plan. To make your app public, please contact your administrator.\",\n  upgradeHeadingForInviteModal: () => \"Public apps\",\n  upgradeSubheadingForInviteModal: () =>\n    \"Make your app public by visiting the share settings, and easily embed your Appsmith app into legacy applications\",\n  privateAppsText: () => \"Private apps\",\n  rampSubtextModal: () =>\n    \"Embed private Appsmith apps and seamlessly authenticate users through SSO in our Enterprise Plan\",\n  rampSubtextSidebar: () =>\n    \"To embed private Appsmith apps and seamlessly authenticate users through SSO, try our \",\n  rampLinktext: () => \"Try Enterprise\",\n  rampLinktextvariant2: () => \"Enterprise Plan\",\n  upgradeContent: () => \"Private embedding is now available in\",\n  appsmithEnterpriseEdition: () => \"Appsmith Enterprise Plan.\",\n  secondaryHeadingForAppSettings: () =>\n    \"Make your app public to embed your Appsmith app into legacy applications\",\n  secondaryHeading: () =>\n    \"Embedding in public mode is supported in the free plan. To make your app public, please contact your administrator.\",\n};\n\nexport const APP_NAVIGATION_SETTING = {\n  sectionHeader: () => \"Navigation\",\n  sectionHeaderDesc: () => \"Customize the navigation bar\",\n  showNavbarLabel: () => \"Show navbar\",\n  orientationLabel: () => \"Orientation\",\n  navStyleLabel: () => \"Variant\",\n  positionLabel: () => \"Position\",\n  itemStyleLabel: () => \"Item style\",\n  colorStyleLabel: () => \"Background color\",\n  logoLabel: () => \"Logo\",\n  logoConfigurationLabel: () => \"Logo configuration\",\n  showSignInLabel: () => \"Show sign in\",\n  showSignInTooltip: () =>\n    \"Toggle to show the sign-in button for users who are not logged in.\",\n  logoUploadFormatError: () => `Uploaded file must be in .PNG or .JPG formats.`,\n  logoUploadSizeError: () => `Uploaded file must be less than 1MB.`,\n  showLogoLabel: () => \"Show logo\",\n  showApplicationTitleLabel: () => \"Show application title\",\n};\n\nexport const LOCK_SIDEBAR_MESSAGE = () => `Lock sidebar open`;\nexport const CLOSE_SIDEBAR_MESSAGE = () => `Close sidebar`;\n\n// Datasource/New query\nexport const NEW_QUERY_BUTTON_TEXT = () => \"New query\";\nexport const NEW_API_BUTTON_TEXT = () => \"New API\";\nexport const NEW_AI_BUTTON_TEXT = () => \"New AI Query\";\nexport const GENERATE_NEW_PAGE_BUTTON_TEXT = () => \"Generate new page\";\nexport const RECONNECT_BUTTON_TEXT = () => \"Reconnect\";\nexport const SAVE_BUTTON_TEXT = () => \"Save\";\nexport const TEST_BUTTON_TEXT = () => \"Test configuration\";\nexport const SAVE_AND_AUTHORIZE_BUTTON_TEXT = () => \"Save & Authorize\";\nexport const SAVE_AND_RE_AUTHORIZE_BUTTON_TEXT = () => \"Save & Re-Authorize\";\nexport const DISCARD_POPUP_DONT_SAVE_BUTTON_TEXT = () => \"Don't save\";\nexport const GSHEET_AUTHORISED_FILE_IDS_KEY = () => \"userAuthorizedSheetIds\";\nexport const GOOGLE_SHEETS_INFO_BANNER_MESSAGE = () =>\n  \"Appsmith will require access to your google drive to access google sheets.\";\nexport const GOOGLE_SHEETS_AUTHORIZE_DATASOURCE = () => \"Authorize datasource\";\nexport const GOOGLE_SHEETS_LEARN_MORE = () => \"Learn more\";\nexport const DATASOURCE_SCHEMA_NOT_AVAILABLE = () => \"Schema is not available\";\nexport const DATASOURCE_INTERCOM_TEXT = () =>\n  \"Do you need help setting up a Google Sheets datasource?\";\nexport const GOOGLE_SHEETS_ASK_FOR_SUPPORT = () => \"Ask for support\";\nexport const GOOGLE_SHEETS_FILE_PICKER_TITLE = () =>\n  \"Select Google Sheets to query\";\nexport const DATASOURCE_GENERATE_PAGE_BUTTON = () => \"Generate new page\";\nexport const FETCHING_DATASOURCE_PREVIEW_DATA = () => \"Loading data\";\nexport const SCHEMA_PREVIEW_NO_DATA = () =>\n  \"No data records to show or the table header begins with an index other than 1\";\nexport const GSHEET_SPREADSHEET_LABEL = () => \"Spreadsheets\";\nexport const GSHEET_SPREADSHEET_LOADING = () => \"Loading Spreadsheets\";\nexport const GSHEET_SHEET_LOADING = () => \"Loading Sheets\";\nexport const GSHEET_DATA_LOADING = () => \"Loading attributes\";\nexport const GSHEET_SEARCH_PLACEHOLDER = () => \"Search for spreadsheet\";\n\n//Layout Conversion flow\nexport const CONVERT = () => \"Convert layout\";\nexport const BUILD_RESPONSIVE = () => \"Build responsive apps\";\nexport const BUILD_RESPONSIVE_TEXT = () =>\n  \"Appsmith will convert your application's UI to auto-layout, a new mode designed for building mobile-friendly apps in no time\";\nexport const BUILD_FIXED_LAYOUT = () => \"Use fixed-layout\";\nexport const BUILD_FIXED_LAYOUT_TEXT = () =>\n  \"Appsmith will convert your application’s UI to fixed layout, the default mode.\";\nexport const USE_SNAPSHOT = () => \"Use snapshot\";\nexport const USE_SNAPSHOT_HEADER = () => \"Use snapshot\";\nexport const DISCARD_SNAPSHOT_HEADER = () => \"Discarding a snapshot\";\nexport const SAVE_SNAPSHOT = () =>\n  \"Save a snapshot of your current layout for 5 days\";\nexport const SAVE_SNAPSHOT_TEXT = () =>\n  \"We save a snapshot of your current layout so you can go back if auto-layout doesn't work for you in this beta.\";\nexport const CREATE_SNAPSHOT = () => \"Creating a snapshot\";\nexport const CONVERTING_APP = () => \"Converting your app\";\nexport const RESTORING_SNAPSHOT = () => \"Removing changes made\";\nexport const REFRESH_THE_APP = () => \"Refresh the app\";\nexport const CONVERT_ANYWAYS = () => \"Convert anyways\";\nexport const CONVERSION_SUCCESS_HEADER = () => \"All done\";\nexport const DISCARD_SNAPSHOT_TEXT = () =>\n  \"You are about to discard this snapshot:\";\nexport const CONVERSION_SUCCESS_TEXT = () =>\n  \"Check all your pages and start using your new layout\";\nexport const CONVERSION_WARNING_HEADER = () =>\n  \"All done, some adjustments needed\";\nexport const CONVERSION_WARNING_TEXT = () =>\n  \"You might need to manually position some of the widgets your layout contains\";\nexport const CONVERSION_ERROR_HEADER = () => \"Conversion failed\";\nexport const CONVERSION_ERROR = () =>\n  \"Appsmith ran into a critical error while trying to convert to auto-layout\";\nexport const SEND_REPORT = () => \"Send us a report\";\nexport const CONVERSION_ERROR_TEXT = () => \"No changes were made to your app\";\nexport const DROPDOWN_LABEL_TEXT = () => \"Target canvas size\";\nexport const CONVERSION_WARNING = () => \"Conversion will change your layout\";\nexport const SNAPSHOT_LABEL = () =>\n  \"To revert back to the original state use this snapshot\";\nexport const USE_SNAPSHOT_TEXT = () =>\n  \"Your app will look and work exactly like it used to before the conversion. Widgets, datasources, queries, JS Objects added and any changes you made after conversion will not be present.\";\nexport const SNAPSHOT_WARNING_MESSAGE = () =>\n  \"Any changes you made after conversion will not be present.\";\nexport const CONVERT_TO_FIXED_TITLE = () => \"Convert to fixed layout\";\nexport const CONVERT_TO_FIXED_BUTTON = () => \"Convert to fixed layout (Beta)\";\nexport const CONVERT_TO_AUTO_TITLE = () => \"Convert to auto-layout\";\nexport const CONVERT_TO_AUTO_BUTTON = () => \"Convert to auto-layout (Beta)\";\nexport const SNAPSHOT_BANNER_MESSAGE = () =>\n  \"Confirm this layout is per expectations before you discard the snapshot. Use the snapshot to go back.\";\nexport const USE_SNAPSHOT_CTA = () => \"Use snapshot\";\nexport const DISCARD_SNAPSHOT_CTA = () => \"Discard snapshot\";\nexport const MORE_DETAILS = () => \"More details\";\nexport const CONVERSION_ERROR_MESSAGE_HEADER = () =>\n  \"To resolve this error please:\";\nexport const CONVERSION_ERROR_MESSAGE_TEXT_ONE = () =>\n  \"Check your internet connection.\";\nexport const CONVERSION_ERROR_MESSAGE_TEXT_TWO = () =>\n  \"Send us a report. Sending a report will only inform us that the failure happened and will give us your email address to reach out to.\";\nexport const SNAPSHOT_TIME_FROM_MESSAGE = (\n  timeSince: string,\n  readableDate: string,\n) => `Snapshot from ${timeSince} ago (${readableDate})`;\nexport const SNAPSHOT_TIME_TILL_EXPIRATION_MESSAGE = (\n  timeTillExpiration: string,\n) => `Snapshot of your previous layout expires in ${timeTillExpiration}`;\nexport const DISCARD = () => \"Discard\";\n// Alert options and labels for showMessage types\nexport const ALERT_STYLE_OPTIONS = [\n  { label: \"Info\", value: \"'info'\", id: \"info\" },\n  {\n    label: \"Success\",\n    value: \"'success'\",\n    id: \"success\",\n  },\n  { label: \"Error\", value: \"'error'\", id: \"error\" },\n  { label: \"Warning\", value: \"'warning'\", id: \"warning\" },\n];\n\nexport const customJSLibraryMessages = {\n  ADD_JS_LIBRARY: () => \"Add JS libraries\",\n  REC_LIBRARY: () => \"Recommended libraries\",\n  INSTALLATION_SUCCESSFUL: (accessor: string) =>\n    `Installation Successful. You can access the library via ${accessor}`,\n  INSTALLATION_FAILED: () => \"Installation failed\",\n  INSTALLED_ALREADY: (accessor: string) =>\n    `This library is already installed. You could access it via ${accessor}.`,\n  UNINSTALL_FAILED: (name: string) =>\n    `Couldn't uninstall ${name}. Please try again after sometime.`,\n  UNINSTALL_SUCCESS: (accessor: string) =>\n    `${accessor} is uninstalled successfully.`,\n  LEARN_MORE_DESC: () => \"Learn more about Custom JS libraries\",\n  UNSUPPORTED_LIB: () => `Library is unsupported`,\n  UNSUPPORTED_LIB_DESC: () =>\n    `Unfortunately, this library cannot be supported due to platform limitations. Please try installing a different library.`,\n  LEARN_MORE: () => `Learn more`,\n  REPORT_ISSUE: () => `Report issue`,\n  AUTOCOMPLETE_FAILED: (name: string) =>\n    `Code completion for ${name} will not work.`,\n  CLIENT_LOAD_FAILED: (url: string) => `Failed to load the script at ${url}.`,\n  LIB_OVERRIDE_ERROR: (\n    name: string,\n  ) => `The library ${name} is already installed.\n  If you are trying to install a different version, uninstall the library first.`,\n  DEFS_FAILED_ERROR: (name: string) =>\n    `Failed to generate autocomplete definitions for ${name}.`,\n  IMPORT_URL_ERROR: (url: string) =>\n    `The script at ${url} cannot be installed.`,\n  NAME_COLLISION_ERROR: (accessors: string) =>\n    `Name collision detected: ${accessors}`,\n};\n\n// Business Plan upgrade page\nexport const MOVE_TO_BUSINESS_EDITION = (trailingChar: string) =>\n  `Move to Business plan${trailingChar ? trailingChar : \"\"}`;\n\n//Datasource environment\nexport const START_SWITCH_ENVIRONMENT = (environment: string) =>\n  `Switching your environment to ${environment.toLowerCase()}, and running all associated pageload actions`;\nexport const SWITCH_ENVIRONMENT_SUCCESS = (environment: string) =>\n  `Environment switched to ${environment.toLowerCase()} successfully`;\nexport const SWITCH_ENV_DISABLED_TOOLTIP_TEXT = (): string =>\n  \"To access environments for datasources, try out our \";\n\nexport const TEST_DATASOURCE_SUCCESS = (\n  datasourceName: string,\n  environmentName: string,\n) => {\n  return environmentName\n    ? `Test was successful, ${datasourceName} ${environmentName.toLowerCase()} environment is correctly configured.`\n    : `Test was successful, ${datasourceName} is correctly configured.`;\n};\n\nexport const TEST_DATASOURCE_ERROR = () =>\n  \"Test failed, couldn't establish a connection\";\n\n// Camera widget\nexport const DEFAULT_CAMERA_LABEL = () => \"Default mobile camera\";\nexport const DEFAULT_CAMERA_LABEL_DESCRIPTION = () =>\n  \"Default choice for mobile users. Not applicable for other devices\";\nexport const FRONT_CAMERA_LABEL = () => \"Front (Selfie)\";\nexport const BACK_CAMERA_LABEL = () => \"Back (Rear)\";\n\n// Color picker\nexport const FULL_COLOR_PICKER_LABEL = () => \"Full color picker\";\n\n// Column selector modal\nexport const EDIT_FIELDS = () => \"Edit fields\";\nexport const FIELDS_CONFIGURATION = () => \"Fields Configuration\";\nexport const SAVE_CHANGES = () => \"Save changes\";\nexport const COLUMN_TYPE = () => \"Column type\";\nexport const COLUMN_NAME = () => \"Column name\";\nexport const EDIT_FIELDS_DISABLED_TOOLTIP_TEXT = () =>\n  \"Select a table to edit fields\";\n\nexport const SAVE_CHANGES_DISABLED_TOOLTIP_TEXT = () =>\n  \"You have to select at least 1 field to save\";\n\nexport const NO_CONNECTABLE_WIDGET_FOUND = () =>\n  \"Add a table or list widget with data to get the values from\";\n\nexport const CONNECT_BUTTON_TEXT = () => \"Connect data\";\n\nexport const NO_FIELDS_ADDED = () => \"No fields added\";\n\n// One click binding control\nexport const DATASOURCE_DROPDOWN_OPTIONS = {\n  CONNECT_TO_QUERY: () => \"Connect to query\",\n  CONNECT_TO: () => \"Connect to\",\n  CHOOSE_DATASOURCE_TO_CONNECT: () => \"Choose datasource to connect\",\n  CREATE_OR_EDIT_RECORDS: () => \"Create or Edit records\",\n  WRITE_JSON_SCHEMA: () => \"Write JSON schema\",\n  SELECT_A_DATASOURCE: () => \"Select a datasource\",\n  CONNECT_DATA: () => \"Connect data\",\n  OTHER_ACTIONS: () => \"Other actions\",\n};\n\nexport const COMMUNITY_TEMPLATES = {\n  tabTitle: () => \"Showcase\",\n  cancel: () => \"Cancel\",\n  publishSuccessPage: {\n    title: () => \"Live on Appsmith community\",\n    description: () =>\n      \"This application is live on community as a template for users to fork and remix.\",\n    viewTemplateButton: () => \"View template\",\n  },\n  publishFormPage: {\n    title: () => \"Publish to community\",\n    footer: {\n      publishButton: () => \"Publish to community\",\n      tnCText: () =>\n        \"I understand publishing this app will allow users outside my workspace to fork it to their workspace.\",\n    },\n    preview: {\n      thumbnail: () => \"Thumbnail will be generated automatically\",\n    },\n    templateForm: {\n      titleInputLabel: () => \"Title\",\n      titleInputPlaceholder: () => \"Title of the template\",\n      titleRequiredError: () => `Please provide title`,\n\n      excerptInputLabel: () => \"Headline\",\n      excerptInputPlaceholder: () => \"One line excerpt\",\n\n      descriptionInputLabel: () => \"Description\",\n      descriptionInputPlaceholder: () => \"Description of the template\",\n\n      useCasesInputLabel: () => \"Use-cases\",\n      useCasesInputPlaceholder: () => \"Select use cases\",\n    },\n    authorDetails: {\n      title: () => \"Author details\",\n      displayNameLabel: () => \"Display name\",\n      displayNamePlaceholder: () => \"Display name\",\n      nameRequiredError: () => `Please provide name`,\n\n      emailLabel: () => \"Email\",\n      emailPlaceholder: () => \"Email\",\n    },\n    applicationSettings: {\n      title: () => \"Application settings\",\n      publicSetting: () => \"Make application public\",\n      forkableSetting: () => \"Make application forkable\",\n    },\n    publishedInfo: {\n      title: () => \"What is published?\",\n      correct: [\n        () => \"Widgets & their properties\",\n        () => \"Queries & JS Objects\",\n        () => \"Datasource types\",\n      ],\n      incorrect: [\n        () => \"Datasource credentials\",\n        () => \"API authentication details\",\n        () => \"Environment variables\",\n        () => \"Git credentials\",\n      ],\n    },\n    publishedFailedError: () => \"Unable to publish\",\n  },\n  modals: {\n    unpublishedInfo: {\n      title: () => \"Publish to Appsmith community\",\n      description: () =>\n        \"Publish this app to Appsmith community for the public to view, fork, and remix.\",\n      publishBtn: () => \"Start publishing\",\n    },\n    publishedInfo: {\n      title: () => \"Live on Appsmith community!\",\n      description: () =>\n        \"This application is live on community as a template for users to fork and remix.\",\n      viewTemplate: () => \"View template\",\n    },\n  },\n};\n\n// Interim data state info\nexport const EMPTY_TABLE_TITLE_TEXT = () => \"Empty table\";\nexport const EMPTY_TABLE_MESSAGE_TEXT = () =>\n  \"There are no data records to show\";\nexport const NO_COLUMNS_MESSAGE_TEXT = () => \"There are no columns to show\";\nexport const LOADING_RECORDS_TITLE_TEXT = () => \"Loading records\";\nexport const LOADING_RECORDS_MESSAGE_TEXT = () => \"This may take a few seconds\";\nexport const FAILED_RECORDS_TITLE_TEXT = () => \"Failed to load\";\nexport const FAILED_RECORDS_MESSAGE_TEXT = () =>\n  \"There was an error connecting to the datasource. Please check the datasource configuration and retry. If the issue persists, review the datasource settings.\";\n\nexport const DATA_PANE_TITLE = () => \"Datasources in your workspace\";\nexport const DATASOURCE_LIST_BLANK_DESCRIPTION = () =>\n  \"Connect a datasource to write your first query\";\nexport const DATASOURCE_BLANK_STATE_MESSAGE = () => \"No datasources to display\";\n\n// Create New Apps Intermediary step\nexport const CREATE_NEW_APPS_STEP_TITLE = () => \"How would you like to start?\";\nexport const CREATE_NEW_APPS_STEP_SUBTITLE = () =>\n  \"Choose an option that fits your approach, and let's shape your app together.\";\nexport const START_FROM_TEMPLATE_TITLE = () => \"Start with template\";\nexport const START_FROM_TEMPLATE_SUBTITLE = () =>\n  \"Begin with an app for a specific scenario. We'll guide you through tailoring your app.\";\nexport const START_FROM_SCRATCH_TITLE = () => \"Start from scratch\";\nexport const START_FROM_SCRATCH_SUBTITLE = () =>\n  \"Create an app from the ground up. Design every detail of your app on a blank canvas.\";\nexport const START_WITH_DATA_TITLE = () => \"Start with data\";\nexport const START_WITH_DATA_SUBTITLE = () =>\n  \"Get started with connecting your data, and easily craft a functional application.\";\nexport const START_WITH_DATA_CONNECT_HEADING = () => \"Connect your datasource\";\nexport const START_WITH_DATA_CONNECT_SUBHEADING = () =>\n  \"Select an option to establish a connection. Your data's security is our priority.\";\nexport const START_WITH_TEMPLATE_CONNECT_HEADING = () => \"Select a template\";\nexport const START_WITH_TEMPLATE_CONNECT_SUBHEADING = () =>\n  \"Choose an option below to embark on your app-building adventure!\";\n\nexport const EDITOR_PANE_TEXTS = {\n  queries_tab: () => \"Queries\",\n  js_tab: () => \"JS\",\n  ui_tab: () => \"UI\",\n  query_blank_state: () => \"No queries to display\",\n  js_blank_state: () => \"No JS objects to display\",\n  query_blank_state_description: () =>\n    \"Write your first query or API to access data\",\n  js_blank_state_description: () =>\n    \"Use JS to transform your data or write business logic\",\n  widget_blank_state_description: () =>\n    \"Drag & drop UI elements to create your app\",\n  query_add_button: () => \"New query / API\",\n  js_add_button: () => \"New JS object\",\n  js_blank_object_item: () => \"Blank JS object\",\n  widget_add_button: () => \"New UI element\",\n  query_create_tab_title: () => \"Create new query from\",\n  widgets_create_tab_title: () => \"Drag & drop UI elements\",\n  js_create_tab_title: () => \"Create JS object from\",\n  queries_create_from_existing: () => \"From existing datasource\",\n  queries_create_new: () => \"New API\",\n  loading_building_blocks: () => \"Loading building blocks\",\n};\n\nexport const PARTIAL_IMPORT_EXPORT = {\n  export: {\n    modalHeading: () => \"Export\",\n    modalSubHeading: () => \"Select entities below to export from the Page\",\n    cta: () => \"Export selected entities\",\n    sections: {\n      jsObjects: () => \"JS objects\",\n      databases: () => \"Databases\",\n      queries: () => \"Queries\",\n      customLibs: () => \"Custom libraries\",\n      widgets: () => \"Widgets\",\n    },\n  },\n  import: {\n    modalHeading: () => \"Import\",\n    modalSubheading: () => \"Import partial application from file\",\n  },\n};\n\nexport const DATASOURCE_SECURELY_TITLE = () => \"Secure & fast connection\";\n\nexport const CUSTOM_WIDGET_FEATURE = {\n  addEvent: {\n    addCTA: () => \"Add\",\n    cancelCTA: () => \"Cancel\",\n    addEventCTA: () => \"Add Event\",\n    nameLabel: () => \"Name\",\n    errors: {\n      restricted: () => \"Event name is restricted\",\n      duplicate: () => \"Event name already exists\",\n    },\n  },\n  editSource: {\n    editSourceCTA: () => \"Edit source\",\n    goToSourceCTA: () => \"Go to source editor\",\n  },\n  builder: {\n    header: () => \"Custom Widget Builder\",\n    close: () => \"Close\",\n    connectionLost: () =>\n      \"Connection lost because the custom widget was deselected. Please reselect this widget to continue editing.\",\n    editor: {\n      css: {\n        contextTooltipScss: () => \"Supports SCSS syntax.\",\n        contextTooltipVariables: () => \"You can use following css variables.\",\n        placeholder: () =>\n          \"/* you can access string and number properties of your model using `var(--appsmith-model-<property-name>)`*/\",\n      },\n      html: {\n        placeholder: () =>\n          \"<!-- no need to write html, head, body tags, it is handled by the widget -->\",\n      },\n      js: {\n        placeholder: () =>\n          \"// no need to write window onLoad, it is handled by the widget\",\n      },\n    },\n  },\n  templateKey: {\n    blank: () => \"Blank\",\n    vanillaJs: () => \"Vanilla JS\",\n    react: () => \"React\",\n    vue: () => \"Vue\",\n  },\n  template: {\n    modal: {\n      header: () => \"Are you sure?\",\n      body: () =>\n        \"This will replace the current changes in the HTML, CSS and JS files.\",\n      successCTA: () => \"Replace\",\n      cancelCTA: () => \"Cancel\",\n    },\n    buttonCTA: () => \"Templates\",\n    revert: () => \"Revert to Original\",\n  },\n  layout: {\n    tab: () => \"Tabs\",\n    split: () => \"Splits\",\n  },\n  referrences: {\n    title: () => \"References\",\n    tooltip: {\n      open: () => \"Open references\",\n      close: () => \"Close references\",\n    },\n    liveModel: {\n      helpMessage: [\n        () => \"- Use `appsmith.model` to access your model in javascript\",\n        () =>\n          \"- Use `appsmith.updateModel()` to update your model from javascript\",\n      ],\n      label: () => \"Live Model\",\n    },\n    events: {\n      helpMessage: [\n        () =>\n          \"- Use `appsmith.triggerEvent(&lt;EVENT_NAME&gt;)` to trigger an event\",\n        () =>\n          \"- `appsmith.triggerEvent()` also accepts context data as second arg\",\n      ],\n      label: () => \"Events\",\n      emptyMessage: () =>\n        \"You haven’t created any events. Return to the app editor to add events to this custom widget.\",\n    },\n    help: {\n      message: () =>\n        \"Learn how custom widgets work, and how to access data from the rest of your app within this widget.\",\n      buttonCTA: () => \"Documentation\",\n    },\n  },\n  debugger: {\n    title: () => \"Console\",\n    emptyMessage: () => \"Errors and logs will appear here\",\n    helpDropdown: {\n      stackoverflow: () => \"Search StackOverflow\",\n    },\n    noOnReadyWarning: (url: string) =>\n      `Missing appsmith.onReady() function call. Initiate your component inside 'appsmith.onReady()' for your custom widget to work as expected. For more information - ${url}`,\n  },\n  preview: {\n    eventFired: () => \"Event fired:\",\n    modelUpdated: () => \"Model updated\",\n  },\n};\n\nexport const WIDGET_PANEL_EMPTY_MESSAGE = () =>\n  \"We couldn’t find any UI elements called\";\n\nexport const UI_ELEMENT_PANEL_SEARCH_TEXT = () => \"Search UI elements\";\n\nexport const HTTP_PROTOCOL_INPUT_PLACEHOLDER = () => `Select HTTP Protocol`;\n\nexport const ADD_PAGE_FROM_TEMPLATE_MODAL = {\n  title: () => \"Add page(s) from a template\",\n  buildingBlocksTitle: () => \"Building Blocks\",\n};\n\nexport const HEADER_TITLES = {\n  DATA: () => \"Data\",\n  EDITOR: () => \"Pages\",\n  SETTINGS: () => \"Settings\",\n  LIBRARIES: () => \"Libraries\",\n};\n\nexport const PASTE_FAILED = (str: string): string => `Paste failed! ${str}`;\n\nexport const CREATE_A_NEW_ITEM = (item: string) => `Create a new ${item}`;\n\nexport const MAXIMIZE_BUTTON_TOOLTIP = () =>\n  `Expand code editor to full-screen`;\nexport const MINIMIZE_BUTTON_TOOLTIP = () => `Open code editor next to the UI`;\nexport const SPLITPANE_ANNOUNCEMENT = {\n  TITLE: () => \"Code and UI, side-by-side\",\n  DESCRIPTION: () =>\n    \"Write queries and JS functions while you refer to the UI on the side! This is a beta version that we will continue to improve with your feedback.\",\n};\n\nexport const CANVAS_VIEW_MODE_TOOLTIP = (shortcutKey: string) =>\n  `💡 ${shortcutKey} click a widget to navigate to UI mode.`;\n\nexport const EMPTY_CANVAS_HINTS = {\n  DRAG_DROP_WIDGET_HINT: () => \"Drag and drop a widget here\",\n  DRAG_DROP_BUILDING_BLOCK_HINT: {\n    TITLE: () => \"Drag & drop a building block\",\n    DESCRIPTION: () => \"Make a working app in seconds using functional blocks\",\n  },\n};\n\nexport const BETA_TAG = () => `Beta`;\n\nexport const BUTTON_WIDGET_DEFAULT_LABEL = () => \"Do something\";\n\nexport const PAGE_ENTITY_NAME = \"Page\";\n\nexport const EMPTY_DATASOURCE_TOOLTIP_SIDEBUTTON = () =>\n  \"Create a datasource to power your app with data.\";\n","import { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport type { DataTreeEntity } from \"entities/DataTree/dataTreeTypes\";\nimport { getJSActionForEvalContext } from \"workers/Evaluation/getJSActionForEvalContext\";\n\nexport const getEntityForEvalContextMap: Record<\n  string,\n  (entityName: string, entity: DataTreeEntity) => unknown\n> = {\n  [ENTITY_TYPE.JSACTION]: (entityName, entity) => {\n    return getJSActionForEvalContext(entityName, entity);\n  },\n};\n","import { getEntityForEvalContextMap } from \"@appsmith/workers/Evaluation/getEntityForEvalContextMap\";\nimport type { DataTreeEntity } from \"entities/DataTree/dataTreeTypes\";\n\nexport function getEntityForEvalContext(\n  entity: DataTreeEntity,\n  entityName: string,\n) {\n  const getterMethod = getEntityForEvalContextMap[entity.ENTITY_TYPE];\n\n  if (!getterMethod) return entity;\n\n  return getterMethod(entityName, entity);\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport set from \"lodash/set\";\nimport type { DataTreeEntityConfig } from \"@appsmith/entities/DataTree/types\";\nimport type {\n  ConfigTree,\n  DataTree,\n  DataTreeEntity,\n} from \"entities/DataTree/dataTreeTypes\";\nimport type { EvalContext } from \"workers/Evaluation/evaluate\";\nimport type { EvaluationVersion } from \"constants/EvalConstants\";\nimport { addFn } from \"workers/Evaluation/fns/utils/fnGuard\";\nimport {\n  getEntityFunctions,\n  getPlatformFunctions,\n} from \"@appsmith/workers/Evaluation/fns\";\nimport { getEntityForEvalContext } from \"workers/Evaluation/getEntityForContext\";\nimport { klona } from \"klona/full\";\nimport { isEmpty } from \"lodash\";\nimport setters from \"workers/Evaluation/setters\";\ndeclare global {\n  /** All identifiers added to the worker global scope should also\n   * be included in the DEDICATED_WORKER_GLOBAL_SCOPE_IDENTIFIERS in\n   * app/client/src/constants/WidgetValidation.ts\n   * */\n\n  interface Window {\n    $isDataField: boolean;\n    $isAsync: boolean;\n    $evaluationVersion: EvaluationVersion;\n    $cloudHosting: boolean;\n  }\n}\n\nexport enum ExecutionType {\n  PROMISE = \"PROMISE\",\n  TRIGGER = \"TRIGGER\",\n}\n\n/**\n * This method returns new dataTree with entity function and platform function\n */\nexport const addDataTreeToContext = (args: {\n  EVAL_CONTEXT: EvalContext;\n  dataTree: Readonly<DataTree>;\n  removeEntityFunctions?: boolean;\n  isTriggerBased: boolean;\n  configTree: ConfigTree;\n}) => {\n  const {\n    configTree,\n    dataTree,\n    EVAL_CONTEXT,\n    isTriggerBased,\n    removeEntityFunctions = false,\n  } = args;\n  const dataTreeEntries = Object.entries(dataTree);\n  const entityFunctionCollection: Record<string, Record<string, Function>> = {};\n\n  if (isTriggerBased && !removeEntityFunctions) setters.clear();\n\n  for (const [entityName, entity] of dataTreeEntries) {\n    EVAL_CONTEXT[entityName] = getEntityForEvalContext(entity, entityName);\n\n    // when we evaluate data field and removeEntityFunctions is true then we skip adding entity function to evalContext\n    const skipEntityFunctions = !removeEntityFunctions && !isTriggerBased;\n\n    if (skipEntityFunctions) continue;\n\n    for (const entityFn of getEntityFunctions()) {\n      if (!entityFn.qualifier(entity)) continue;\n      const func = entityFn.fn(entity, entityName);\n      const fullPath = `${entityFn.path || `${entityName}.${entityFn.name}`}`;\n      set(entityFunctionCollection, fullPath, func);\n    }\n\n    // Don't add entity function ( setter method ) to evalContext if removeEntityFunctions is true\n    if (removeEntityFunctions) continue;\n\n    const entityConfig = configTree[entityName];\n    const entityMethodMap = setters.getEntitySettersFromConfig(\n      entityConfig,\n      entityName,\n      entity,\n    );\n\n    if (isEmpty(entityMethodMap)) continue;\n    EVAL_CONTEXT[entityName] = Object.assign(\n      {},\n      dataTree[entityName],\n      entityMethodMap,\n    );\n  }\n\n  if (removeEntityFunctions)\n    return removeEntityFunctionsFromEvalContext(\n      entityFunctionCollection,\n      EVAL_CONTEXT,\n    );\n\n  if (!isTriggerBased) return;\n  // if eval is not trigger based i.e., sync eval then we skip adding entity function to evalContext\n  addEntityFunctionsToEvalContext(EVAL_CONTEXT, entityFunctionCollection);\n};\n\nexport const addEntityFunctionsToEvalContext = (\n  evalContext: EvalContext,\n  entityFunctionCollection: Record<string, Record<string, Function>>,\n) => {\n  for (const [entityName, funcObj] of Object.entries(\n    entityFunctionCollection,\n  )) {\n    evalContext[entityName] = Object.assign(\n      {},\n      evalContext[entityName],\n      funcObj,\n    );\n  }\n};\n\nexport const addPlatformFunctionsToEvalContext = (context: any) => {\n  for (const fnDef of getPlatformFunctions()) {\n    addFn(context, fnDef.name, fnDef.fn.bind(context));\n  }\n};\n\nexport function getAllSetterFunctions(\n  dataTree: DataTree,\n  configTree: ConfigTree,\n) {\n  const entitiesSetterFunctions: Record<string, true> = {};\n  const dataTreeEntries = Object.entries(dataTree);\n  for (const [entityName, entity] of dataTreeEntries) {\n    const entityConfig = configTree[entityName];\n    const entityMethodMap = setters.getEntitySettersFromConfig(\n      entityConfig,\n      entityName,\n      entity,\n    );\n\n    if (isEmpty(entityMethodMap)) continue;\n\n    for (const methodName of Object.keys(entityMethodMap)) {\n      entitiesSetterFunctions[`${entityName}.${methodName}`] = true;\n    }\n  }\n  return entitiesSetterFunctions;\n}\n\nexport function getEntitySetterFunctions(\n  entityConfig: DataTreeEntityConfig,\n  entityName: string,\n  entity: DataTreeEntity,\n) {\n  const entitySetterFunctions: Record<string, true> = {};\n  const entityMethodMap = setters.getEntitySettersFromConfig(\n    entityConfig,\n    entityName,\n    entity,\n  );\n\n  for (const methodName of Object.keys(entityMethodMap)) {\n    entitySetterFunctions[`${entityName}.${methodName}`] = true;\n  }\n  return entitySetterFunctions;\n}\n\nexport const getAllAsyncFunctions = (\n  dataTree: DataTree,\n  configTree: ConfigTree,\n) => {\n  let allAsyncFunctions: Record<string, true> = {};\n  const dataTreeEntries = Object.entries(dataTree);\n  for (const [entityName, entity] of dataTreeEntries) {\n    for (const entityFn of getEntityFunctions()) {\n      if (!entityFn.qualifier(entity)) continue;\n      const fullPath = `${entityFn.path || `${entityName}.${entityFn.name}`}`;\n      allAsyncFunctions[fullPath] = true;\n    }\n  }\n  const setterMethods = getAllSetterFunctions(dataTree, configTree);\n  allAsyncFunctions = { ...allAsyncFunctions, ...setterMethods };\n  for (const platformFn of getPlatformFunctions()) {\n    allAsyncFunctions[platformFn.name] = true;\n  }\n  return allAsyncFunctions;\n};\n\nexport const removeEntityFunctionsFromEvalContext = (\n  entityFunctionCollection: Record<string, Record<string, Function>>,\n  evalContext: EvalContext,\n) => {\n  for (const [entityName, funcObj] of Object.entries(\n    entityFunctionCollection,\n  )) {\n    const entity = klona(evalContext[entityName]);\n    Object.keys(funcObj).forEach((entityFn) => {\n      delete entity[entityFn];\n    });\n    evalContext[entityName] = entity;\n  }\n};\n","import { APPSMITH_NAMESPACED_FUNCTIONS as EE_APPSMITH_NAMESPACED_FUNCTIONS } from \"@appsmith/entities/Engine/actionHelpers\";\n\nexport enum APPSMITH_GLOBAL_FUNCTIONS {\n  navigateTo = \"navigateTo\",\n  showAlert = \"showAlert\",\n  showModal = \"showModal\",\n  closeModal = \"closeModal\",\n  storeValue = \"storeValue\",\n  removeValue = \"removeValue\",\n  clearStore = \"clearStore\",\n  download = \"download\",\n  copyToClipboard = \"copyToClipboard\",\n  resetWidget = \"resetWidget\",\n  setInterval = \"setInterval\",\n  clearInterval = \"clearInterval\",\n  postWindowMessage = \"postWindowMessage\",\n}\n\nexport enum APPSMITH_NAMESPACED_FUNCTIONS {\n  getGeolocation = \"appsmith.geolocation.getCurrentPosition\",\n  watchGeolocation = \"appsmith.geolocation.watchPosition\",\n  stopWatchGeolocation = \"appsmith.geolocation.clearWatch\",\n}\n\nexport enum APPSMITH_INTEGRATIONS {\n  none = \"none\",\n  integration = \"integration\",\n  jsFunction = \"jsFunction\",\n}\n\nexport const AppsmithFunction = {\n  ...APPSMITH_INTEGRATIONS,\n  ...APPSMITH_GLOBAL_FUNCTIONS,\n  ...APPSMITH_NAMESPACED_FUNCTIONS,\n  ...EE_APPSMITH_NAMESPACED_FUNCTIONS,\n};\n\nexport const AppsmithFunctionsWithFields = [\n  ...Object.values(APPSMITH_NAMESPACED_FUNCTIONS),\n  ...Object.keys(APPSMITH_GLOBAL_FUNCTIONS),\n];\n\nexport const RESET_CHILDREN_OPTIONS = [\n  { label: \"true\", value: \"true\", id: \"true\" },\n  { label: \"false\", value: \"false\", id: \"false\" },\n];\n\nexport const FILE_TYPE_OPTIONS = [\n  { label: \"Select file type (optional)\", value: \"\", id: \"\" },\n  { label: \"Plain text\", value: \"'text/plain'\", id: \"text/plain\" },\n  { label: \"HTML\", value: \"'text/html'\", id: \"text/html\" },\n  { label: \"CSV\", value: \"'text/csv'\", id: \"text/csv\" },\n  { label: \"JSON\", value: \"'application/json'\", id: \"application/json\" },\n  { label: \"JPEG\", value: \"'image/jpeg'\", id: \"image/jpeg\" },\n  { label: \"PNG\", value: \"'image/png'\", id: \"image/png\" },\n  { label: \"SVG\", value: \"'image/svg+xml'\", id: \"image/svg+xml\" },\n];\n\nexport const NAVIGATION_TARGET_FIELD_OPTIONS = [\n  {\n    label: \"Same window\",\n    value: \"'SAME_WINDOW'\",\n    id: \"SAME_WINDOW\",\n  },\n  {\n    label: \"New window\",\n    value: \"'NEW_WINDOW'\",\n    id: \"NEW_WINDOW\",\n  },\n];\n\nexport const ViewTypes = {\n  SELECTOR_VIEW: \"SELECTOR_VIEW\",\n  KEY_VALUE_VIEW: \"KEY_VALUE_VIEW\",\n  TEXT_VIEW: \"TEXT_VIEW\",\n  BOOL_VIEW: \"BOOL_VIEW\",\n  TAB_VIEW: \"TAB_VIEW\",\n  NO_VIEW: \"NO_VIEW\",\n  ACTION_SELECTOR_VIEW: \"ACTION_SELECTOR_VIEW\",\n};\n\nexport const NAVIGATE_TO_TAB_OPTIONS = {\n  PAGE_NAME: \"page-name\",\n  URL: \"url\",\n};\n\nexport const NEW_MODAL_LABEL = \"New Modal\";\nconst SELECT_OPTIONS_LABEL = \"Select file type (optional)\";\nexport const DEFAULT_LABELS = [NEW_MODAL_LABEL, SELECT_OPTIONS_LABEL];\n\nexport const DEFAULT_SELECTOR_VIEW_TEXT = \"Select Action\";\n\nexport const EMPTY_BINDING = \"{{}}\";\nexport const EMPTY_BINDING_WITH_EMPTY_OBJECT = \"{{{}}}\";\n\nexport enum FieldType {\n  PARAMS_FIELD = \"PARAMS_FIELD\",\n  ACTION_SELECTOR_FIELD = \"ACTION_SELECTOR_FIELD\",\n  ON_SUCCESS_FIELD = \"ON_SUCCESS_FIELD\",\n  ON_ERROR_FIELD = \"ON_ERROR_FIELD\",\n  SHOW_MODAL_FIELD = \"SHOW_MODAL_FIELD\",\n  CLOSE_MODAL_FIELD = \"CLOSE_MODAL_FIELD\",\n  PAGE_SELECTOR_FIELD = \"PAGE_SELECTOR_FIELD\",\n  KEY_VALUE_FIELD = \"KEY_VALUE_FIELD\",\n  URL_FIELD = \"URL_FIELD\",\n  ALERT_TEXT_FIELD = \"ALERT_TEXT_FIELD\",\n  ALERT_TYPE_SELECTOR_FIELD = \"ALERT_TYPE_SELECTOR_FIELD\",\n  KEY_TEXT_FIELD_REMOVE_VALUE = \"KEY_TEXT_FIELD_REMOVE_VALUE\",\n  KEY_TEXT_FIELD_STORE_VALUE = \"KEY_TEXT_FIELD_STORE_VALUE\",\n  VALUE_TEXT_FIELD = \"VALUE_TEXT_FIELD\",\n  QUERY_PARAMS_FIELD = \"QUERY_PARAMS_FIELD\",\n  DOWNLOAD_DATA_FIELD = \"DOWNLOAD_DATA_FIELD\",\n  DOWNLOAD_FILE_NAME_FIELD = \"DOWNLOAD_FILE_NAME_FIELD\",\n  DOWNLOAD_FILE_TYPE_FIELD = \"DOWNLOAD_FILE_TYPE_FIELD\",\n  COPY_TEXT_FIELD = \"COPY_TEXT_FIELD\",\n  NAVIGATION_TARGET_FIELD = \"NAVIGATION_TARGET_FIELD\",\n  WIDGET_NAME_FIELD = \"WIDGET_NAME_FIELD\",\n  RESET_CHILDREN_FIELD = \"RESET_CHILDREN_FIELD\",\n  ARGUMENT_KEY_VALUE_FIELD = \"ARGUMENT_KEY_VALUE_FIELD\",\n  CALLBACK_FUNCTION_FIELD_SET_INTERVAL = \"CALLBACK_FUNCTION_FIELD_SET_INTERVAL\",\n  CALLBACK_FUNCTION_FIELD_GEOLOCATION = \"CALLBACK_FUNCTION_FIELD_GEOLOCATION\",\n  DELAY_FIELD = \"DELAY_FIELD\",\n  ID_FIELD = \"ID_FIELD\",\n  CLEAR_INTERVAL_ID_FIELD = \"CLEAR_INTERVAL_ID_FIELD\",\n  MESSAGE_FIELD = \"MESSAGE_FIELD\",\n  TARGET_ORIGIN_FIELD = \"TARGET_ORIGIN_FIELD\",\n  SOURCE_FIELD = \"SOURCE_FIELD\",\n  PAGE_NAME_AND_URL_TAB_SELECTOR_FIELD = \"PAGE_NAME_AND_URL_TAB_SELECTOR_FIELD\",\n  API_AND_QUERY_SUCCESS_FAILURE_TAB_FIELD = \"API_AND_QUERY_SUCCESS_FAILURE_TAB_FIELD\",\n  CALLBACK_FUNCTION_API_AND_QUERY = \"CALLBACK_FUNCTION_API_AND_QUERY\",\n  ADD_ACTION = \"ADD_ACTION\",\n}\n\nexport const Variants = {\n  mainBlock: \"mainBlock\",\n  callbackBlock: \"callbackBlock\",\n  hoverBorder: \"hoverBorder\",\n};\n","import type {\n  PropertyOverrideDependency,\n  OverridingPropertyPaths,\n  WidgetEntity,\n  ActionEntity,\n  JSActionEntity,\n} from \"@appsmith/entities/DataTree/types\";\nimport type { DataTreeEntity } from \"entities/DataTree/dataTreeTypes\";\nimport { OverridingPropertyType } from \"@appsmith/entities/DataTree/types\";\nimport {\n  isAction,\n  isJSAction,\n  isWidget,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport type { Module } from \"@appsmith/constants/ModuleConstants\";\ninterface SetOverridingPropertyParams {\n  key: string;\n  value: string;\n  propertyOverrideDependency: PropertyOverrideDependency;\n  overridingPropertyPaths: OverridingPropertyPaths;\n  type: OverridingPropertyType;\n}\n\nexport const setOverridingProperty = ({\n  key: propertyName,\n  overridingPropertyPaths,\n  propertyOverrideDependency,\n  type,\n  value: overridingPropertyKey,\n}: SetOverridingPropertyParams) => {\n  if (!(propertyName in propertyOverrideDependency)) {\n    propertyOverrideDependency[propertyName] = {\n      [OverridingPropertyType.DEFAULT]: undefined,\n      [OverridingPropertyType.META]: undefined,\n    };\n  }\n  switch (type) {\n    case OverridingPropertyType.DEFAULT:\n      propertyOverrideDependency[propertyName][OverridingPropertyType.DEFAULT] =\n        overridingPropertyKey;\n      break;\n\n    case OverridingPropertyType.META:\n      propertyOverrideDependency[propertyName][OverridingPropertyType.META] =\n        overridingPropertyKey;\n\n      break;\n    default:\n  }\n\n  if (Array.isArray(overridingPropertyPaths[overridingPropertyKey])) {\n    const updatedOverridingProperty = new Set(\n      overridingPropertyPaths[overridingPropertyKey],\n    );\n    overridingPropertyPaths[overridingPropertyKey] = [\n      ...updatedOverridingProperty.add(propertyName),\n    ];\n  } else {\n    overridingPropertyPaths[overridingPropertyKey] = [propertyName];\n  }\n  // if property dependent on metaProperty also has defaultProperty then defaultProperty will also override metaProperty on eval.\n  const defaultPropertyName = propertyOverrideDependency[propertyName].DEFAULT;\n  if (type === OverridingPropertyType.META && defaultPropertyName) {\n    overridingPropertyPaths[defaultPropertyName].push(overridingPropertyKey);\n  }\n};\n\nexport const generateDataTreeModuleInputs = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  moduleInputs: Module[\"inputsForm\"],\n) => {\n  return {\n    unEvalEntity: null,\n    configEntity: null,\n  };\n};\n\nexport function isWidgetActionOrJsObject(\n  entity: DataTreeEntity,\n): entity is ActionEntity | WidgetEntity | JSActionEntity {\n  return isWidget(entity) || isAction(entity) || isJSAction(entity);\n}\n","import type { DependencyMap, EvaluationError } from \"utils/DynamicBindingUtils\";\nimport {\n  EVAL_ERROR_PATH,\n  isChildPropertyPath,\n  isDynamicValue,\n  PropertyEvaluationErrorType,\n  isPathDynamicTrigger,\n  isPathADynamicBinding,\n} from \"utils/DynamicBindingUtils\";\nimport type { Diff } from \"deep-diff\";\nimport type {\n  DataTreeEntity,\n  DataTree,\n  ConfigTree,\n} from \"entities/DataTree/dataTreeTypes\";\nimport { ENTITY_TYPE } from \"@appsmith/entities/DataTree/types\";\nimport _, { difference, find, get, has, isEmpty, isNil, set } from \"lodash\";\nimport type { WidgetTypeConfigMap } from \"WidgetProvider/factory\";\nimport { PluginType } from \"entities/Action\";\nimport { klona } from \"klona/full\";\nimport { warn as logWarn } from \"loglevel\";\nimport type { EvalMetaUpdates } from \"@appsmith/workers/common/DataTreeEvaluator/types\";\nimport type {\n  JSActionEntityConfig,\n  PrivateWidgets,\n  JSActionEntity,\n  ActionEntity,\n  AppsmithEntity,\n  WidgetEntity,\n  DataTreeEntityConfig,\n  WidgetEntityConfig,\n} from \"@appsmith/entities/DataTree/types\";\nimport type { EvalProps } from \"workers/common/DataTreeEvaluator\";\nimport { validateWidgetProperty } from \"workers/common/DataTreeEvaluator/validationUtils\";\nimport { isWidgetActionOrJsObject } from \"@appsmith/entities/DataTree/utils\";\n\n// Dropdown1.options[1].value -> Dropdown1.options[1]\n// Dropdown1.options[1] -> Dropdown1.options\n// Dropdown1.options -> Dropdown1\nexport const IMMEDIATE_PARENT_REGEX = /^(.*)(\\..*|\\[.*\\])$/;\n\nexport enum DataTreeDiffEvent {\n  NEW = \"NEW\",\n  DELETE = \"DELETE\",\n  EDIT = \"EDIT\",\n  NOOP = \"NOOP\", // No Operation (don’t do anything)\n}\n\nexport interface DataTreeDiff {\n  payload: {\n    propertyPath: string;\n    value?: string;\n  };\n  event: DataTreeDiffEvent;\n}\n\nexport class CrashingError extends Error {}\n\nexport const convertPathToString = (arrPath: Array<string | number>) => {\n  let string = \"\";\n  arrPath.forEach((segment) => {\n    if (isInt(segment)) {\n      string = string + \"[\" + segment + \"]\";\n    } else {\n      if (string.length !== 0) {\n        string = string + \".\";\n      }\n      string = string + segment;\n    }\n  });\n  return string;\n};\n\n// Todo: improve the logic here\n// Right now NaN, Infinity, floats, everything works\nfunction isInt(val: string | number): boolean {\n  return Number.isInteger(val) || (_.isString(val) && /^\\d+$/.test(val));\n}\n\n// Removes the entity name from the property path\nexport function getEntityNameAndPropertyPath(fullPath: string): {\n  entityName: string;\n  propertyPath: string;\n} {\n  const indexOfFirstDot = fullPath.indexOf(\".\");\n  if (indexOfFirstDot === -1) {\n    // No dot was found so path is the entity name itself\n    return {\n      entityName: fullPath,\n      propertyPath: \"\",\n    };\n  }\n  const entityName = fullPath.substring(0, indexOfFirstDot);\n  const propertyPath = fullPath.substring(indexOfFirstDot + 1);\n  return { entityName, propertyPath };\n}\n\nexport function translateCollectionDiffs(\n  propertyPath: string,\n  data: unknown,\n  event: DataTreeDiffEvent,\n) {\n  const dataTreeDiffs: DataTreeDiff[] = [];\n  if (Array.isArray(data)) {\n    data.forEach((diff, idx) => {\n      dataTreeDiffs.push({\n        event,\n        payload: {\n          propertyPath: `${propertyPath}[${idx}]`,\n        },\n      });\n    });\n  } else if (isTrueObject(data)) {\n    Object.keys(data).forEach((diffKey) => {\n      const path = `${propertyPath}.${diffKey}`;\n      dataTreeDiffs.push({\n        event,\n        payload: {\n          propertyPath: path,\n        },\n      });\n    });\n  }\n  return dataTreeDiffs;\n}\n\n//these paths are not required to go through evaluate tree as these are internal properties\nconst ignorePathsForEvalRegex =\n  \".(reactivePaths|bindingPaths|triggerPaths|validationPaths|dynamicBindingPathList)\";\n\n//match if paths are part of ignorePathsForEvalRegex\nconst isUninterestingChangeForDependencyUpdate = (path: string) => {\n  return path.match(ignorePathsForEvalRegex);\n};\n\nexport const translateDiffEventToDataTreeDiffEvent = (\n  difference: Diff<any, any>,\n  unEvalDataTree: DataTree,\n): DataTreeDiff | DataTreeDiff[] => {\n  let result: DataTreeDiff | DataTreeDiff[] = {\n    payload: {\n      propertyPath: \"\",\n      value: \"\",\n    },\n    event: DataTreeDiffEvent.NOOP,\n  };\n  if (!difference.path) {\n    return result;\n  }\n  const propertyPath = convertPathToString(difference.path);\n\n  // add propertyPath to NOOP event\n  result.payload = {\n    propertyPath,\n    value: \"\",\n  };\n\n  //we do not need evaluate these paths because these are internal paths\n  const isUninterestingPathForUpdateTree =\n    isUninterestingChangeForDependencyUpdate(propertyPath);\n  if (!!isUninterestingPathForUpdateTree) {\n    return result;\n  }\n  const { entityName } = getEntityNameAndPropertyPath(propertyPath);\n  const entity = unEvalDataTree[entityName];\n  const isJsAction = isJSAction(entity);\n  switch (difference.kind) {\n    case \"N\": {\n      result.event = DataTreeDiffEvent.NEW;\n      result.payload = {\n        propertyPath,\n      };\n      break;\n    }\n    case \"D\": {\n      result.event = DataTreeDiffEvent.DELETE;\n      result.payload = { propertyPath };\n      break;\n    }\n    case \"E\": {\n      const rhsChange =\n        typeof difference.rhs === \"string\" &&\n        (isDynamicValue(difference.rhs) || isJsAction);\n\n      const lhsChange =\n        typeof difference.lhs === \"string\" &&\n        (isDynamicValue(difference.lhs) || isJsAction);\n\n      if (rhsChange || lhsChange) {\n        result = [\n          {\n            event:\n              difference.lhs === undefined\n                ? DataTreeDiffEvent.NEW\n                : DataTreeDiffEvent.EDIT,\n            payload: {\n              propertyPath,\n              value: difference.rhs,\n            },\n          },\n        ];\n        /**\n         * If lhs is an array/object\n         * Add delete events for all memberExpressions\n         */\n\n        const dataTreeDeleteDiffs = translateCollectionDiffs(\n          propertyPath,\n          difference.lhs,\n          DataTreeDiffEvent.DELETE,\n        );\n        result = result.concat(dataTreeDeleteDiffs);\n      } else if (difference.lhs === undefined || difference.rhs === undefined) {\n        // Handle static value changes that change structure that can lead to\n        // old bindings being eligible\n        if (difference.lhs === undefined && !isNil(difference.rhs)) {\n          result.event = DataTreeDiffEvent.NEW;\n          result.payload = { propertyPath };\n        }\n        if (difference.rhs === undefined && !isNil(difference.lhs)) {\n          result = [\n            {\n              event: DataTreeDiffEvent.EDIT,\n              payload: {\n                propertyPath,\n                value: difference.rhs,\n              },\n            },\n          ];\n\n          const dataTreeDeleteDiffs = translateCollectionDiffs(\n            propertyPath,\n            difference.lhs,\n            DataTreeDiffEvent.DELETE,\n          );\n\n          result = dataTreeDeleteDiffs.concat(result);\n        }\n      } else if (\n        isTrueObject(difference.lhs) &&\n        !isTrueObject(difference.rhs)\n      ) {\n        // This will happen for static value changes where a property went\n        // from being an object to any other type like string or number\n        // in such a case we want to delete all nested paths of the\n        // original lhs object\n\n        result = translateCollectionDiffs(\n          propertyPath,\n          difference.lhs,\n          DataTreeDiffEvent.DELETE,\n        );\n\n        // when an object is being replaced by an array\n        // list all new array accessors that are being added\n        // so dependencies will be created based on existing bindings\n        if (Array.isArray(difference.rhs)) {\n          result = result.concat(\n            translateCollectionDiffs(\n              propertyPath,\n              difference.rhs,\n              DataTreeDiffEvent.NEW,\n            ),\n          );\n        }\n      } else if (\n        !isTrueObject(difference.lhs) &&\n        isTrueObject(difference.rhs)\n      ) {\n        // This will happen for static value changes where a property went\n        // from being any other type like string or number to an object\n        // in such a case we want to add all nested paths of the\n        // new rhs object\n        result = translateCollectionDiffs(\n          propertyPath,\n          difference.rhs,\n          DataTreeDiffEvent.NEW,\n        );\n\n        // when an array is being replaced by an object\n        // remove all array accessors that are deleted\n        // so dependencies by existing bindings are removed\n        if (Array.isArray(difference.lhs)) {\n          result = result.concat(\n            translateCollectionDiffs(\n              propertyPath,\n              difference.lhs,\n              DataTreeDiffEvent.DELETE,\n            ),\n          );\n        }\n      }\n      break;\n    }\n    case \"A\": {\n      return translateDiffEventToDataTreeDiffEvent(\n        {\n          ...difference.item,\n          path: [...difference.path, difference.index],\n        },\n        unEvalDataTree,\n      );\n    }\n    default: {\n      break;\n    }\n  }\n  return result;\n};\n\nexport const translateDiffArrayIndexAccessors = (\n  propertyPath: string,\n  array: unknown[],\n  event: DataTreeDiffEvent,\n) => {\n  const result: DataTreeDiff[] = [];\n  array.forEach((data, index) => {\n    const path = `${propertyPath}[${index}]`;\n    result.push({\n      event,\n      payload: {\n        propertyPath: path,\n      },\n    });\n  });\n  return result;\n};\n/*\n  Table1.selectedRow\n  Table1.selectedRow.email: [\"Input1.defaultText\"]\n */\n\nexport const addDependantsOfNestedPropertyPaths = (\n  parentPaths: Array<string>,\n  inverseMap: DependencyMap,\n): Set<string> => {\n  const withNestedPaths: Set<string> = new Set();\n  const dependantNodes = Object.keys(inverseMap);\n  parentPaths.forEach((propertyPath) => {\n    withNestedPaths.add(propertyPath);\n    dependantNodes\n      .filter((dependantNodePath) =>\n        isChildPropertyPath(propertyPath, dependantNodePath),\n      )\n      .forEach((dependantNodePath) => {\n        inverseMap[dependantNodePath].forEach((path) => {\n          withNestedPaths.add(path);\n        });\n      });\n  });\n  return withNestedPaths;\n};\n\nexport function isWidget(\n  entity: Partial<DataTreeEntity> | DataTreeEntityConfig,\n): entity is WidgetEntity | WidgetEntityConfig {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.WIDGET\n  );\n}\n\nexport const shouldSuppressAutoComplete = (widget: WidgetEntity) =>\n  Boolean(widget.suppressAutoComplete);\n\nexport const shouldSuppressDebuggerError = (widget: WidgetEntity) =>\n  Boolean(widget.suppressDebuggerError);\n\nexport function isAction(\n  entity: Partial<DataTreeEntity>,\n): entity is ActionEntity {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.ACTION\n  );\n}\n\nexport function isAppsmithEntity(\n  entity: DataTreeEntity,\n): entity is AppsmithEntity {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.APPSMITH\n  );\n}\n\nexport function isJSAction(entity: DataTreeEntity): entity is JSActionEntity {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.JSACTION\n  );\n}\n/**\n *\n * isAnyJSAction checks if the entity is a JSAction ( or a JSModuleInstance on EE )\n */\nexport function isAnyJSAction(entity: DataTreeEntity) {\n  return isJSAction(entity);\n}\n\nexport function isJSActionConfig(\n  entity: DataTreeEntityConfig,\n): entity is JSActionEntityConfig {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.JSACTION\n  );\n}\n\nexport function isJSObject(entity: DataTreeEntity): entity is JSActionEntity {\n  return (\n    typeof entity === \"object\" &&\n    \"ENTITY_TYPE\" in entity &&\n    entity.ENTITY_TYPE === ENTITY_TYPE.JSACTION &&\n    \"pluginType\" in entity &&\n    entity.pluginType === PluginType.JS\n  );\n}\n\nexport function isDataTreeEntity(entity: unknown) {\n  return !!entity && typeof entity === \"object\" && \"ENTITY_TYPE\" in entity;\n}\n\nexport const serialiseToBigInt = (value: any) =>\n  JSON.stringify(value, (_, v) => (typeof v === \"bigint\" ? v.toString() : v));\n\nexport const removeFunctionsAndSerialzeBigInt = (value: any) =>\n  JSON.parse(serialiseToBigInt(value));\n// We need to remove functions from data tree to avoid any unexpected identifier while JSON parsing\n// Check issue https://github.com/appsmithorg/appsmith/issues/719\nexport const removeFunctions = (value: any) => {\n  if (_.isFunction(value)) {\n    return \"Function call\";\n  } else if (_.isObject(value)) {\n    return removeFunctionsAndSerialzeBigInt(value);\n  } else {\n    return value;\n  }\n};\n\nexport const makeParentsDependOnChildren = (\n  depMap: DependencyMap,\n  allkeys: Record<string, true>,\n): DependencyMap => {\n  //return depMap;\n  // Make all parents depend on child\n  Object.keys(depMap).forEach((key) => {\n    depMap = makeParentsDependOnChild(depMap, key, allkeys);\n    depMap[key].forEach((path) => {\n      depMap = makeParentsDependOnChild(depMap, path, allkeys);\n    });\n  });\n  return depMap;\n};\n\nexport const makeParentsDependOnChild = (\n  depMap: DependencyMap,\n  child: string,\n  allkeys: Record<string, true>,\n): DependencyMap => {\n  const result: DependencyMap = depMap;\n  let curKey = child;\n  if (!allkeys[curKey]) {\n    logWarn(\n      `makeParentsDependOnChild - ${curKey} is not present in dataTree.`,\n      \"This might result in a cyclic dependency.\",\n    );\n  }\n  let matches: Array<string> | null;\n  // Note: The `=` is intentional\n  // Stops looping when match is null\n  while ((matches = curKey.match(IMMEDIATE_PARENT_REGEX)) !== null) {\n    const parentKey = matches[1];\n    // Todo: switch everything to set.\n    const existing = new Set(result[parentKey] || []);\n    existing.add(curKey);\n    result[parentKey] = Array.from(existing);\n    curKey = parentKey;\n  }\n  return result;\n};\n\n// The idea is to find the immediate parents of the property paths\n// e.g. For Table1.selectedRow.email, the parent is Table1.selectedRow\nexport const getImmediateParentsOfPropertyPaths = (\n  propertyPaths: Array<string>,\n): Array<string> => {\n  // Use a set to ensure that we dont have duplicates\n  const parents: Set<string> = new Set();\n\n  propertyPaths.forEach((path) => {\n    const matches = path.match(IMMEDIATE_PARENT_REGEX);\n\n    if (matches !== null) {\n      parents.add(matches[1]);\n    }\n  });\n\n  return Array.from(parents);\n};\n\nexport const getAllPaths = (\n  records: any,\n  curKey = \"\",\n  result: Record<string, true> = {},\n): Record<string, true> => {\n  // Add the key if it exists\n  if (curKey) result[curKey] = true;\n  if (Array.isArray(records)) {\n    for (let i = 0; i < records.length; i++) {\n      const tempKey = curKey ? `${curKey}[${i}]` : `${i}`;\n      getAllPaths(records[i], tempKey, result);\n    }\n  } else if (isTrueObject(records)) {\n    for (const key of Object.keys(records)) {\n      const tempKey = curKey ? `${curKey}.${key}` : `${key}`;\n      getAllPaths(records[key], tempKey, result);\n    }\n  }\n  return result;\n};\nexport const trimDependantChangePaths = (\n  changePaths: Set<string>,\n  dependencyMap: DependencyMap,\n): Array<string> => {\n  const trimmedPaths = [];\n  for (const path of changePaths) {\n    let foundADependant = false;\n    if (path in dependencyMap) {\n      const dependants = dependencyMap[path];\n      for (const dependantPath of dependants) {\n        if (changePaths.has(dependantPath)) {\n          foundADependant = true;\n          break;\n        }\n      }\n    }\n    if (!foundADependant) {\n      trimmedPaths.push(path);\n    }\n  }\n  return trimmedPaths;\n};\n\nexport function getSafeToRenderDataTree(\n  tree: DataTree,\n  widgetTypeConfigMap: WidgetTypeConfigMap,\n  configTree: ConfigTree,\n) {\n  return Object.keys(tree).reduce((tree, entityKey: string) => {\n    const entity = tree[entityKey];\n\n    if (!isWidget(entity)) {\n      return tree;\n    }\n    const entityConfig = configTree[entityKey] as WidgetEntityConfig;\n\n    const safeToRenderEntity = { ...entity };\n    // Set user input values to their parsed values\n    Object.entries(entityConfig.validationPaths).forEach(\n      ([property, validation]) => {\n        const value = _.get(entity, property);\n        // Pass it through parse\n        const { parsed } = validateWidgetProperty(\n          validation,\n          value,\n          entityConfig,\n          property,\n        );\n        _.set(safeToRenderEntity, property, parsed);\n      },\n    );\n    // Set derived values to undefined or else they would go as bindings\n    Object.keys(\n      widgetTypeConfigMap[entityConfig.type].derivedProperties,\n    ).forEach((property) => {\n      _.set(safeToRenderEntity, property, undefined);\n    });\n    return { ...tree, [entityKey]: safeToRenderEntity };\n  }, tree);\n}\n\nexport const addErrorToEntityProperty = ({\n  configTree,\n  errors,\n  evalProps,\n  fullPropertyPath,\n}: {\n  errors: EvaluationError[];\n  fullPropertyPath: string;\n  evalProps: EvalProps;\n  configTree: ConfigTree;\n}) => {\n  const { entityName, propertyPath } =\n    getEntityNameAndPropertyPath(fullPropertyPath);\n  const isPrivateEntityPath =\n    getAllPrivateWidgetsInDataTree(configTree)[entityName];\n  const logBlackList = get(configTree, `${entityName}.logBlackList`, {});\n  if (propertyPath && !(propertyPath in logBlackList) && !isPrivateEntityPath) {\n    const errorPath = `${entityName}.${EVAL_ERROR_PATH}['${propertyPath}']`;\n    const existingErrors = get(evalProps, errorPath, []) as EvaluationError[];\n    set(evalProps, errorPath, existingErrors.concat(errors));\n  }\n};\n\nexport const resetValidationErrorsForEntityProperty = ({\n  evalProps,\n  fullPropertyPath,\n}: {\n  fullPropertyPath: string;\n  evalProps: EvalProps;\n}) => {\n  const { entityName, propertyPath } =\n    getEntityNameAndPropertyPath(fullPropertyPath);\n  if (propertyPath) {\n    const errorPath = `${entityName}.${EVAL_ERROR_PATH}['${propertyPath}']`;\n    const existingErrorsExceptValidation = (\n      _.get(evalProps, errorPath, []) as EvaluationError[]\n    ).filter(\n      (error) => error.errorType !== PropertyEvaluationErrorType.VALIDATION,\n    );\n    _.set(evalProps, errorPath, existingErrorsExceptValidation);\n  }\n};\n\n// For the times when you need to know if something truly an object like { a: 1, b: 2}\n// typeof, lodash.isObject and others will return false positives for things like array, null, etc\nexport const isTrueObject = (\n  item: unknown,\n): item is Record<string, unknown> => {\n  return Object.prototype.toString.call(item) === \"[object Object]\";\n};\n\n/**\n * This function finds the datatype of the given value.\n * typeof, lodash and others will return false positives for things like array, wrapper objects, etc\n * @param value\n * @returns datatype of the received value as string\n */\nexport const findDatatype = (value: unknown) => {\n  return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n};\n\nexport const isDynamicLeaf = (\n  unEvalTree: DataTree,\n  propertyPath: string,\n  configTree: ConfigTree,\n) => {\n  const [entityName, ...propPathEls] = _.toPath(propertyPath);\n  // Framework feature: Top level items are never leaves\n  if (entityName === propertyPath) return false;\n  // Ignore if this was a delete op\n  if (!unEvalTree.hasOwnProperty(entityName)) return false;\n\n  const entityConfig = configTree[entityName];\n  const entity = unEvalTree[entityName];\n  if (!isWidgetActionOrJsObject(entity)) return false;\n  const relativePropertyPath = convertPathToString(propPathEls);\n  return (\n    (!isEmpty(entityConfig.reactivePaths) &&\n      relativePropertyPath in entityConfig.reactivePaths) ||\n    (isWidget(entityConfig) &&\n      relativePropertyPath in entityConfig?.triggerPaths)\n  );\n};\n\nexport const addWidgetPropertyDependencies = ({\n  widgetConfig,\n  widgetName,\n}: {\n  widgetConfig: WidgetEntityConfig;\n  widgetName: string;\n}) => {\n  const dependencies: DependencyMap = {};\n\n  Object.entries(widgetConfig.propertyOverrideDependency).forEach(\n    ([overriddenPropertyKey, overridingPropertyKeyMap]) => {\n      const existingDependenciesSet = new Set(\n        dependencies[`${widgetName}.${overriddenPropertyKey}`] || [],\n      );\n      // add meta dependency\n      overridingPropertyKeyMap.META &&\n        existingDependenciesSet.add(\n          `${widgetName}.${overridingPropertyKeyMap.META}`,\n        );\n      // add default dependency\n      overridingPropertyKeyMap.DEFAULT &&\n        existingDependenciesSet.add(\n          `${widgetName}.${overridingPropertyKeyMap.DEFAULT}`,\n        );\n\n      dependencies[`${widgetName}.${overriddenPropertyKey}`] = [\n        ...existingDependenciesSet,\n      ];\n    },\n  );\n  return dependencies;\n};\n\nexport const isPrivateEntityPath = (\n  privateWidgets: PrivateWidgets,\n  fullPropertyPath: string,\n) => {\n  const entityName = fullPropertyPath.split(\".\")[0];\n  if (Object.keys(privateWidgets).indexOf(entityName) !== -1) {\n    return true;\n  }\n  return false;\n};\n\nexport const getAllPrivateWidgetsInDataTree = (\n  configTree: ConfigTree,\n): PrivateWidgets => {\n  let privateWidgets: PrivateWidgets = {};\n\n  Object.keys(configTree).forEach((entityName) => {\n    const entityConfig = configTree[entityName] as WidgetEntityConfig;\n    if (isWidget(entityConfig) && !_.isEmpty(entityConfig.privateWidgets)) {\n      privateWidgets = { ...privateWidgets, ...entityConfig.privateWidgets };\n    }\n  });\n\n  return privateWidgets;\n};\n\nexport const getDataTreeWithoutPrivateWidgets = (\n  dataTree: DataTree,\n  configTree: ConfigTree,\n): DataTree => {\n  const privateWidgets = getAllPrivateWidgetsInDataTree(configTree);\n  const privateWidgetNames = Object.keys(privateWidgets);\n  const treeWithoutPrivateWidgets = _.omit(dataTree, privateWidgetNames);\n  return treeWithoutPrivateWidgets;\n};\n\nconst getDataTreeWithoutSuppressedAutoComplete = (\n  dataTree: DataTree,\n): DataTree => {\n  const entityIds = Object.keys(dataTree).filter((entityName) => {\n    const entity = dataTree[entityName];\n    return (\n      isWidget(entity) && shouldSuppressAutoComplete(entity as WidgetEntity)\n    );\n  });\n\n  return _.omit(dataTree, entityIds);\n};\n\nexport const getDataTreeForAutocomplete = (\n  dataTree: DataTree,\n  configTree: ConfigTree,\n): DataTree => {\n  const treeWithoutPrivateWidgets = getDataTreeWithoutPrivateWidgets(\n    dataTree,\n    configTree,\n  );\n  const treeWithoutSuppressedAutoComplete =\n    getDataTreeWithoutSuppressedAutoComplete(treeWithoutPrivateWidgets);\n\n  return treeWithoutSuppressedAutoComplete;\n};\n\n/**\n *  overrideWidgetProperties method has logic to update overriddenPropertyPaths when overridingPropertyPaths are evaluated.\n *\n *  when we evaluate widget's overridingPropertyPaths for example defaultText of input widget,\n *  we override the values like text and meta.text in dataTree, these values are called as overriddenPropertyPaths\n *\n * @param {{\n *   entity: WidgetEntity;\n *   propertyPath: string;\n *   value: unknown;\n *   currentTree: DataTree;\n *   evalMetaUpdates: EvalMetaUpdates;\n * }} params\n * @return {*}\n */\nexport const overrideWidgetProperties = (params: {\n  entity: WidgetEntity;\n  propertyPath: string;\n  value: unknown;\n  currentTree: DataTree;\n  configTree: ConfigTree;\n  evalMetaUpdates: EvalMetaUpdates;\n  fullPropertyPath: string;\n  isNewWidget: boolean;\n  shouldUpdateGlobalContext?: boolean;\n  overriddenProperties?: string[];\n  safeTree?: DataTree;\n}) => {\n  const {\n    configTree,\n    currentTree,\n    entity,\n    evalMetaUpdates,\n    fullPropertyPath,\n    isNewWidget,\n    overriddenProperties,\n    propertyPath,\n    safeTree,\n    shouldUpdateGlobalContext,\n    value,\n  } = params;\n  const { entityName } = getEntityNameAndPropertyPath(fullPropertyPath);\n\n  const configEntity = configTree[entityName] as WidgetEntityConfig;\n  if (propertyPath in configEntity.overridingPropertyPaths) {\n    const clonedValue = klona(value);\n    const overridingPropertyPaths =\n      configEntity.overridingPropertyPaths[propertyPath];\n\n    const pathsNotToOverride = widgetPathsNotToOverride(\n      isNewWidget,\n      propertyPath,\n      configEntity,\n    );\n\n    overridingPropertyPaths.forEach((overriddenPropertyPath) => {\n      const overriddenPropertyPathArray = overriddenPropertyPath.split(\".\");\n      if (pathsNotToOverride.includes(overriddenPropertyPath)) return;\n      const fullPath = [entityName, ...overriddenPropertyPathArray];\n      _.set(currentTree, fullPath, clonedValue);\n      if (safeTree) _.set(safeTree, fullPath, klona(value));\n\n      if (shouldUpdateGlobalContext) {\n        _.set(self, fullPath, clonedValue);\n      }\n      overriddenProperties?.push(overriddenPropertyPath);\n      // evalMetaUpdates has all updates from property which overrides meta values.\n      if (\n        propertyPath.split(\".\")[0] !== \"meta\" &&\n        overriddenPropertyPathArray[0] === \"meta\"\n      ) {\n        const metaPropertyPath = overriddenPropertyPathArray.slice(1);\n        evalMetaUpdates.push({\n          widgetId: entity.widgetId,\n          metaPropertyPath,\n          value: clonedValue,\n        });\n      }\n    });\n  } else if (\n    propertyPath in configEntity.propertyOverrideDependency &&\n    value === undefined\n  ) {\n    // When a reset a widget its meta value becomes undefined, ideally they should reset to default value.\n    // below we handle logic to reset meta values to default values.\n    const propertyOverridingKeyMap =\n      configEntity.propertyOverrideDependency[propertyPath];\n    if (propertyOverridingKeyMap.DEFAULT) {\n      const defaultValue = entity[propertyOverridingKeyMap.DEFAULT];\n      if (defaultValue !== undefined) {\n        const clonedDefaultValue = klona(defaultValue);\n        const fullPath = [entityName, ...propertyPath.split(\".\")];\n        _.set(currentTree, fullPath, clonedDefaultValue);\n        if (safeTree) _.set(safeTree, fullPath, klona(defaultValue));\n\n        if (shouldUpdateGlobalContext) {\n          _.set(self, fullPath, clonedDefaultValue);\n        }\n\n        return {\n          overwriteParsedValue: true,\n          newValue: clonedDefaultValue,\n        };\n      }\n    }\n  }\n};\n\nexport const isATriggerPath = (\n  entityConfig: DataTreeEntityConfig,\n  propertyPath: string,\n) => {\n  return (\n    isWidget(entityConfig) && isPathDynamicTrigger(entityConfig, propertyPath)\n  );\n};\n\n// Checks if entity newly got added to the unevalTree\nexport const isNewEntity = (updates: DataTreeDiff[], entityName: string) => {\n  return !!find(updates, {\n    event: DataTreeDiffEvent.NEW,\n    payload: { propertyPath: entityName },\n  });\n};\n\nconst widgetPathsNotToOverride = (\n  isNewWidget: boolean,\n  propertyPath: string,\n  entityConfig: WidgetEntityConfig,\n) => {\n  let pathsNotToOverride: string[] = [];\n  const overriddenPropertyPaths =\n    entityConfig.overridingPropertyPaths[propertyPath];\n\n  // Check if widget has pre-existing meta values (although newly added to the unevalTree)\n  if (isNewWidget && entityConfig.isMetaPropDirty) {\n    const overriddenMetaPaths = overriddenPropertyPaths.filter(\n      (path) => path.split(\".\")[0] === \"meta\",\n    );\n    // If widget is newly added but has pre-existing meta values, this meta values take precedence and should not be overridden\n    pathsNotToOverride = [...overriddenMetaPaths];\n    // paths which these meta values override should also not get overridden\n    overriddenMetaPaths.forEach((path) => {\n      if (entityConfig.overridingPropertyPaths.hasOwnProperty(path)) {\n        pathsNotToOverride = [\n          ...pathsNotToOverride,\n          ...entityConfig.overridingPropertyPaths[path],\n        ];\n      }\n    });\n  }\n  return pathsNotToOverride;\n};\n\nconst isWidgetDefaultPropertyPath = (\n  widget: WidgetEntityConfig,\n  propertyPath: string,\n) => {\n  for (const property of Object.keys(widget.propertyOverrideDependency)) {\n    const overrideDependency = widget.propertyOverrideDependency[property];\n    if (overrideDependency.DEFAULT === propertyPath) return true;\n  }\n  return false;\n};\n\nconst isMetaWidgetTemplate = (widget: WidgetEntity) => {\n  return !!widget.siblingMetaWidgets;\n};\n\n// When a default value changes in a template(widgets used to generate other widgets), meta values of metaWidgets not present in the unevalTree become stale\nexport function getStaleMetaStateIds(args: {\n  entity: WidgetEntity;\n  entityConfig: WidgetEntityConfig;\n  propertyPath: string;\n  isNewWidget: boolean;\n  metaWidgets: string[];\n}) {\n  const { entity, entityConfig, isNewWidget, metaWidgets, propertyPath } = args;\n  return !isNewWidget &&\n    isWidgetDefaultPropertyPath(entityConfig, propertyPath) &&\n    isMetaWidgetTemplate(entity)\n    ? difference(entity.siblingMetaWidgets, metaWidgets)\n    : [];\n}\n\nexport function convertJSFunctionsToString(\n  jscollections: Record<string, JSActionEntity>,\n  configTree: ConfigTree,\n) {\n  const collections = klona(jscollections);\n  Object.keys(collections).forEach((collectionName) => {\n    const jsCollection = collections[collectionName];\n    const jsCollectionConfig = configTree[\n      collectionName\n    ] as JSActionEntityConfig;\n    const jsFunctions = jsCollectionConfig.meta;\n    for (const funcName in jsFunctions) {\n      if (jsCollection[funcName] instanceof String) {\n        if (has(jsCollection, [funcName, \"data\"])) {\n          set(jsCollection, [`${funcName}.data`], {});\n        }\n        set(jsCollection, funcName, jsCollection[funcName].toString());\n      }\n    }\n  });\n\n  return collections;\n}\n\nexport const isAPathDynamicBindingPath = (\n  entity: DataTreeEntity,\n  entityConfig: DataTreeEntityConfig,\n  propertyPath: string,\n) => {\n  return (\n    isWidgetActionOrJsObject(entity) &&\n    isPathADynamicBinding(entityConfig, propertyPath)\n  );\n};\n\nexport const isNotEntity = (entity: DataTreeEntity) => {\n  return !isAction(entity) && !isWidget(entity) && !isJSAction(entity);\n};\n\nexport const isEntityAction = (entity: DataTreeEntity) => {\n  return isAction(entity);\n};\nexport const convertMicroDiffToDeepDiff = (\n  microDiffDifferences: Record<string, any>[],\n) =>\n  microDiffDifferences.map((v: Record<string, any>) => {\n    const { oldValue, path, type, value } = v;\n    //convert microDiff format to deepDiff format\n    if (type === \"CREATE\") {\n      return {\n        kind: \"N\",\n        path,\n        rhs: value,\n      };\n    }\n    if (type === \"REMOVE\") {\n      return {\n        kind: \"D\",\n        path,\n        lhs: oldValue,\n      };\n    }\n    return {\n      kind: \"E\",\n      path,\n      lhs: oldValue,\n      rhs: value,\n    };\n  });\n","import type {\n  TNavigateToActionType,\n  TNavigateToDescription,\n} from \"./navigateTo\";\nimport navigateTo from \"./navigateTo\";\nimport type { TShowAlertActionType, TShowAlertDescription } from \"./showAlert\";\nimport showAlert from \"./showAlert\";\nimport type {\n  TCloseModalActionType,\n  TCloseModalDescription,\n  TShowModalActionType,\n  TShowModalDescription,\n} from \"./modalFns\";\nimport { closeModal, showModal } from \"./modalFns\";\nimport type { TDownloadActionType, TDownloadDescription } from \"./download\";\nimport download from \"./download\";\nimport type {\n  TPostWindowMessageActionType,\n  TPostWindowMessageDescription,\n} from \"./postWindowMessage\";\nimport postWindowMessage from \"./postWindowMessage\";\nimport type {\n  TCopyToClipboardActionType,\n  TCopyToClipboardDescription,\n} from \"./copyToClipboard\";\nimport copyToClipboard from \"./copyToClipboard\";\nimport type {\n  TResetWidgetActionType,\n  TResetWidgetDescription,\n} from \"./resetWidget\";\nimport resetWidget from \"./resetWidget\";\nimport type {\n  TClearStoreDescription,\n  TRemoveValueDescription,\n  TStoreValueDescription,\n} from \"./storeFns\";\nimport { clearStore, removeValue, storeValue } from \"./storeFns\";\nimport type {\n  TClearActionType,\n  TClearDescription,\n  TRunActionType,\n  TRunDescription,\n} from \"./actionFns\";\nimport run, { clear } from \"./actionFns\";\nimport { isAppsmithEntity } from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport type { ActionEntity } from \"@appsmith/entities/DataTree/types\";\nimport type { DataTreeEntity } from \"entities/DataTree/dataTreeTypes\";\nimport type {\n  TGetGeoLocationActionType,\n  TGetGeoLocationDescription,\n  TStopWatchGeoLocationActionType,\n  TStopWatchGeoLocationDescription,\n  TWatchGeoLocationActionType,\n  TWatchGeoLocationDescription,\n} from \"./geolocationFns\";\nimport {\n  getGeoLocation,\n  stopWatchGeoLocation,\n  watchGeoLocation,\n} from \"./geolocationFns\";\nimport { getFnWithGuards, isAsyncGuard } from \"./utils/fnGuard\";\nimport { isRunNClearFnQualifierEntity } from \"@appsmith/workers/Evaluation/fns/utils/isRunNClearFnQualifierEntity\";\n\nexport const getPlatformFunctions = () => {\n  return platformFns;\n};\n\nexport const getEntityFunctions = () => {\n  return entityFns;\n};\n\nconst platformFns = [\n  {\n    name: \"navigateTo\",\n    fn: navigateTo,\n  },\n  {\n    name: \"showAlert\",\n    fn: showAlert,\n  },\n  {\n    name: \"showModal\",\n    fn: showModal,\n  },\n  {\n    name: \"closeModal\",\n    fn: closeModal,\n  },\n  {\n    name: \"download\",\n    fn: download,\n  },\n  {\n    name: \"postWindowMessage\",\n    fn: postWindowMessage,\n  },\n  {\n    name: \"copyToClipboard\",\n    fn: copyToClipboard,\n  },\n  {\n    name: \"resetWidget\",\n    fn: resetWidget,\n  },\n  {\n    name: \"storeValue\",\n    fn: storeValue,\n  },\n  {\n    name: \"removeValue\",\n    fn: removeValue,\n  },\n  {\n    name: \"clearStore\",\n    fn: clearStore,\n  },\n];\n\nconst entityFns = [\n  {\n    name: \"run\",\n    qualifier: (entity: DataTreeEntity) => isRunNClearFnQualifierEntity(entity),\n    fn: (entity: DataTreeEntity, entityName: string) => {\n      const actionEntity = entity as ActionEntity;\n      // @ts-expect-error: name is not defined on ActionEntity\n      actionEntity.name = entityName;\n      return getFnWithGuards(\n        run.bind(actionEntity as ActionEntity),\n        `${entityName}.run`,\n        [isAsyncGuard],\n      );\n    },\n  },\n  {\n    name: \"clear\",\n    qualifier: (entity: DataTreeEntity) => isRunNClearFnQualifierEntity(entity),\n    fn: (entity: DataTreeEntity, entityName: string) =>\n      getFnWithGuards(\n        clear.bind(entity as ActionEntity),\n        `${entityName}.clear`,\n        [isAsyncGuard],\n      ),\n  },\n  {\n    name: \"getGeoLocation\",\n    path: \"appsmith.geolocation.getCurrentPosition\",\n    qualifier: (entity: DataTreeEntity) => isAppsmithEntity(entity),\n    fn: () =>\n      getFnWithGuards(\n        getGeoLocation,\n        \"appsmith.geolocation.getCurrentPosition\",\n        [isAsyncGuard],\n      ),\n  },\n  {\n    name: \"watchGeoLocation\",\n    path: \"appsmith.geolocation.watchPosition\",\n    qualifier: (entity: DataTreeEntity) => isAppsmithEntity(entity),\n    fn: () =>\n      getFnWithGuards(watchGeoLocation, \"appsmith.geolocation.watchPosition\", [\n        isAsyncGuard,\n      ]),\n  },\n  {\n    name: \"stopWatchGeoLocation\",\n    path: \"appsmith.geolocation.clearWatch\",\n    qualifier: (entity: DataTreeEntity) => isAppsmithEntity(entity),\n    fn: () =>\n      getFnWithGuards(stopWatchGeoLocation, \"appsmith.geolocation.clearWatch\", [\n        isAsyncGuard,\n      ]),\n  },\n];\n\nexport type ActionTriggerKeys =\n  | TClearActionType\n  | TRunActionType\n  | TDownloadActionType\n  | TShowModalActionType\n  | TCloseModalActionType\n  | TShowAlertActionType\n  | TDownloadActionType\n  | TNavigateToActionType\n  | TResetWidgetActionType\n  | TCopyToClipboardActionType\n  | TPostWindowMessageActionType\n  | TGetGeoLocationActionType\n  | TWatchGeoLocationActionType\n  | TStopWatchGeoLocationActionType;\n\nexport const getActionTriggerFunctionNames = (): Record<string, string> => {\n  return ActionTriggerFunctionNames;\n};\n\nconst ActionTriggerFunctionNames: Record<string, string> = {\n  CLEAR_INTERVAL: \"clearInterval\",\n  CLEAR_PLUGIN_ACTION: \"action.clear\",\n  CLOSE_MODAL: \"closeModal\",\n  COPY_TO_CLIPBOARD: \"copyToClipboard\",\n  DOWNLOAD: \"download\",\n  NAVIGATE_TO: \"navigateTo\",\n  RESET_WIDGET_META_RECURSIVE_BY_NAME: \"resetWidget\",\n  RUN_PLUGIN_ACTION: \"action.run\",\n  SET_INTERVAL: \"setInterval\",\n  SHOW_ALERT: \"showAlert\",\n  SHOW_MODAL_BY_NAME: \"showModal\",\n  STORE_VALUE: \"storeValue\",\n  REMOVE_VALUE: \"removeValue\",\n  CLEAR_STORE: \"clearStore\",\n  GET_CURRENT_LOCATION: \"getCurrentLocation\",\n  WATCH_CURRENT_LOCATION: \"watchLocation\",\n  STOP_WATCHING_CURRENT_LOCATION: \"stopWatch\",\n  POST_MESSAGE: \"postWindowMessage\",\n  SET_TIMEOUT: \"setTimeout\",\n  CLEAR_TIMEOUT: \"clearTimeout\",\n};\n\nexport type ActionDescription =\n  | TRunDescription\n  | TClearDescription\n  | TShowModalDescription\n  | TCloseModalDescription\n  | TClearDescription\n  | TStoreValueDescription\n  | TClearStoreDescription\n  | TRemoveValueDescription\n  | TDownloadDescription\n  | TPostWindowMessageDescription\n  | TNavigateToDescription\n  | TShowAlertDescription\n  | TResetWidgetDescription\n  | TCopyToClipboardDescription\n  | TGetGeoLocationDescription\n  | TWatchGeoLocationDescription\n  | TStopWatchGeoLocationDescription;\n","import _, { get, isString } from \"lodash\";\nimport { DATA_BIND_REGEX } from \"constants/BindingsConstants\";\nimport type { Action } from \"entities/Action\";\nimport type { WidgetProps } from \"widgets/BaseWidget\";\nimport type { Severity } from \"entities/AppsmithConsole\";\nimport {\n  getEntityNameAndPropertyPath,\n  isAction,\n  isJSAction,\n  isTrueObject,\n  isWidget,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport type { DataTreeEntityConfig } from \"@appsmith/entities/DataTree/types\";\nimport type { DataTreeEntity } from \"entities/DataTree/dataTreeTypes\";\nimport { getType, Types } from \"./TypeHelpers\";\nimport { ViewTypes } from \"components/formControls/utils\";\n\nexport type DependencyMap = Record<string, Array<string>>;\nexport type FormEditorConfigs = Record<string, any[]>;\nexport type FormSettingsConfigs = Record<string, any[]>;\nexport type FormDependencyConfigs = Record<string, DependencyMap>;\nexport type FormDatasourceButtonConfigs = Record<string, string[]>;\n\nfunction hasNonStringSemicolons(stringifiedJS: string) {\n  // This regex pattern matches semicolons that are not inside single or double quotes\n  const regex = /;(?=(?:[^']*'[^']*')*[^']*$)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/g;\n  return regex.test(stringifiedJS);\n}\n\n// referencing DATA_BIND_REGEX fails for the value \"{{Table1.tableData[Table1.selectedRowIndex]}}\" if you run it multiple times and don't recreate\nexport const isDynamicValue = (value: string): boolean =>\n  DATA_BIND_REGEX.test(value);\n\n//{{}}{{}}}\nexport function getDynamicStringSegments(dynamicString: string): string[] {\n  let stringSegments = [];\n  const indexOfDoubleParanStart = dynamicString.indexOf(\"{{\");\n  if (indexOfDoubleParanStart === -1) {\n    return [dynamicString];\n  }\n  //{{}}{{}}}\n  const firstString = dynamicString.substring(0, indexOfDoubleParanStart);\n  firstString && stringSegments.push(firstString);\n  let rest = dynamicString.substring(\n    indexOfDoubleParanStart,\n    dynamicString.length,\n  );\n  //{{}}{{}}}\n  let sum = 0;\n  for (let i = 0; i <= rest.length - 1; i++) {\n    const char = rest[i];\n    const prevChar = rest[i - 1];\n\n    if (char === \"{\") {\n      sum++;\n    } else if (char === \"}\") {\n      sum--;\n      if (prevChar === \"}\" && sum === 0) {\n        stringSegments.push(rest.substring(0, i + 1));\n        rest = rest.substring(i + 1, rest.length);\n        if (rest) {\n          stringSegments = stringSegments.concat(\n            getDynamicStringSegments(rest),\n          );\n          break;\n        }\n      }\n    }\n  }\n  if (sum !== 0 && dynamicString !== \"\") {\n    return [dynamicString];\n  }\n  return stringSegments;\n}\n\n//{{}}{{}}}\nexport const getDynamicBindings = (\n  dynamicString: string,\n  entity?: DataTreeEntity,\n): { stringSegments: string[]; jsSnippets: string[] } => {\n  // Protect against bad string parse\n  if (!dynamicString || !_.isString(dynamicString)) {\n    return { stringSegments: [], jsSnippets: [] };\n  }\n  const sanitisedString = dynamicString.trim();\n  let stringSegments, paths: any;\n  if (entity && isJSAction(entity)) {\n    stringSegments = [sanitisedString];\n    paths = [sanitisedString];\n  } else {\n    // Get the {{binding}} bound values\n    stringSegments = getDynamicStringSegments(sanitisedString);\n    // Get the \"binding\" path values\n    paths = stringSegments.map((segment) => {\n      const length = segment.length;\n      const matches = isDynamicValue(segment);\n      if (matches) {\n        return segment.substring(2, length - 2);\n      }\n      return \"\";\n    });\n  }\n  return { stringSegments: stringSegments, jsSnippets: paths };\n};\n\nexport const combineDynamicBindings = (\n  jsSnippets: string[],\n  stringSegments: string[],\n) => {\n  return stringSegments\n    .map((segment, index) => {\n      if (jsSnippets[index] && jsSnippets[index].length > 0) {\n        return addOperatorPrecedenceIfNeeded(jsSnippets[index]);\n      } else {\n        return JSON.stringify(segment);\n      }\n    })\n    .join(\" + \");\n};\n\n/**\n * Operator precedence example: JSCode =  Color is  {{ currentItem.color || \"Blue\"}}  PS: currentItem.color is undefined\n *  Previously this code would be transformed to  (() =>  \"Color is\" + currentItem.color || \"Blue\")() which evaluates to \"Color is undefined\" rather than \"Color is Blue\"\n * with precedence we'd have (() =>  \"Color is\" + (currentItem.color || \"Blue\"))() which evaluates to Color is Blue,  because the parentheses change the order of evaluation, giving  higher precedence in this case to (currentItem.color || \"Blue\").\n */\nfunction addOperatorPrecedenceIfNeeded(stringifiedJS: string) {\n  /**\n   *  parenthesis doesn't work with ; i.e Color is  {{ currentItem.color || \"Blue\" ;}} cant be (() =>  \"Color is\" + (currentItem.color || \"Blue\";))()\n   */\n  if (!hasNonStringSemicolons(stringifiedJS)) {\n    return `(${stringifiedJS})`;\n  }\n\n  return stringifiedJS;\n}\n\nexport enum EvalErrorTypes {\n  CYCLICAL_DEPENDENCY_ERROR = \"CYCLICAL_DEPENDENCY_ERROR\",\n  EVAL_PROPERTY_ERROR = \"EVAL_PROPERTY_ERROR\",\n  EVAL_TREE_ERROR = \"EVAL_TREE_ERROR\",\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n  BAD_UNEVAL_TREE_ERROR = \"BAD_UNEVAL_TREE_ERROR\",\n  PARSE_JS_ERROR = \"PARSE_JS_ERROR\",\n  EXTRACT_DEPENDENCY_ERROR = \"EXTRACT_DEPENDENCY_ERROR\",\n  CLONE_ERROR = \"CLONE_ERROR\",\n  SERIALIZATION_ERROR = \"SERIALIZATION_ERROR\",\n}\n\nexport interface EvalError {\n  type: EvalErrorTypes;\n  message: string;\n  context?: Record<string, any>;\n}\n\nexport interface DynamicPath {\n  key: string;\n  value?: string;\n}\n\nexport interface WidgetDynamicPathListProps {\n  dynamicBindingPathList?: DynamicPath[];\n  dynamicTriggerPathList?: DynamicPath[];\n  dynamicPropertyPathList?: DynamicPath[];\n}\n\nexport interface EntityWithBindings {\n  dynamicBindingPathList?: DynamicPath[];\n}\n\nexport const getEntityDynamicBindingPathList = (\n  entity: EntityWithBindings,\n): DynamicPath[] => {\n  if (\n    entity &&\n    entity.dynamicBindingPathList &&\n    Array.isArray(entity.dynamicBindingPathList)\n  ) {\n    return [...entity.dynamicBindingPathList];\n  }\n  return [];\n};\n\nexport const isPathADynamicBinding = (\n  entity: EntityWithBindings,\n  path: string,\n): boolean => {\n  if (\n    entity &&\n    entity.dynamicBindingPathList &&\n    Array.isArray(entity.dynamicBindingPathList)\n  ) {\n    return _.find(entity.dynamicBindingPathList, { key: path }) !== undefined;\n  }\n  return false;\n};\n/**\n * Get property path from full property path\n * Input: \"Table1.meta.searchText\" => Output: \"meta.searchText\"\n * @param {string} fullPropertyPath\n * @return {*}\n */\nexport const getPropertyPath = (fullPropertyPath: string) => {\n  return fullPropertyPath.substring(fullPropertyPath.indexOf(\".\") + 1);\n};\n\nexport const getWidgetDynamicTriggerPathList = (\n  widget: WidgetProps,\n): DynamicPath[] => {\n  if (\n    widget &&\n    widget.dynamicTriggerPathList &&\n    Array.isArray(widget.dynamicTriggerPathList)\n  ) {\n    return [...widget.dynamicTriggerPathList];\n  }\n  return [];\n};\n\nexport const isPathDynamicTrigger = (widget: any, path: string): boolean => {\n  if (\n    widget &&\n    widget.dynamicTriggerPathList &&\n    Array.isArray(widget.dynamicTriggerPathList)\n  ) {\n    return _.find(widget.dynamicTriggerPathList, { key: path }) !== undefined;\n  }\n  return false;\n};\n\nexport const getWidgetDynamicPropertyPathList = (\n  widget: WidgetProps,\n): DynamicPath[] => {\n  if (\n    widget &&\n    widget.dynamicPropertyPathList &&\n    Array.isArray(widget.dynamicPropertyPathList)\n  ) {\n    return [...widget.dynamicPropertyPathList];\n  }\n  return [];\n};\n\nexport const isPathDynamicProperty = (\n  widget: WidgetProps,\n  path: string,\n): boolean => {\n  if (\n    widget &&\n    widget.dynamicPropertyPathList &&\n    Array.isArray(widget.dynamicPropertyPathList)\n  ) {\n    return _.find(widget.dynamicPropertyPathList, { key: path }) !== undefined;\n  }\n  return false;\n};\n\nexport const THEME_BINDING_REGEX = /{{.*appsmith\\.theme\\..*}}/;\n\nexport const isThemeBoundProperty = (\n  widget: WidgetProps,\n  path: string,\n): boolean => {\n  return widget && widget[path] && THEME_BINDING_REGEX.test(widget[path]);\n};\n\nexport const unsafeFunctionForEval = [\n  \"XMLHttpRequest\",\n  \"setImmediate\",\n  \"Navigator\",\n];\n\nexport const isChildPropertyPath = (\n  parentPropertyPath: string,\n  childPropertyPath: string,\n  // In non-strict mode, an exact match is treated as a child path\n  // Eg. \"Api1\" is a child property path of \"Api1\"\n  strict = false,\n): boolean => {\n  return (\n    (!strict && parentPropertyPath === childPropertyPath) ||\n    childPropertyPath.startsWith(`${parentPropertyPath}.`) ||\n    childPropertyPath.startsWith(`${parentPropertyPath}[`)\n  );\n};\n\n/**\n * Paths set via evaluator on entities\n * During evaluation, the evaluator will set various data points\n * on the entity objects to describe their state while evaluating.\n * This information can be found on the following paths\n * These paths are meant to be objects with\n * information about the properties in\n * a single place\n *\n * Stored in a flattened object like\n * widget.__evaluation__.errors.primaryColumns.customColumn.computedValue = [...]\n **/\nexport const EVALUATION_PATH = \"__evaluation__\";\nexport const EVAL_ERROR_PATH = `${EVALUATION_PATH}.errors`;\nexport const EVAL_VALUE_PATH = `${EVALUATION_PATH}.evaluatedValues`;\n\n/**\n * non-populated object\n {\n   __evaluation__:{\n     evaluatedValues:{\n       primaryColumns: [...],\n       primaryColumns.status: {...},\n       primaryColumns.action: {...}\n     }\n   }\n }\n\n * Populated Object\n {\n   __evaluation__:{\n     evaluatedValues:{\n       primaryColumns: {\n         status: [...],\n         action:[...]\n        }\n     }\n   }\n }\n\n */\nconst getNestedEvalPath = (\n  fullPropertyPath: string,\n  pathType: string,\n  fullPath = true,\n  isPopulated = false,\n) => {\n  const { entityName, propertyPath } =\n    getEntityNameAndPropertyPath(fullPropertyPath);\n  const nestedPath = isPopulated\n    ? `${pathType}.${propertyPath}`\n    : `${pathType}.['${propertyPath}']`;\n\n  if (fullPath) {\n    return `${entityName}.${nestedPath}`;\n  }\n  return nestedPath;\n};\n\nexport const getEvalErrorPath = (\n  fullPropertyPath: string,\n  options = {\n    fullPath: true,\n    isPopulated: false,\n  },\n) => {\n  return getNestedEvalPath(\n    fullPropertyPath,\n    EVAL_ERROR_PATH,\n    options.fullPath,\n    options.isPopulated,\n  );\n};\n\nexport const getEvalValuePath = (\n  fullPropertyPath: string,\n  options = {\n    fullPath: true,\n    isPopulated: false,\n  },\n) => {\n  return getNestedEvalPath(\n    fullPropertyPath,\n    EVAL_VALUE_PATH,\n    options.fullPath,\n    options.isPopulated,\n  );\n};\n\nexport enum PropertyEvaluationErrorType {\n  VALIDATION = \"VALIDATION\",\n  PARSE = \"PARSE\",\n  LINT = \"LINT\",\n}\n\nexport enum PropertyEvaluationErrorCategory {\n  ACTION_INVOCATION_IN_DATA_FIELD = \"ACTION_INVOCATION_IN_DATA_FIELD\",\n}\nexport interface PropertyEvaluationErrorKind {\n  category: PropertyEvaluationErrorCategory;\n  rootcause: string;\n}\n\nexport interface DataTreeError {\n  raw: string;\n  errorMessage: Error;\n  severity: Severity.WARNING | Severity.ERROR;\n}\n\nexport interface EvaluationError extends DataTreeError {\n  errorType:\n    | PropertyEvaluationErrorType.PARSE\n    | PropertyEvaluationErrorType.VALIDATION;\n  originalBinding?: string;\n  kind?: Partial<PropertyEvaluationErrorKind>;\n}\n\nexport interface LintError extends DataTreeError {\n  errorType: PropertyEvaluationErrorType.LINT;\n  errorSegment: string;\n  originalBinding: string;\n  variables: (string | undefined | null)[];\n  code: string;\n  line: number;\n  ch: number;\n  originalPath?: string;\n}\n\nexport interface DataTreeEvaluationProps {\n  __evaluation__?: {\n    errors: Record<string, EvaluationError[]>;\n    evaluatedValues?: Record<string, unknown>;\n  };\n}\n\nexport const PropertyEvalErrorTypeDebugMessage: Record<\n  PropertyEvaluationErrorType,\n  (propertyPath: string) => string\n> = {\n  [PropertyEvaluationErrorType.VALIDATION]: (propertyPath: string) =>\n    `The value at ${propertyPath} is invalid`,\n  [PropertyEvaluationErrorType.PARSE]: () => `Could not parse the binding`,\n  [PropertyEvaluationErrorType.LINT]: () => `Errors found while evaluating`,\n};\n\n// this variable temporarily holds dynamic paths generated by the recursive function (getDynamicValuePaths - Line 468).\nlet temporaryDynamicPathStore: DynamicPath[] = [];\n\n// recursive function to get full key path of any object that has dynamic bindings.\nconst getDynamicValuePaths = (val: any, parentPath: string) => {\n  if (isString(val) && isDynamicValue(val)) {\n    return temporaryDynamicPathStore.push({ key: `${parentPath}` });\n  }\n\n  if (Array.isArray(val)) {\n    val.forEach((obj, index) => {\n      return getDynamicValuePaths(obj, `${parentPath}[${index}]`);\n    });\n  }\n\n  if (isTrueObject(val)) {\n    Object.entries(val).forEach(([key, value]) => {\n      getDynamicValuePaths(value, `${parentPath}.${key}`);\n    });\n  }\n};\n\nexport function getDynamicBindingsChangesSaga(\n  action: Action,\n  value: unknown,\n  field: string,\n  formData?: any,\n) {\n  const bindingField = field.replace(\"actionConfiguration.\", \"\");\n  // we listen to any viewType changes.\n  const viewType = field.endsWith(\".viewType\");\n  let dynamicBindings: DynamicPath[] = action.dynamicBindingPathList\n    ? [...action.dynamicBindingPathList]\n    : [];\n\n  if (field.endsWith(\".jsonData\") || field.endsWith(\".componentData\")) {\n    return dynamicBindings;\n  }\n\n  if (\n    action.datasource &&\n    (\"datasourceConfiguration\" in action.datasource ||\n      \"datasourceConfiguration\" in (formData?.datasource || {})) &&\n    field === \"datasource\"\n  ) {\n    // only the datasource.datasourceConfiguration.url can be a dynamic field\n    dynamicBindings = dynamicBindings.filter(\n      (binding) => binding.key !== \"datasourceUrl\" && binding.key !== \"path\",\n    );\n    // ideally as we check for the datasource url, we should check for the path field as well.\n    const datasourceUrl = action.datasource?.datasourceConfiguration?.url || \"\";\n    const datasourcePathField = action.actionConfiguration?.path;\n    const datasourceFormPathField = formData?.actionConfiguration?.path;\n\n    isDynamicValue(datasourceUrl) &&\n      dynamicBindings.push({ key: \"datasourceUrl\" });\n\n    // as we check the datasource url for bindings, check the path too.\n    isDynamicValue(datasourcePathField || datasourceFormPathField) &&\n      dynamicBindings.push({ key: \"path\" });\n    return dynamicBindings;\n  }\n\n  // When a key-value pair is added or deleted from a fieldArray\n  // Value is an Array representing the new fieldArray.\n\n  if (Array.isArray(value)) {\n    // first we clear the dynamic bindings of any paths that is a child of the current path.\n    dynamicBindings = dynamicBindings.filter(\n      (binding) => !isChildPropertyPath(bindingField, binding.key),\n    );\n\n    // then we recursively go through the value and find paths with dynamic bindings\n    temporaryDynamicPathStore = [];\n    if (!!value) {\n      getDynamicValuePaths(value, bindingField);\n    }\n    if (!!temporaryDynamicPathStore && temporaryDynamicPathStore.length > 0) {\n      dynamicBindings = [...dynamicBindings, ...temporaryDynamicPathStore];\n    }\n  } else if (getType(value) === Types.OBJECT) {\n    dynamicBindings = dynamicBindings.filter((dynamicPath) => {\n      if (isChildPropertyPath(bindingField, dynamicPath.key)) {\n        const childPropertyValue = _.get(value, dynamicPath.key);\n        return isDynamicValue(childPropertyValue);\n      }\n      return !!dynamicPath;\n    });\n  } else if (typeof value === \"string\") {\n    const fieldExists = _.some(dynamicBindings, { key: bindingField });\n\n    const isDynamic = isDynamicValue(value);\n\n    if (!isDynamic && fieldExists) {\n      dynamicBindings = dynamicBindings.filter((d) => d.key !== bindingField);\n    }\n    if (isDynamic && !fieldExists) {\n      dynamicBindings = [...dynamicBindings, { key: bindingField }];\n    }\n  }\n\n  // the reason this is done is to change the dynamicBindingsPathlist of a component when a user toggles the form control\n  // from component mode to json mode and vice versa.\n\n  // when in json mode, we want to get rid of all the existing componentData paths and replace it with a single path for the json mode\n  // for example: [{key: 'formData.sortBy.data[0].column'}, {key: 'formData.sortBy.data[1].column'}] will be replaced with just this [{key: 'formData.sortBy.data'}]\n\n  // when in component mode, we want to first remove all the paths for json mode and\n  //  get back all the paths in the componentData that have dynamic bindings and add them to the the dynamic bindings pathlist.\n  // for example: [{key: 'formData.sortBy.data'}] will be replaced with this [{key: 'formData.sortBy.data[0].column'}, {key: 'formData.sortBy.data[1].column'}]\n\n  // if the currently changing field is a component's view type\n  if (!!viewType) {\n    const dataBindingField = bindingField.replace(\".viewType\", \".data\");\n    // then we filter the field of any paths that includes the binding fields\n    dynamicBindings = dynamicBindings.filter(\n      (dynamicPath) => !dynamicPath?.key?.includes(dataBindingField),\n    );\n\n    // if the value of the viewType is of json and, we push in the field\n    if (value === ViewTypes.JSON) {\n      const jsonFieldPath = field.replace(\".viewType\", \".jsonData\");\n      const jsonFieldValue = get(action, jsonFieldPath);\n      if (isDynamicValue(jsonFieldValue)) {\n        dynamicBindings.push({ key: dataBindingField });\n      }\n    } else if (value === ViewTypes.COMPONENT) {\n      const componentFieldPath = field.replace(\".viewType\", \".componentData\");\n      const componentFieldValue = get(action, componentFieldPath);\n      temporaryDynamicPathStore = [];\n\n      if (!!componentFieldValue) {\n        getDynamicValuePaths(componentFieldValue, dataBindingField);\n      }\n      if (!!temporaryDynamicPathStore && temporaryDynamicPathStore.length > 0) {\n        dynamicBindings = [...dynamicBindings, ...temporaryDynamicPathStore];\n      }\n    }\n  }\n  return dynamicBindings;\n}\n\nexport function getEntityType(entity: DataTreeEntity) {\n  return \"ENTITY_TYPE\" in entity && entity.ENTITY_TYPE;\n}\n\nexport function getEntityId(entity: DataTreeEntity) {\n  if (isAction(entity)) return entity.actionId;\n  if (isWidget(entity)) return entity.widgetId;\n  if (isJSAction(entity)) return entity.actionId;\n}\n\nexport function getEntityName(\n  entity: DataTreeEntity,\n  entityConfig: DataTreeEntityConfig,\n) {\n  if (isAction(entity)) return entityConfig.name;\n  if (isWidget(entity)) return entity.widgetName;\n  if (isJSAction(entity)) return entityConfig.name;\n}\n","import { get, isEmpty, isUndefined, set } from \"lodash\";\nimport type { JSActionEntity } from \"@appsmith/entities/DataTree/types\";\nimport type { ConfigTree, DataTree } from \"entities/DataTree/dataTreeTypes\";\nimport { EvalErrorTypes, getEvalValuePath } from \"utils/DynamicBindingUtils\";\nimport type { JSUpdate, ParsedJSSubAction } from \"utils/JSPaneUtils\";\nimport { parseJSObject, isJSFunctionProperty } from \"@shared/ast\";\nimport type DataTreeEvaluator from \"workers/common/DataTreeEvaluator\";\nimport evaluateSync from \"workers/Evaluation/evaluate\";\nimport type { DataTreeDiff } from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport {\n  DataTreeDiffEvent,\n  getEntityNameAndPropertyPath,\n  isJSAction,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport {\n  removeFunctionsAndVariableJSCollection,\n  updateJSCollectionInUnEvalTree,\n} from \"workers/Evaluation/JSObject/utils\";\nimport { dataTreeEvaluator } from \"../handlers/evalTree\";\nimport JSObjectCollection from \"./Collection\";\nimport ExecutionMetaData from \"../fns/utils/ExecutionMetaData\";\nimport { jsPropertiesState } from \"./jsPropertiesState\";\nimport { getFixedTimeDifference } from \"workers/common/DataTreeEvaluator/utils\";\n\n/**\n * Here we update our unEvalTree according to the change in JSObject's body\n *\n * @param jsUpdates\n * @param localUnEvalTree\n * @returns\n */\nexport const getUpdatedLocalUnEvalTreeAfterJSUpdates = (\n  jsUpdates: Record<string, JSUpdate>,\n  localUnEvalTree: DataTree,\n  configTree: ConfigTree,\n) => {\n  if (!isEmpty(jsUpdates)) {\n    Object.entries(jsUpdates).forEach(([entityName, jsEntity]) => {\n      const entity = localUnEvalTree[entityName] as JSActionEntity;\n      const parsedBody = jsEntity.parsedBody;\n      if (isJSAction(entity)) {\n        if (!!parsedBody) {\n          //add/delete/update functions from dataTree\n          localUnEvalTree = updateJSCollectionInUnEvalTree(\n            parsedBody,\n            entity,\n            localUnEvalTree,\n            configTree,\n            entityName,\n          );\n        } else {\n          //if parse error remove functions and variables from dataTree\n          localUnEvalTree = removeFunctionsAndVariableJSCollection(\n            localUnEvalTree,\n            entity,\n            entityName,\n            configTree,\n          );\n        }\n      }\n    });\n  }\n  return localUnEvalTree;\n};\n\nexport const validJSBodyRegex = new RegExp(/^export default[\\s]*?({[\\s\\S]*?})/);\n\n/**\n * Here we parse the JSObject and then determine\n * 1. it's nature : async or sync\n * 2. Find arguments of JS Actions\n *\n * @param dataTreeEvalRef\n * @param entity\n * @param jsUpdates\n * @param unEvalDataTree\n * @param entityName\n * @returns\n */\nexport function saveResolvedFunctionsAndJSUpdates(\n  dataTreeEvalRef: DataTreeEvaluator,\n  entity: JSActionEntity,\n  jsUpdates: Record<string, JSUpdate>,\n  unEvalDataTree: DataTree,\n  entityName: string,\n) {\n  jsPropertiesState.delete(entityName);\n  const correctFormat =\n    entity.hasOwnProperty(\"body\") &&\n    !isUndefined(entity.body) &&\n    validJSBodyRegex.test(entity.body);\n  const isEmptyBody =\n    entity.hasOwnProperty(\"body\") &&\n    !isUndefined(entity.body) &&\n    entity?.body.trim() === \"\";\n\n  if (!isUndefined(entity.body) && (correctFormat || isEmptyBody)) {\n    try {\n      JSObjectCollection.deleteResolvedFunction(entityName);\n      JSObjectCollection.deleteUnEvalState(entityName);\n      JSObjectCollection.clearCachedVariablesForEvaluationContext(entityName);\n\n      const parseStartTime = performance.now();\n      const { parsedObject, success } = parseJSObject(entity.body);\n      const parseEndTime = performance.now();\n      const JSObjectASTParseTime = getFixedTimeDifference(\n        parseEndTime,\n        parseStartTime,\n      );\n      dataTreeEvalRef.logs.push({\n        JSObjectName: entityName,\n        JSObjectASTParseTime,\n      });\n      const actions: any = [];\n      const variables: any = [];\n      if (success) {\n        if (!!parsedObject) {\n          jsPropertiesState.update(entityName, parsedObject);\n          parsedObject.forEach((parsedElement) => {\n            if (isJSFunctionProperty(parsedElement)) {\n              try {\n                ExecutionMetaData.setExecutionMetaData({\n                  enableJSVarUpdateTracking: false,\n                  enableJSFnPostProcessors: false,\n                });\n                const { result } = evaluateSync(\n                  parsedElement.value,\n                  unEvalDataTree,\n                  false,\n                );\n\n                ExecutionMetaData.setExecutionMetaData({\n                  enableJSVarUpdateTracking: true,\n                  enableJSFnPostProcessors: true,\n                });\n                if (!!result) {\n                  let params: Array<{ name: string; value: unknown }> = [];\n\n                  if (parsedElement.arguments) {\n                    params = parsedElement.arguments.map(\n                      ({ defaultValue, paramName }) => ({\n                        name: paramName,\n                        value: defaultValue,\n                      }),\n                    );\n                  }\n\n                  const functionString = parsedElement.value;\n                  JSObjectCollection.updateResolvedFunctions(\n                    `${entityName}.${parsedElement.key}`,\n                    result,\n                  );\n                  JSObjectCollection.updateUnEvalState(\n                    `${entityName}.${parsedElement.key}`,\n                    functionString,\n                  );\n                  actions.push({\n                    name: parsedElement.key,\n                    body: functionString,\n                    arguments: params,\n                    parsedFunction: result,\n                  });\n                }\n              } catch {\n                // in case we need to handle error state\n              }\n            } else if (parsedElement.type !== \"literal\") {\n              // when a jsobject property is of the type \"prop1\" or 'prop1', ast outputs the\n              // key as \"\\\"prop1\\\"\" or \"\\'prop1\\'\". We need to remove the extra quotes.\n              const isStringRepresentation =\n                parsedElement.key.startsWith(\"'\") ||\n                parsedElement.key.startsWith('\"');\n              const parsedKey = isStringRepresentation\n                ? parsedElement.key.slice(1, -1)\n                : parsedElement.key;\n              variables.push({\n                name: parsedKey,\n                value: parsedElement.value,\n              });\n              JSObjectCollection.updateUnEvalState(\n                `${entityName}.${parsedElement.key}`,\n                parsedElement.value,\n              );\n            }\n          });\n          const parsedBody = {\n            body: entity.body,\n            actions: actions,\n            variables,\n          };\n          set(jsUpdates, `${entityName}`, {\n            parsedBody,\n            id: entity.actionId,\n          });\n        } else {\n          set(jsUpdates, `${entityName}`, {\n            parsedBody: undefined,\n            id: entity.actionId,\n          });\n        }\n      }\n    } catch (e) {\n      //if we need to push error as popup in case\n    }\n  } else {\n    const parsedBody = {\n      body: entity.body,\n      actions: [],\n      variables: [],\n    };\n    set(jsUpdates, `${entityName}`, {\n      parsedBody: parsedBody,\n      id: entity.actionId,\n    });\n  }\n\n  if (!correctFormat && !isUndefined(entity.body)) {\n    const errors = {\n      type: EvalErrorTypes.PARSE_JS_ERROR,\n      context: {\n        entity: entity,\n        propertyPath: entityName + \".body\",\n      },\n      message: \"Start object with export default\",\n    };\n    dataTreeEvalRef.errors.push(errors);\n  }\n\n  return jsUpdates;\n}\n\nexport function parseJSActions(\n  dataTreeEvalRef: DataTreeEvaluator,\n  unEvalDataTree: DataTree,\n  oldUnEvalTree?: DataTree,\n  differences?: DataTreeDiff[],\n) {\n  const resolvedFunctions = JSObjectCollection.getResolvedFunctions();\n  const unEvalState = JSObjectCollection.getUnEvalState();\n  let jsUpdates: Record<string, JSUpdate> = {};\n\n  if (!!differences && !!oldUnEvalTree) {\n    differences.forEach((diff) => {\n      const { entityName, propertyPath } = getEntityNameAndPropertyPath(\n        diff.payload.propertyPath,\n      );\n      const entity = unEvalDataTree[entityName];\n\n      if (!isJSAction(entity)) return false;\n\n      if (diff.event === DataTreeDiffEvent.DELETE) {\n        // when JSObject is deleted, we remove it from currentJSCollectionState & resolvedFunctions\n        if (unEvalState && unEvalState[diff.payload.propertyPath]) {\n          JSObjectCollection.deleteUnEvalState(diff.payload.propertyPath);\n        }\n        if (resolvedFunctions && resolvedFunctions[diff.payload.propertyPath]) {\n          JSObjectCollection.deleteResolvedFunction(diff.payload.propertyPath);\n        }\n      }\n\n      if (\n        (diff.event === DataTreeDiffEvent.EDIT && propertyPath === \"body\") ||\n        (diff.event === DataTreeDiffEvent.NEW && propertyPath === \"\")\n      ) {\n        jsUpdates = saveResolvedFunctionsAndJSUpdates(\n          dataTreeEvalRef,\n          entity,\n          jsUpdates,\n          unEvalDataTree,\n          entityName,\n        );\n      }\n    });\n  } else {\n    Object.keys(unEvalDataTree).forEach((entityName) => {\n      const entity = unEvalDataTree[entityName];\n      if (!isJSAction(entity)) {\n        return;\n      }\n      jsUpdates = saveResolvedFunctionsAndJSUpdates(\n        dataTreeEvalRef,\n        entity,\n        jsUpdates,\n        unEvalDataTree,\n        entityName,\n      );\n    });\n  }\n\n  Object.keys(jsUpdates).forEach((entityName) => {\n    const parsedBody = jsUpdates[entityName].parsedBody;\n    if (!parsedBody) return;\n    parsedBody.actions = parsedBody.actions.map((action) => {\n      return {\n        ...action,\n        // parsedFunction - used only to determine if function is async\n        parsedFunction: undefined,\n      } as ParsedJSSubAction;\n    });\n  });\n\n  return { jsUpdates };\n}\n\nexport function getJSEntities(dataTree: DataTree) {\n  const jsCollections: Record<string, JSActionEntity> = {};\n  Object.keys(dataTree).forEach((entityName: string) => {\n    const entity = dataTree[entityName];\n    if (isJSAction(entity)) {\n      jsCollections[entityName] = entity;\n    }\n  });\n  return jsCollections;\n}\n\nexport function updateEvalTreeWithJSCollectionState(evalTree: DataTree) {\n  // loop through jsCollectionState and set all values to evalTree\n  const jsCollections = JSObjectCollection.getVariableState();\n  const jsCollectionEntries = Object.entries(jsCollections);\n  for (const [jsObjectName, variableState] of jsCollectionEntries) {\n    if (!evalTree[jsObjectName]) continue;\n    evalTree[jsObjectName] = Object.assign(\n      evalTree[jsObjectName],\n      variableState,\n    );\n  }\n}\n\nexport function updateEvalTreeValueFromContext(paths: string[][]) {\n  const currentEvalContext = self;\n\n  if (!dataTreeEvaluator) return;\n  const evalTree = dataTreeEvaluator.getEvalTree();\n\n  for (const fullPathArray of paths) {\n    const [jsObjectName, variableName] = fullPathArray;\n    const entity = evalTree[jsObjectName];\n    if (jsObjectName && variableName && isJSAction(entity)) {\n      if (!(jsObjectName in currentEvalContext)) continue;\n\n      const variableValue = get(currentEvalContext, [\n        jsObjectName,\n        variableName,\n      ]);\n      const value = variableValue;\n      JSObjectCollection.setVariableValue(\n        value,\n        `${jsObjectName}.${variableName}`,\n      );\n      /*\n      JSobject variable values are picked from evalProps until the unevalValue is not modified.\n      Hence, we need to set the value in evalProps to ensure it doesn't have stale values.\n      */\n      set(\n        dataTreeEvaluator.evalProps,\n        getEvalValuePath(`${jsObjectName}.${variableName}`, {\n          isPopulated: true,\n          fullPath: true,\n        }),\n        value,\n      );\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport type {\n  ConfigTree,\n  DataTree,\n  DataTreeEntity,\n} from \"entities/DataTree/dataTreeTypes\";\nimport type { EvaluationError } from \"utils/DynamicBindingUtils\";\nimport { PropertyEvaluationErrorType } from \"utils/DynamicBindingUtils\";\nimport unescapeJS from \"unescape-js\";\nimport { Severity } from \"entities/AppsmithConsole\";\nimport type { EventType } from \"constants/AppsmithActionConstants/ActionConstants\";\nimport type { TriggerMeta } from \"@appsmith/sagas/ActionExecution/ActionExecutionSagas\";\nimport indirectEval from \"./indirectEval\";\nimport DOM_APIS from \"./domApis\";\nimport {\n  JSLibraryAccessor,\n  libraryReservedIdentifiers,\n} from \"../common/JSLibrary\";\nimport {\n  ActionInDataFieldErrorModifier,\n  errorModifier,\n  FoundPromiseInSyncEvalError,\n  PrimitiveErrorModifier,\n  TypeErrorModifier,\n} from \"./errorModifier\";\nimport { addDataTreeToContext } from \"@appsmith/workers/Evaluation/Actions\";\nimport { set } from \"lodash\";\nimport { klona } from \"klona\";\nimport { getEntityNameAndPropertyPath } from \"@appsmith/workers/Evaluation/evaluationUtils\";\n\nexport interface EvalResult {\n  result: any;\n  errors: EvaluationError[];\n}\n\nexport enum EvaluationScriptType {\n  EXPRESSION = \"EXPRESSION\",\n  ANONYMOUS_FUNCTION = \"ANONYMOUS_FUNCTION\",\n  ASYNC_ANONYMOUS_FUNCTION = \"ASYNC_ANONYMOUS_FUNCTION\",\n  TRIGGERS = \"TRIGGERS\",\n  OBJECT_PROPERTY = \"OBJECT_PROPERTY\",\n}\n\nexport const ScriptTemplate = \"<<string>>\";\n\nexport const EvaluationScripts: Record<EvaluationScriptType, string> = {\n  [EvaluationScriptType.EXPRESSION]: `\n  function $$closedFn () {\n    const $$result = ${ScriptTemplate}\n    return $$result\n  }\n  $$closedFn.call(THIS_CONTEXT)\n  `,\n  [EvaluationScriptType.ANONYMOUS_FUNCTION]: `\n  function $$closedFn (script) {\n    const $$userFunction = script;\n    const $$result = $$userFunction?.apply(THIS_CONTEXT, ARGUMENTS);\n    return $$result\n  }\n  $$closedFn(${ScriptTemplate})\n  `,\n  [EvaluationScriptType.ASYNC_ANONYMOUS_FUNCTION]: `\n  async function $$closedFn (script) {\n    const $$userFunction = script;\n    const $$result = $$userFunction?.apply(THIS_CONTEXT, ARGUMENTS);\n    return await $$result;\n  }\n  $$closedFn(${ScriptTemplate})\n  `,\n  [EvaluationScriptType.TRIGGERS]: `\n  async function $$closedFn () {\n    const $$result = ${ScriptTemplate};\n    return await $$result\n  }\n  $$closedFn.call(THIS_CONTEXT)\n  `,\n  [EvaluationScriptType.OBJECT_PROPERTY]: `\n  function $$closedFn () {\n    const $$result = {${ScriptTemplate}}\n    return $$result\n  }\n  $$closedFn.call(THIS_CONTEXT)\n  `,\n};\n\nconst topLevelWorkerAPIs = Object.keys(self).reduce((acc, key: string) => {\n  acc[key] = true;\n  return acc;\n}, {} as any);\n\nconst ignoreGlobalObjectKeys = new Set([\n  \"evaluationVersion\",\n  \"window\",\n  \"document\",\n  \"location\",\n]);\n\nfunction resetWorkerGlobalScope() {\n  const jsLibraryAccessorSet = JSLibraryAccessor.getSet();\n\n  for (const key of Object.keys(self)) {\n    if (topLevelWorkerAPIs[key] || DOM_APIS[key]) continue;\n    //TODO: Remove this once we have a better way to handle this\n    if (ignoreGlobalObjectKeys.has(key)) continue;\n    if (jsLibraryAccessorSet.has(key)) continue;\n    if (libraryReservedIdentifiers[key]) continue;\n    try {\n      // @ts-expect-error: Types are not available\n      delete self[key];\n    } catch (e) {\n      // @ts-expect-error: Types are not available\n      self[key] = undefined;\n    }\n  }\n}\n\nexport const getScriptType = (\n  evalArgumentsExist = false,\n  isTriggerBased = false,\n): EvaluationScriptType => {\n  let scriptType = EvaluationScriptType.EXPRESSION;\n  if (evalArgumentsExist && isTriggerBased) {\n    scriptType = EvaluationScriptType.ASYNC_ANONYMOUS_FUNCTION;\n  } else if (evalArgumentsExist && !isTriggerBased) {\n    scriptType = EvaluationScriptType.ANONYMOUS_FUNCTION;\n  } else if (isTriggerBased && !evalArgumentsExist) {\n    scriptType = EvaluationScriptType.TRIGGERS;\n  }\n  return scriptType;\n};\n\nexport const additionalLibrariesNames: string[] = [];\n\nexport const getScriptToEval = (\n  userScript: string,\n  type: EvaluationScriptType,\n): string => {\n  // Using replace here would break scripts with replacement patterns (ex: $&, $$)\n  const buffer = EvaluationScripts[type].split(ScriptTemplate);\n  return `${buffer[0]}${userScript}${buffer[1]}`;\n};\n\nconst beginsWithLineBreakRegex = /^\\s+|\\s+$/;\n\nexport type EvalContext = Record<string, any>;\n\nexport interface createEvaluationContextArgs {\n  dataTree: DataTree;\n  configTree?: ConfigTree;\n  context?: EvaluateContext;\n  isTriggerBased: boolean;\n  evalArguments?: Array<unknown>;\n  /*\n   Whether to remove functions like \"run\", \"clear\" from entities in global context\n   use case => To show lint warning when Api.run is used in a function bound to a data field (Eg. Button.text)\n   */\n  removeEntityFunctions?: boolean;\n}\n\n/**\n * overrideContext is a set of key-value pairs where they key is a path\n * and the value is any value.\n *\n * The purpose of overrideContext is to update the EVAL_CONTEXT's entity properties\n * with new value during runtime.\n * An example of runtime would be execution of a query where some parameters are passed\n * to the .run function.\n * This enables to override the entities and their values in EVAL_CONTEXT without any side-effects\n * to the actual dataTree since this is a non-persistent transient state of evaluation.\n *\n * Example:\n * overrideContext = {\n *  \"Input1.text\": \"hello\"\n * }\n * // before overriding\n * EVAL_CONTEXT = {\n *  \"Input1\": {\n *    \"text\": \"Hey!\"\n *  }\n * \"Text1\": {\n *    \"text\": \"YOLO\"\n *  }\n * }\n *\n * // after overriding just for the particular evaluation\n * EVAL_CONTEXT = {\n *  \"Input1\": {\n *    \"text\": \"Hello\"\n *  },\n * \"Text1\": {\n *  \"text\": \"YOLO\"\n * }\n *\n * Where is this overriding actually used?\n * At the time of writing this, the use case originated to evaluate run-time params of a\n * query module instance as pass them off as inputs.\n * Eg. QueryModule1.run({ input1: \"10\" }) and the bindings for this could be QueryModule1.inputs.input1\n * So the executionParams needs to be put in the EVAL_CONTEXT with the above path and the supplied value.\n * Therefore an overriding of the EVAL_CONTEXT is required during runtime execution.\n *\n * Why klona is used to cloned here?\n * Since EVAL_CONTEXT is build from the dataTree by adding the entities directly referentially\n * Eg. EVAL_CONTEXT[\"Input1\"] = dataTree[\"Input1\"]\n * Overriding the EVAL_CONTEXT directly using set(EVAL_CONTEXT, path, value); would mutate the dataTree\n * thus polluting the dataTree for the next evaluation.\n * To avoid this, all the unique entities of present in the overrideContext is identified and cloned once for\n * the particular entities only. This avoid unnecessary cloning of every entity and further multiple times.\n *\n */\nconst overrideEvalContext = (\n  EVAL_CONTEXT: EvalContext,\n  overrideContext?: Record<string, unknown>,\n) => {\n  if (overrideContext) {\n    const entitiesClonedSoFar = new Set();\n\n    Object.keys(overrideContext).forEach((path) => {\n      const { entityName } = getEntityNameAndPropertyPath(path);\n\n      if (entityName in EVAL_CONTEXT && !entitiesClonedSoFar.has(entityName)) {\n        entitiesClonedSoFar.add(entityName);\n        EVAL_CONTEXT[entityName] = klona(EVAL_CONTEXT[entityName]);\n      }\n    });\n\n    Object.entries(overrideContext).forEach(([path, value]) => {\n      set(EVAL_CONTEXT, path, value);\n    });\n  }\n};\n\n/**\n * This method created an object with dataTree and appsmith's framework actions that needs to be added to worker global scope for the JS code evaluation to then consume it.\n *\n * Example:\n * - For `eval(\"Table1.tableData\")` code to work as expected, we define Table1.tableData in worker global scope and for that we use `createEvaluationContext` to get the object to set in global scope.\n */\nexport const createEvaluationContext = (args: createEvaluationContextArgs) => {\n  const {\n    configTree = {},\n    context,\n    dataTree,\n    evalArguments,\n    isTriggerBased,\n    removeEntityFunctions,\n  } = args;\n\n  const EVAL_CONTEXT: EvalContext = {};\n  ///// Adding callback data\n  EVAL_CONTEXT.ARGUMENTS = evalArguments;\n  //// Adding contextual data not part of data tree\n  EVAL_CONTEXT.THIS_CONTEXT = context?.thisContext || {};\n\n  if (context?.globalContext) {\n    Object.assign(EVAL_CONTEXT, context.globalContext);\n  }\n\n  addDataTreeToContext({\n    EVAL_CONTEXT,\n    dataTree,\n    configTree,\n    removeEntityFunctions: !!removeEntityFunctions,\n    isTriggerBased,\n  });\n\n  overrideEvalContext(EVAL_CONTEXT, context?.overrideContext);\n\n  return EVAL_CONTEXT;\n};\n\nexport function sanitizeScript(js: string) {\n  // We remove any line breaks from the beginning of the script because that\n  // makes the final function invalid. We also unescape any escaped characters\n  // so that eval can happen\n  const trimmedJS = js.replace(beginsWithLineBreakRegex, \"\");\n  return self.evaluationVersion > 1 ? trimmedJS : unescapeJS(trimmedJS);\n}\n\n/** Define a context just for this script\n * thisContext will define it on the `this`\n * globalContext will define it globally\n * requestId is used for completing promises\n */\nexport interface EvaluateContext {\n  thisContext?: Record<string, any>;\n  globalContext?: Record<string, any>;\n  requestId?: string;\n  eventType?: EventType;\n  triggerMeta?: TriggerMeta;\n  overrideContext?: Record<string, unknown>;\n}\n\nexport const getUserScriptToEvaluate = (\n  userScript: string,\n  isTriggerBased: boolean,\n  evalArguments?: Array<any>,\n) => {\n  const unescapedJS = sanitizeScript(userScript);\n  // If nothing is present to evaluate, return\n  if (!unescapedJS.length) {\n    return {\n      script: \"\",\n    };\n  }\n  const scriptType = getScriptType(!!evalArguments, isTriggerBased);\n  const script = getScriptToEval(unescapedJS, scriptType);\n  return { script };\n};\n\nexport function setEvalContext({\n  configTree,\n  context,\n  dataTree,\n  evalArguments,\n  isDataField,\n  isTriggerBased,\n}: {\n  context?: EvaluateContext;\n  dataTree: DataTree;\n  configTree?: ConfigTree;\n  evalArguments?: Array<any>;\n  isDataField: boolean;\n  isTriggerBased: boolean;\n}) {\n  self[\"$isDataField\"] = isDataField;\n\n  const evalContext = createEvaluationContext({\n    dataTree,\n    configTree,\n    context,\n    evalArguments,\n    isTriggerBased,\n  });\n\n  Object.assign(self, evalContext);\n}\n\nexport default function evaluateSync(\n  userScript: string,\n  dataTree: DataTree,\n  isJSCollection: boolean,\n  context?: EvaluateContext,\n  evalArguments?: Array<any>,\n  configTree?: ConfigTree,\n): EvalResult {\n  return (function () {\n    const errors: EvaluationError[] = [];\n    let result;\n\n    const { script } = getUserScriptToEvaluate(\n      userScript,\n      false,\n      evalArguments,\n    );\n\n    // If nothing is present to evaluate, return instead of evaluating\n    if (!script.length) {\n      return {\n        errors: [],\n        result: undefined,\n        triggers: [],\n      };\n    }\n    resetWorkerGlobalScope();\n\n    setEvalContext({\n      dataTree,\n      configTree,\n      isDataField: true,\n      isTriggerBased: isJSCollection,\n      context,\n      evalArguments,\n    });\n\n    try {\n      result = indirectEval(script);\n      if (result instanceof Promise) {\n        /**\n         * If a promise is returned in data field then show the error to help understand data field doesn't await to resolve promise.\n         * NOTE: Awaiting for promise will make data field evaluation slower.\n         */\n        throw new FoundPromiseInSyncEvalError();\n      }\n    } catch (error: any) {\n      const { errorCategory, errorMessage, rootcause } = errorModifier.run(\n        error,\n        { userScript: error.userScript || userScript, source: error.source },\n        [ActionInDataFieldErrorModifier, TypeErrorModifier],\n      );\n      errors.push({\n        errorMessage,\n        severity: Severity.ERROR,\n        raw: script,\n        errorType: PropertyEvaluationErrorType.PARSE,\n        originalBinding: userScript,\n        kind: {\n          category: errorCategory,\n          rootcause,\n        },\n      });\n    } finally {\n      self[\"$isDataField\"] = false;\n    }\n    return { result, errors };\n  })();\n}\n\nexport async function evaluateAsync(\n  userScript: string,\n  dataTree: DataTree,\n  configTree: ConfigTree,\n  context?: EvaluateContext,\n  evalArguments?: Array<any>,\n) {\n  return (async function () {\n    resetWorkerGlobalScope();\n    const errors: EvaluationError[] = [];\n    let result;\n\n    const { script } = getUserScriptToEvaluate(userScript, true, evalArguments);\n\n    setEvalContext({\n      dataTree,\n      configTree,\n      isDataField: false,\n      isTriggerBased: true,\n      context,\n      evalArguments,\n    });\n\n    try {\n      result = await indirectEval(script);\n    } catch (error: any) {\n      const { errorMessage } = errorModifier.run(\n        error,\n        { userScript: error.userScript || userScript, source: error.source },\n        [PrimitiveErrorModifier, TypeErrorModifier],\n      );\n      errors.push({\n        errorMessage: errorMessage,\n        severity: Severity.ERROR,\n        raw: script,\n        errorType: PropertyEvaluationErrorType.PARSE,\n        originalBinding: userScript,\n      });\n    } finally {\n      return {\n        result,\n        errors,\n      };\n    }\n  })();\n}\n\nexport function shouldAddSetter(setter: any, entity: DataTreeEntity) {\n  const isDisabledExpression = setter.disabled;\n\n  if (!isDisabledExpression) return true;\n\n  const isDisabledFn = new Function(\"options\", isDisabledExpression);\n\n  return !isDisabledFn({ entity });\n}\n","import {\n  getEntityNameAndPropertyPath,\n  isWidget,\n  overrideWidgetProperties,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport type { EvalMetaUpdates } from \"@appsmith/workers/common/DataTreeEvaluator/types\";\nimport { evalTreeWithChanges } from \"./evalTreeWithChanges\";\nimport { dataTreeEvaluator } from \"./handlers/evalTree\";\nimport { get, set } from \"lodash\";\nimport { validate } from \"./validations\";\nimport type {\n  DataTreeEntityConfig,\n  WidgetEntity,\n} from \"@appsmith/entities/DataTree/types\";\nimport type {\n  ConfigTree,\n  DataTree,\n  DataTreeEntity,\n} from \"entities/DataTree/dataTreeTypes\";\nimport { getFnWithGuards, isAsyncGuard } from \"./fns/utils/fnGuard\";\nimport { shouldAddSetter } from \"./evaluate\";\n\nclass Setters {\n  /** stores the setter method accessor as key and true as value\n   *\n   * example - ```{ \"Table1.setVisibility\": true, \"Table1.setData\": true }```\n   */\n  private setterMethodLookup: Record<string, true> = {};\n  /** stores the setter property accessor as key and setter method name as value\n   *\n   * example - ```{ \"Table1.tableData\": \"Table1.setData\" }```\n   */\n  private setterAccessorMap: Record<string, string> = {};\n\n  private async applySetterMethod(\n    path: string,\n    value: unknown,\n    setterMethodName: string,\n  ) {\n    const { entityName, propertyPath } = getEntityNameAndPropertyPath(path);\n\n    if (!dataTreeEvaluator) return;\n\n    const evalTree = dataTreeEvaluator.getEvalTree();\n    const configTree = dataTreeEvaluator.getConfigTree();\n\n    const entity = evalTree[entityName];\n    const entityConfig = configTree[entityName];\n\n    const updatedProperties: string[][] = [];\n    const overriddenProperties: string[] = [];\n    const evalMetaUpdates: EvalMetaUpdates = [];\n\n    let parsedValue = value;\n\n    if (value === undefined) {\n      const error = new Error(\n        `The value passed to ${entityName}.${setterMethodName}() evaluates to undefined.`,\n      );\n      error.name = entityName + \".\" + setterMethodName + \" failed\";\n      throw error;\n    }\n\n    const { validationPaths } = entityConfig;\n\n    if (validationPaths) {\n      const validationConfig = validationPaths[propertyPath] || {};\n\n      const config = {\n        ...validationConfig,\n        params: { ...(validationConfig.params || {}) },\n      };\n      config.params.strict = true;\n\n      const { isValid, messages, parsed } = validate(\n        config,\n        value,\n        entity as Record<string, unknown>,\n        propertyPath,\n      );\n      parsedValue = parsed;\n\n      if (!isValid) {\n        const message = messages && messages[0] ? messages[0].message : \"\";\n        const error = new Error(\n          `${entityName + \".\" + setterMethodName}: ${message}`,\n        );\n        error.name = entityName + \".\" + setterMethodName + \" failed\";\n        throw error;\n      }\n    }\n\n    if (isWidget(entity)) {\n      overrideWidgetProperties({\n        entity: entity as WidgetEntity,\n        propertyPath,\n        value: parsedValue,\n        currentTree: evalTree,\n        configTree,\n        evalMetaUpdates,\n        fullPropertyPath: path,\n        isNewWidget: false,\n        shouldUpdateGlobalContext: true,\n        overriddenProperties,\n      });\n\n      overriddenProperties.forEach((propPath) => {\n        updatedProperties.push([entityName, propPath]);\n      });\n    }\n\n    set(evalTree, path, parsedValue);\n    set(self, path, parsedValue);\n\n    /**\n     * Making the update to dataTree async as there could be queue microtask updates that need to execute before this update.\n     * Issue:- https://github.com/appsmithorg/appsmith/issues/25364\n     */\n    return new Promise((resolve) => {\n      resolve(parsedValue);\n    }).then((res) => {\n      updatedProperties.push([entityName, propertyPath]);\n      evalTreeWithChanges(updatedProperties, evalMetaUpdates);\n      return res;\n    });\n  }\n  /** Generates a new setter method */\n  private createSetter(\n    path: string,\n    setterMethodName: string,\n    entityName: string,\n  ) {\n    /** register the setter method in the lookup */\n    set(this.setterMethodLookup, [entityName, setterMethodName], true);\n\n    const fn = async (value: unknown) => {\n      if (!dataTreeEvaluator) return;\n      return this.applySetterMethod(path, value, setterMethodName);\n    };\n\n    return getFnWithGuards(fn, setterMethodName, [isAsyncGuard]);\n  }\n\n  clear() {\n    this.setterMethodLookup = {};\n  }\n\n  has(entityName: string, propertyName: string) {\n    return get(this.setterMethodLookup, [entityName, propertyName], false);\n  }\n\n  getMap() {\n    return this.setterMethodLookup;\n  }\n\n  getSetterAccessorMap() {\n    return this.setterAccessorMap;\n  }\n\n  getEntitySettersFromConfig(\n    entityConfig: DataTreeEntityConfig,\n    entityName: string,\n    entity: DataTreeEntity,\n  ) {\n    const setterMethodMap: Record<string, any> = {};\n    if (!entityConfig) return setterMethodMap;\n\n    if (entityConfig.__setters) {\n      for (const setterMethodName of Object.keys(entityConfig.__setters)) {\n        const pathToSet = entityConfig.__setters[setterMethodName].path;\n\n        if (!shouldAddSetter(entityConfig.__setters[setterMethodName], entity))\n          continue;\n\n        this.setterAccessorMap[pathToSet] = `${entityName}.${setterMethodName}`;\n\n        setterMethodMap[setterMethodName] = this.createSetter(\n          pathToSet,\n          setterMethodName,\n          entityName,\n        );\n      }\n    }\n\n    return setterMethodMap;\n  }\n\n  init(configTree: ConfigTree, dataTree: DataTree) {\n    const configTreeEntries = Object.entries(configTree);\n    for (const [entityName, entityConfig] of configTreeEntries) {\n      const entity = dataTree[entityName];\n\n      this.getEntitySettersFromConfig(entityConfig, entityName, entity);\n    }\n  }\n}\n\nconst setters = new Setters();\nexport default setters;\n","export enum TernWorkerAction {\n  INIT = \"INIT\",\n  ADD_FILE = \"ADD_FILE\",\n  DELETE_FILE = \"DELETE_FILE\",\n  REQUEST = \"REQUEST\",\n  GET_FILE = \"GET_FILE\",\n  DELETE_DEF = \"DELETE_DEF\",\n  ADD_DEF = \"ADD_DEF\",\n  DEBUG = \"DEBUG\",\n}\n\nexport type CallbackFn = (...args: any) => any;\n","import type { Server, Def } from \"tern\";\nimport tern from \"tern\";\nimport type { CallbackFn } from \"utils/autocomplete/types\";\nimport { TernWorkerAction } from \"utils/autocomplete/types\";\nimport ecma from \"constants/defs/ecmascript.json\";\nimport lodash from \"constants/defs/lodash.json\";\nimport base64 from \"constants/defs/base64-js.json\";\nimport moment from \"constants/defs/moment.json\";\nimport forge from \"constants/defs/forge.json\";\nimport browser from \"constants/defs/browser.json\";\nimport {\n  GLOBAL_DEFS,\n  GLOBAL_FUNCTIONS,\n} from \"@appsmith/utils/autocomplete/EntityDefinitions\";\n\nlet server: Server;\n\nlet nextId = 0;\nconst pending: { [x: number]: CallbackFn } = {};\n\nself.onmessage = function (e) {\n  const data = e.data;\n  switch (data.type) {\n    case TernWorkerAction.INIT:\n      return startServer(data.plugins, data.scripts);\n    case TernWorkerAction.ADD_FILE:\n      return server.addFile(data.name, data.text);\n    case TernWorkerAction.DELETE_FILE:\n      return server.delFile(data.name);\n    case TernWorkerAction.REQUEST:\n      return server.request(data.body, function (err, reqData) {\n        postMessage({ id: data.id, body: reqData, err: err && String(err) });\n      });\n    case TernWorkerAction.GET_FILE:\n      const c = pending[data.id];\n      delete pending[data.id];\n      return c(data.err, data.text);\n    case TernWorkerAction.DELETE_DEF:\n      return server.deleteDefs(data.name);\n    case TernWorkerAction.ADD_DEF:\n      return server.addDefs(data.defs);\n    default:\n      throw new Error(\"Unknown message type: \" + data.type);\n  }\n};\n\nfunction getFile(file: string, c: CallbackFn) {\n  postMessage({ type: TernWorkerAction.GET_FILE, name: file, id: ++nextId });\n  pending[nextId] = c;\n}\n\nfunction startServer(plugins = {}, scripts?: string[]) {\n  if (scripts) self.importScripts.apply(null, scripts);\n\n  server = new tern.Server({\n    getFile: getFile,\n    async: true,\n    defs: [\n      ecma,\n      browser,\n      GLOBAL_FUNCTIONS,\n      GLOBAL_DEFS,\n      lodash,\n      base64,\n      moment,\n      forge,\n    ] as Def[],\n    plugins: plugins,\n  });\n}\n\nself.console = {\n  ...self.console,\n  log: function (v) {\n    postMessage({ type: TernWorkerAction.DEBUG, message: v });\n  },\n};\n","export enum AutocompleteDataType {\n  OBJECT = \"OBJECT\",\n  NUMBER = \"NUMBER\",\n  ARRAY = \"ARRAY\",\n  FUNCTION = \"FUNCTION\",\n  BOOLEAN = \"BOOLEAN\",\n  STRING = \"STRING\",\n  UNKNOWN = \"UNKNOWN\",\n}\n","import type { ExtraDef } from \"utils/autocomplete/defCreatorUtils\";\nimport { generateTypeDef } from \"utils/autocomplete/defCreatorUtils\";\nimport {\n  ENTITY_TYPE,\n  type AppsmithEntity,\n} from \"@appsmith/entities/DataTree/types\";\nimport _ from \"lodash\";\nimport { EVALUATION_PATH } from \"utils/DynamicBindingUtils\";\nimport type { Def } from \"tern\";\nimport type {\n  ActionEntity,\n  ActionEntityConfig,\n  DataTreeEntityConfig,\n  WidgetEntityConfig,\n} from \"@appsmith/entities/DataTree/types\";\nimport type { FieldEntityInformation } from \"components/editorComponents/CodeEditor/EditorConfig\";\nimport { AutocompleteDataType } from \"utils/autocomplete/AutocompleteDataType\";\nimport { eeAppsmithAutocompleteDefs } from \"@appsmith/utils/autocomplete/helpers\";\n\nexport const entityDefinitions = {\n  APPSMITH: (entity: AppsmithEntity, extraDefsToDefine: ExtraDef) => {\n    const generatedTypeDef = generateTypeDef(\n      _.omit(entity, \"ENTITY_TYPE\", EVALUATION_PATH),\n      extraDefsToDefine,\n    );\n    if (\n      typeof generatedTypeDef === \"object\" &&\n      typeof generatedTypeDef.geolocation === \"object\"\n    ) {\n      return {\n        ...generatedTypeDef,\n        \"!doc\":\n          \"A global object that provides access to information and functionalities within an application\",\n        \"!url\": \"https://docs.appsmith.com/reference/appsmith-framework\",\n        store: {\n          ...(generatedTypeDef.store as Def),\n          \"!doc\":\n            \"Object to access any app-level data or temporary state that is stored on the user's browser\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#store-object\",\n        },\n        user: {\n          ...(generatedTypeDef.user as Def),\n          \"!doc\":\n            \"Object that contains the data of the currently authenticated user.\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#user-object\",\n        },\n        URL: {\n          ...(generatedTypeDef.URL as Def),\n          \"!doc\": \"Object containing all the attributes of the current URL\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#url-object\",\n        },\n        theme: {\n          ...(generatedTypeDef.theme as Def),\n          \"!doc\":\n            \"Object containing the details of the theme properties applied to the application\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#theme-object\",\n        },\n        mode: {\n          \"!type\": generatedTypeDef.mode as Def,\n          \"!doc\":\n            \"An enum that contains whether the app runs in view or edit mode. It takes the values VIEW or EDIT\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#mode-enum\",\n        },\n        geolocation: {\n          ...generatedTypeDef.geolocation,\n          \"!doc\":\n            \"Object containing functions that allow you to retrieve the current user's location and the coordinates received from the user's device using the Geolocation API.\",\n          \"!url\":\n            \"https://docs.appsmith.com/reference/appsmith-framework/context-object#geolocation-object\",\n          getCurrentPosition: {\n            \"!type\":\n              \"fn(onSuccess: fn() -> void, onError: fn() -> void, options: object) -> +Promise|void\",\n            \"!url\":\n              \"https://docs.appsmith.com/reference/appsmith-framework/context-object#geolocationgetcurrentposition\",\n          },\n          watchPosition: {\n            \"!type\": \"fn(options: object) -> void\",\n            \"!url\":\n              \"https://docs.appsmith.com/reference/appsmith-framework/context-object#geolocationwatchposition\",\n          },\n          clearWatch: {\n            \"!type\": \"fn() -> +Promise|void\",\n            \"!url\":\n              \"https://docs.appsmith.com/reference/appsmith-framework/context-object#geolocationclearwatch\",\n          },\n        },\n        ...eeAppsmithAutocompleteDefs(generatedTypeDef),\n      };\n    }\n    return generatedTypeDef;\n  },\n  ACTION: (entity: ActionEntity, extraDefsToDefine: ExtraDef) => {\n    const dataDef = generateTypeDef(entity.data, extraDefsToDefine);\n    let responseMetaDef = generateTypeDef(\n      entity.responseMeta,\n      extraDefsToDefine,\n    );\n\n    if (_.isString(responseMetaDef)) {\n      responseMetaDef = {\n        \"!type\": responseMetaDef,\n      };\n    }\n\n    let dataCustomDef: Def = {\n      \"!doc\":\n        \"A read-only property that contains the response body from the last successful execution of this query.\",\n      \"!url\":\n        \"https://docs.appsmith.com/reference/appsmith-framework/query-object#data-array\",\n    };\n\n    if (_.isString(dataDef)) {\n      dataCustomDef[\"!type\"] = dataDef;\n    } else {\n      dataCustomDef = { ...dataCustomDef, ...dataDef };\n    }\n    return {\n      \"!doc\":\n        \"Object that contains the properties required to run queries and access the query data.\",\n      \"!url\":\n        \"https://docs.appsmith.com/reference/appsmith-framework/query-object\",\n      isLoading: {\n        \"!type\": \"bool\",\n        \"!doc\":\n          \"Boolean that indicates whether the query is currently being executed.\",\n      },\n      data: dataCustomDef,\n      responseMeta: {\n        \"!doc\":\n          \"Object that contains details about the response, such as the status code, headers, and other relevant information related to the query's execution and the server's response.\",\n        \"!url\":\n          \"https://docs.appsmith.com/reference/appsmith-framework/query-object#responsemeta-object\",\n        ...responseMetaDef,\n      },\n      run: {\n        \"!type\": \"fn(params?: {}) -> +Promise\",\n        \"!url\":\n          \"https://docs.appsmith.com/reference/appsmith-framework/query-object#queryrun\",\n        \"!doc\": \"Executes the query with the given parameters.\",\n      },\n      clear: {\n        \"!type\": \"fn() -> +Promise\",\n        \"!url\":\n          \"https://docs.appsmith.com/reference/appsmith-framework/query-object#queryclear\",\n        \"!doc\": \"Clears the query data.\",\n      },\n    };\n  },\n};\n\n/*\n  $__name__$ is just to reduce occurrences of global def showing up in auto completion for user as `$` is less commonly used as entityName/\n\n  GLOBAL_DEFS are maintained to support definition for array of objects which currently aren't supported by our generateTypeDef.\n*/\nexport const GLOBAL_DEFS = {\n  $__dropdownOption__$: {\n    label: \"string\",\n    value: \"string\",\n  },\n  $__dropdrowOptionWithChildren__$: {\n    label: \"string\",\n    value: \"string\",\n    children: \"[$__dropdrowOptionWithChildren__$]\",\n  },\n  $__chartDataPoint__$: {\n    x: \"string\",\n    y: \"string\",\n  },\n  $__file__$: {\n    data: \"string\",\n    dataFormat: \"string\",\n    name: \"text\",\n    type: \"file\",\n  },\n  $__mapMarker__$: {\n    lat: \"number\",\n    long: \"number\",\n    title: \"string\",\n    description: \"string\",\n  },\n};\n\nexport const GLOBAL_FUNCTIONS = {\n  \"!name\": \"DATA_TREE.APPSMITH.FUNCTIONS\",\n  navigateTo: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/navigate-to\",\n    \"!doc\":\n      \"Enables navigation between the internal pages of the App or to an external URL.\",\n    \"!type\":\n      \"fn(pageNameOrUrl: string, params: {}, target?: string) -> +Promise\",\n  },\n  showAlert: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/show-alert\",\n    \"!doc\":\n      \"Displays a temporary toast-style alert message to the user for precisely 5 seconds. The duration of the alert message can't be modified.\",\n    \"!type\": \"fn(message: string, style: string) -> +Promise\",\n  },\n  showModal: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/show-modal\",\n    \"!doc\":\n      \"Opens an existing Modal widget and bring it into focus on the page\",\n    \"!type\": \"fn(modalName: string) -> +Promise\",\n  },\n  closeModal: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/close-modal\",\n    \"!doc\": \"Close a modal\",\n    \"!type\": \"fn(modalName: string) -> +Promise\",\n  },\n  storeValue: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/store-value\",\n    \"!doc\":\n      \"Stores the data in the browser's local storage as key-value pairs that represent storage objects and can be later accessed anywhere in the application via <code>appsmith.store</code>.\",\n    \"!type\": \"fn(key: string, value: any, persist?: bool) -> +Promise\",\n  },\n  removeValue: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/remove-value\",\n    \"!doc\": \"Remove key value data locally\",\n    \"!type\": \"fn(key: string) -> +Promise\",\n  },\n  clearStore: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/clear-store\",\n    \"!doc\": \"Clear all key value data locally\",\n    \"!type\": \"fn() -> +Promise\",\n  },\n  download: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/download\",\n    \"!doc\":\n      \"Download any data as a file, leveraging the capabilities of the downloadjs library.\",\n    \"!type\":\n      \"fn(data: string|+Blob, fileName: string, fileType?: string) -> +Promise\",\n  },\n  copyToClipboard: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/copy-to-clipboard\",\n    \"!doc\": \"Copies the given text to clipboard\",\n    \"!type\": \"fn(data: string, options: object) -> +Promise\",\n  },\n  resetWidget: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/reset-widget\",\n    \"!doc\":\n      \"Resets a widget to its default state. All user input changes are reverted and its properties' default values are applied.\",\n    \"!type\": \"fn(widgetName: string, resetChildren: bool) -> +Promise\",\n  },\n  setInterval: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/intervals-time-events\",\n    \"!doc\": \"Executes a function at a given interval\",\n    \"!type\":\n      \"fn(callback: fn() -> void, interval: number, id?: string) -> number\",\n  },\n  clearInterval: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/clear-interval\",\n    \"!doc\": \"Stop executing a setInterval with id\",\n    \"!type\": \"fn(id: string) -> void\",\n  },\n  postWindowMessage: {\n    \"!url\":\n      \"https://docs.appsmith.com/reference/appsmith-framework/widget-actions/post-message\",\n    \"!doc\":\n      \"Establish cross-origin communication between Window objects/page and iframes\",\n    \"!type\": \"fn(message: unknown, source: string, targetOrigin: string)\",\n  },\n};\n\nexport const ternDocsInfo: Record<string, any> = {\n  showAlert: {\n    exampleArgs: [\n      \"'This is a success message', 'success'\",\n      \"'This is an error message', 'error'\",\n    ],\n  },\n  showModal: {\n    exampleArgs: [\"Modal1.name\"],\n  },\n  closeModal: {\n    exampleArgs: [\"Modal1.name\"],\n  },\n  navigateTo: {\n    exampleArgs: [\n      \"'Page1', { id: 1 }\",\n      \"'https://appsmith.com', {}, 'NEW_WINDOW'\",\n    ],\n  },\n  copyToClipboard: {\n    exampleArgs: [\"'Hello'\"],\n  },\n  download: {\n    exampleArgs: [\n      \"'Hello World', 'hello.txt', 'text/plain'\",\n      \"FilePicker1.files[0].data, 'data.json'\",\n    ],\n  },\n  storeValue: {\n    exampleArgs: [\"'key', 'value'\"],\n  },\n  removeValue: {\n    exampleArgs: [\"'key'\"],\n  },\n  clearStore: {\n    exampleArgs: [\"\"],\n  },\n  resetWidget: {\n    exampleArgs: [\"'Table1', false\"],\n  },\n  setInterval: {\n    exampleArgs: [\"() => showAlert('Hello'), 1000, 'id'\"],\n  },\n  clearInterval: {\n    exampleArgs: [\"'id'\"],\n  },\n  postWindowMessage: {\n    exampleArgs: [\"message, 'Iframe1', '*'\"],\n  },\n};\n\nexport type EntityDefinitionsOptions = keyof typeof entityDefinitions;\n\nexport const getEachEntityInformation = {\n  [ENTITY_TYPE.ACTION]: (\n    entity: DataTreeEntityConfig,\n    entityInformation: FieldEntityInformation,\n  ): FieldEntityInformation => {\n    const actionEntity = entity as ActionEntityConfig;\n    entityInformation.entityId = actionEntity.actionId;\n    return entityInformation;\n  },\n  [ENTITY_TYPE.WIDGET]: (\n    entity: DataTreeEntityConfig,\n    entityInformation: FieldEntityInformation,\n    propertyPath: string,\n  ): FieldEntityInformation => {\n    const widgetEntity = entity as WidgetEntityConfig;\n    const isTriggerPath = widgetEntity.triggerPaths[propertyPath];\n    entityInformation.entityId = widgetEntity.widgetId;\n    if (isTriggerPath)\n      entityInformation.expectedType = AutocompleteDataType.FUNCTION;\n    entityInformation.isTriggerPath = isTriggerPath;\n    entityInformation.widgetType = widgetEntity.type;\n    return entityInformation;\n  },\n  [ENTITY_TYPE.JSACTION]: (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    entity: DataTreeEntityConfig,\n    entityInformation: FieldEntityInformation,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    propertyPath: string,\n  ): FieldEntityInformation => {\n    entityInformation.isTriggerPath = true;\n    return entityInformation;\n  },\n};\n","import { find, toPath, union } from \"lodash\";\nimport type { EvalError } from \"utils/DynamicBindingUtils\";\nimport { EvalErrorTypes } from \"utils/DynamicBindingUtils\";\nimport { extractIdentifierInfoFromCode } from \"@shared/ast\";\nimport {\n  convertPathToString,\n  getEntityNameAndPropertyPath,\n  isJSActionConfig,\n  isWidget,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\n\nimport type { WidgetEntityConfig } from \"@appsmith/entities/DataTree/types\";\nimport type {\n  ConfigTree,\n  DataTreeEntity,\n} from \"entities/DataTree/dataTreeTypes\";\nimport {\n  DEDICATED_WORKER_GLOBAL_SCOPE_IDENTIFIERS,\n  JAVASCRIPT_KEYWORDS,\n} from \"constants/WidgetValidation\";\nimport { libraryReservedIdentifiers } from \"workers/common/JSLibrary\";\n\n/** This function extracts validReferences and invalidReferences from a binding {{}}\n * @param script\n * @param allPaths\n * @returns validReferences - Valid references from bindings\n * invalidReferences- References which are currently invalid\n * @example - For binding {{unknownEntity.name + Api1.name}}, it returns\n * {\n * validReferences:[Api1.name],\n * invalidReferences: [unknownEntity.name]\n * }\n */\nexport const extractInfoFromBinding = (\n  script: string,\n  allKeys: Record<string, true>,\n) => {\n  const { references } = extractIdentifierInfoFromCode(\n    script,\n    self.evaluationVersion,\n    invalidEntityIdentifiers,\n  );\n  return getPrunedReferences(references, allKeys);\n};\n\nexport const getPrunedReferences = (\n  references: string[],\n  allKeys: Record<string, true>,\n) => {\n  const prunedReferences: Set<string> = new Set<string>();\n\n  references.forEach((reference: string) => {\n    // If the identifier exists directly, add it and return\n    if (allKeys.hasOwnProperty(reference)) {\n      prunedReferences.add(reference);\n      return;\n    }\n    const subpaths = toPath(reference);\n    let current = \"\";\n    // We want to keep going till we reach top level, but not add top level\n    // Eg: Input1.text should not depend on entire Table1 unless it explicitly asked for that.\n    // This is mainly to avoid a lot of unnecessary evals, if we feel this is wrong\n    // we can remove the length requirement, and it will still work\n    while (subpaths.length > 1) {\n      current = convertPathToString(subpaths);\n      // We've found the dep, add it and return\n      if (allKeys.hasOwnProperty(current)) {\n        prunedReferences.add(current);\n        return;\n      }\n      subpaths.pop();\n    }\n    // If no valid reference is derived, add reference as is\n    prunedReferences.add(reference);\n  });\n  return Array.from(prunedReferences);\n};\n\ninterface BindingsInfo {\n  references: string[];\n  errors: EvalError[];\n}\nexport const extractInfoFromBindings = (\n  bindings: string[],\n  allKeys: Record<string, true>,\n) => {\n  return bindings.reduce(\n    (bindingsInfo: BindingsInfo, binding) => {\n      try {\n        const references = extractInfoFromBinding(binding, allKeys);\n        return {\n          ...bindingsInfo,\n          references: union(bindingsInfo.references, references),\n        };\n      } catch (error) {\n        const newEvalError: EvalError = {\n          type: EvalErrorTypes.EXTRACT_DEPENDENCY_ERROR,\n          message: (error as Error).message,\n          context: {\n            script: binding,\n          },\n        };\n        return {\n          ...bindingsInfo,\n          errors: union(bindingsInfo.errors, [newEvalError]),\n        };\n      }\n    },\n    { references: [], errors: [] },\n  );\n};\n\n/**This function returns a unique array containing a merge of both arrays\n * @param currentArr\n * @param updateArr\n * @returns A unique array containing a merge of both arrays\n */\nexport const mergeArrays = <T>(currentArr: T[], updateArr: T[]): T[] => {\n  if (!currentArr) return updateArr;\n  return union(currentArr, updateArr);\n};\n\n/**\n * Identifiers which can not be valid names of entities and are not dynamic in nature.\n * therefore should be removed from the list of references extracted from code.\n * NB: DATA_TREE_KEYWORDS in app/client/src/constants/WidgetValidation.ts isn't included, although they are not valid entity names,\n * they can refer to potentially dynamic entities.\n * Eg. \"appsmith\"\n */\nexport const invalidEntityIdentifiers: Record<string, unknown> = {\n  ...JAVASCRIPT_KEYWORDS,\n  ...DEDICATED_WORKER_GLOBAL_SCOPE_IDENTIFIERS,\n  ...libraryReservedIdentifiers,\n};\n\nexport function isADynamicTriggerPath(\n  entity: DataTreeEntity,\n  propertyPath: string,\n  entityConfig: WidgetEntityConfig,\n) {\n  if (isWidget(entity)) {\n    const dynamicTriggerPathlist = entityConfig?.dynamicTriggerPathList;\n    const isTriggerPath = find(dynamicTriggerPathlist, { key: propertyPath });\n    if (isTriggerPath) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function isJSFunction(configTree: ConfigTree, fullPath: string) {\n  const { entityName, propertyPath } = getEntityNameAndPropertyPath(fullPath);\n  const entityConfig = configTree[entityName];\n  return (\n    isJSActionConfig(entityConfig) &&\n    propertyPath &&\n    propertyPath in entityConfig.meta\n  );\n}\nexport function convertArrayToObject(arr: string[]) {\n  return arr.reduce(\n    (acc, item) => {\n      return { ...acc, [item]: true } as const;\n    },\n    {} as Record<string, true>,\n  );\n}\n","import lodashPackageJson from \"lodash/package.json\";\nimport momentPackageJson from \"moment-timezone/package.json\";\n\nexport interface JSLibrary {\n  version?: string;\n  docsURL: string;\n  name: string;\n  accessor: string[];\n  url?: string;\n  id?: string;\n}\n\nexport const defaultLibraries: JSLibrary[] = [\n  {\n    accessor: [\"_\"],\n    version: lodashPackageJson.version,\n    docsURL: `https://lodash.com/docs/${lodashPackageJson.version}`,\n    name: \"lodash\",\n  },\n  {\n    accessor: [\"moment\"],\n    version: momentPackageJson.version,\n    docsURL: `https://momentjs.com/docs/`,\n    name: \"moment\",\n  },\n  {\n    accessor: [\"forge\"],\n    version: \"1.3.0\",\n    docsURL: \"https://github.com/digitalbazaar/forge\",\n    name: \"forge\",\n  },\n];\n\nexport const JSLibraries = [...defaultLibraries];\n\nconst JSLibraryAccessorModifier = () => {\n  let jsLibraryAccessorSet = new Set(\n    JSLibraries.flatMap((lib) => lib.accessor),\n  );\n\n  return {\n    regenerateSet: () => {\n      jsLibraryAccessorSet = new Set(\n        JSLibraries.flatMap((lib) => lib.accessor),\n      );\n\n      return;\n    },\n    getSet: () => {\n      return jsLibraryAccessorSet;\n    },\n  };\n};\n\nexport const JSLibraryAccessor = JSLibraryAccessorModifier();\n\nexport const libraryReservedIdentifiers = defaultLibraries.reduce(\n  (acc, lib) => {\n    lib.accessor.forEach((a) => (acc[a] = true));\n    return acc;\n  },\n  {} as Record<string, boolean>,\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [4701,6994,3213,4749,2359,2091], function() { return __webpack_require__(27422); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.amdO = {};","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + ({\"4701\":\"svg-icons\",\"8177\":\"remix-icons\",\"9222\":\"blueprint-icons\"}[chunkId] || chunkId) + \".\" + {\"2091\":\"0a86dc81\",\"2359\":\"778516b0\",\"3213\":\"f9cf3c48\",\"4701\":\"d88bfe91\",\"4749\":\"ab5afdbd\",\"6994\":\"3c16b70d\",\"8177\":\"ee68420e\",\"9222\":\"c4499702\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = function(module) {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: function() {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.j = 1509;","__webpack_require__.p = \"/form/\";","(function () {\n  if (typeof __webpack_require__ !== 'undefined') {\n    var oldGetScript = __webpack_require__.u;\n    var oldLoadScript = __webpack_require__.e;\n    var queryMap = {};\n    var countMap = {};\n    var getRetryDelay = function () {\n      return 3000;\n    };\n    __webpack_require__.u = function (chunkId) {\n      var result = oldGetScript(chunkId);\n      return (\n        result +\n        (queryMap.hasOwnProperty(chunkId) ? '?' + queryMap[chunkId] : '')\n      );\n    };\n    __webpack_require__.e = function (chunkId) {\n      var result = oldLoadScript(chunkId);\n      return result.catch(function (error) {\n        var retries = countMap.hasOwnProperty(chunkId) ? countMap[chunkId] : 2;\n        if (retries < 1) {\n          var realSrc = oldGetScript(chunkId);\n          error.message =\n            'Loading chunk ' +\n            chunkId +\n            ' failed after 2 retries.\\n(' +\n            realSrc +\n            ')';\n          error.request = realSrc;\n          window.location.href = '/404.html';\n          throw error;\n        }\n        return new Promise(function (resolve) {\n          var retryAttempt = 2 - retries + 1;\n          setTimeout(function () {\n            var retryAttemptString = '&retry-attempt=' + retryAttempt;\n            var cacheBust = 'cache-bust=true' + retryAttemptString;\n            queryMap[chunkId] = cacheBust;\n            countMap[chunkId] = retries - 1;\n            resolve(__webpack_require__.e(chunkId));\n          }, getRetryDelay(retryAttempt));\n        });\n      });\n    };\n  }\n})();\n","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t1509: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkappsmith\"] = self[\"webpackChunkappsmith\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","__webpack_require__.nc = undefined;","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([4701,6994,3213,4749,2359,2091].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["ECMA_VERSION","NodeTypes","isIdentifierNode","node","type","isLiteralNode","wrapCode","code","concat","getAST","options","parse","_objectSpread","ecmaVersion","isTypeOfFunction","getMemberExpressionObjectFromProperty","propertyName","evaluationVersion","arguments","length","undefined","memberExpressionObjects","Set","ast","end","start","sanitizedScript","sanitizeScript","wrappedCode","locations","simple","MemberExpression","_ref2","object","property","propName","value","name","_isNil","getStringValue","memberExpressionObjectString","generate","add","Array","from","e","isJSFunctionProperty","t","beginsWithLineBreakRegex","js","trimmedJS","replace","unescapeJS","inputValue","JSON","stringify","createMessage","format","_len","args","_key","apply","HTTP_PROTOCOL_INPUT_PLACEHOLDER","getEntityForEvalContextMap","_defineProperty","ENTITY_TYPE","entityName","entity","getJSActionForEvalContext","getEntityForEvalContext","getterMethod","addDataTreeToContext","configTree","dataTree","EVAL_CONTEXT","isTriggerBased","_args$removeEntityFun","removeEntityFunctions","dataTreeEntries","Object","entries","entityFunctionCollection","setters","_i","_dataTreeEntries","_dataTreeEntries$_i","_slicedToArray","_step","_iterator","_createForOfIteratorHelper","getEntityFunctions","s","n","done","entityFn","qualifier","func","fn","fullPath","path","set","err","f","entityConfig","entityMethodMap","_isEmpty","assign","removeEntityFunctionsFromEvalContext","addEntityFunctionsToEvalContext","evalContext","_i2","_Object$entries","_Object$entries$_i","funcObj","getAllAsyncFunctions","allAsyncFunctions","_i6","_dataTreeEntries3","_step3","_dataTreeEntries3$_i","_iterator3","setterMethods","entitiesSetterFunctions","_i3","_dataTreeEntries2","_dataTreeEntries2$_i","_i4","_Object$keys","keys","methodName","getAllSetterFunctions","_step4","_iterator4","getPlatformFunctions","_loop","_Object$entries2$_i","_Object$entries2","_i7","klona","forEach","APPSMITH_GLOBAL_FUNCTIONS","APPSMITH_NAMESPACED_FUNCTIONS","APPSMITH_INTEGRATIONS","EE_APPSMITH_NAMESPACED_FUNCTIONS","_toConsumableArray","values","setOverridingProperty","_ref","key","overridingPropertyPaths","propertyOverrideDependency","overridingPropertyKey","OverridingPropertyType","isArray","updatedOverridingProperty","defaultPropertyName","DEFAULT","push","IMMEDIATE_PARENT_REGEX","convertPathToString","Error","arrPath","string","segment","val","Number","isInteger","_isString","test","getEntityNameAndPropertyPath","indexOfFirstDot","indexOf","propertyPath","substring","isWidget","isAction","isAppsmithEntity","isJSAction","serialiseToBigInt","_","v","toString","addErrorToEntityProperty","_ref3","errors","evalProps","_getEntityNameAndProp2","fullPropertyPath","isPrivateEntityPath","getAllPrivateWidgetsInDataTree","logBlackList","_get","errorPath","EVAL_ERROR_PATH","existingErrors","_set","resetValidationErrorsForEntityProperty","_ref4","_getEntityNameAndProp3","existingErrorsExceptValidation","filter","error","errorType","PropertyEvaluationErrorType","isTrueObject","item","prototype","call","addWidgetPropertyDependencies","_ref5","widgetConfig","widgetName","dependencies","_ref6","_ref7","overriddenPropertyKey","overridingPropertyKeyMap","existingDependenciesSet","META","privateWidgets","overrideWidgetProperties","params","currentTree","evalMetaUpdates","isNewWidget","overriddenProperties","safeTree","shouldUpdateGlobalContext","configEntity","clonedValue","pathsNotToOverride","widgetPathsNotToOverride","overriddenPropertyPath","overriddenPropertyPathArray","split","includes","self","metaPropertyPath","slice","widgetId","propertyOverridingKeyMap","defaultValue","clonedDefaultValue","overwriteParsedValue","newValue","isATriggerPath","isPathDynamicTrigger","overriddenPropertyPaths","isMetaPropDirty","overriddenMetaPaths","hasOwnProperty","platformFns","entityFns","navigateTo","showAlert","showModal","closeModal","download","postWindowMessage","copyToClipboard","resetWidget","storeValue","removeValue","clearStore","isRunNClearFnQualifierEntity","actionEntity","getFnWithGuards","run","isAsyncGuard","clear","getGeoLocation","watchGeoLocation","stopWatchGeoLocation","isDynamicValue","DATA_BIND_REGEX","getDynamicStringSegments","dynamicString","stringSegments","indexOfDoubleParanStart","firstString","rest","sum","i","char","prevChar","getDynamicBindings","jsSnippets","paths","sanitisedString","trim","map","EvalErrorTypes","getEntityDynamicBindingPathList","dynamicBindingPathList","widget","dynamicTriggerPathList","_find","EVALUATION_PATH","EVAL_VALUE_PATH","getNestedEvalPath","pathType","isPopulated","_getEntityNameAndProp","nestedPath","getEvalValuePath","PropertyEvaluationErrorCategory","VALIDATION","PARSE","LINT","updateEvalTreeValueFromContext","currentEvalContext","dataTreeEvaluator","evalTree","fullPathArray","_fullPathArray","jsObjectName","variableName","JSObjectCollection","EvaluationScriptType","ScriptTemplate","EvaluationScripts","EXPRESSION","ANONYMOUS_FUNCTION","ASYNC_ANONYMOUS_FUNCTION","TRIGGERS","OBJECT_PROPERTY","topLevelWorkerAPIs","reduce","acc","ignoreGlobalObjectKeys","resetWorkerGlobalScope","jsLibraryAccessorSet","JSLibraryAccessor","DOM_APIS","has","libraryReservedIdentifiers","createEvaluationContext","_args$configTree","context","evalArguments","ARGUMENTS","THIS_CONTEXT","thisContext","globalContext","overrideContext","entitiesClonedSoFar","overrideEvalContext","getUserScriptToEvaluate","userScript","unescapedJS","script","scriptType","evalArgumentsExist","getScriptType","buffer","getScriptToEval","setEvalContext","isDataField","evaluateSync","isJSCollection","result","triggers","indirectEval","Promise","FoundPromiseInSyncEvalError","_errorModifier$run","errorModifier","source","ActionInDataFieldErrorModifier","TypeErrorModifier","errorCategory","errorMessage","rootcause","severity","Severity","raw","originalBinding","kind","category","shouldAddSetter","setter","isDisabledExpression","disabled","Function","isDisabledFn","Setters","_classCallCheck","setterMethodLookup","setterAccessorMap","_createClass","_applySetterMethod","_asyncToGenerator","_regeneratorRuntime","mark","_callee","setterMethodName","updatedProperties","parsedValue","validationPaths","validationConfig","config","_validate","isValid","messages","parsed","message","_error","wrap","_context","prev","next","abrupt","strict","validate","propPath","resolve","then","res","evalTreeWithChanges","stop","_x","_x2","_x3","_this","this","_callee2","_context2","applySetterMethod","_x4","setterMethodMap","__setters","pathToSet","createSetter","_configTreeEntries","_configTreeEntries$_i","getEntitySettersFromConfig","TernWorkerAction","server","AutocompleteDataType","GLOBAL_DEFS","$__dropdownOption__$","label","$__dropdrowOptionWithChildren__$","children","$__chartDataPoint__$","x","y","$__file__$","data","dataFormat","$__mapMarker__$","lat","long","title","description","GLOBAL_FUNCTIONS","setInterval","clearInterval","nextId","entityInformation","entityId","actionId","widgetEntity","isTriggerPath","triggerPaths","expectedType","FUNCTION","widgetType","pending","getFile","file","c","postMessage","GET_FILE","id","onmessage","INIT","plugins","scripts","importScripts","tern","async","defs","ecma","browser","lodash","base64","moment","forge","startServer","ADD_FILE","addFile","text","DELETE_FILE","delFile","REQUEST","request","body","reqData","String","DELETE_DEF","deleteDefs","ADD_DEF","addDefs","console","log","DEBUG","JAVASCRIPT_KEYWORDS","DEDICATED_WORKER_GLOBAL_SCOPE_IDENTIFIERS","defaultLibraries","accessor","version","lodashPackageJson","docsURL","momentPackageJson","JSLibraries","flatMap","lib","regenerateSet","getSet","JSLibraryAccessorModifier","a","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","__webpack_exports__","O","amdO","deferred","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","mode","ns","create","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","chunkId","all","promises","u","miniCssF","g","globalThis","window","hmd","prop","Symbol","toStringTag","nmd","p","oldGetScript","oldLoadScript","queryMap","countMap","catch","retries","realSrc","location","href","retryAttempt","setTimeout","cacheBust","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","nc"],"sourceRoot":""}