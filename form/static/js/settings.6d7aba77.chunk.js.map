{"version":3,"file":"static/js/settings.6d7aba77.chunk.js","mappings":"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","sources":["pages/AdminSettings/config/ConfigFactory.ts","ce/pages/AdminSettings/config/general.tsx","pages/AdminSettings/config/email.ts","ce/pages/AdminSettings/config/DeveloperSettings/googleMaps.ts","ce/pages/AdminSettings/config/DeveloperSettings/index.ts","pages/AdminSettings/config/version.ts","pages/AdminSettings/config/advanced.ts","ce/pages/AdminSettings/config/authentication.tsx","pages/AdminSettings/Branding/previews/PreviewBox.tsx","pages/AdminSettings/Branding/previews/AppPreview.tsx","pages/AdminSettings/Branding/previews/EmailPreview.tsx","pages/AdminSettings/Branding/previews/LoginPreview.tsx","pages/AdminSettings/Branding/previews/FaviconPreview.tsx","pages/AdminSettings/Branding/previews/NotFoundPreview.tsx","pages/AdminSettings/Branding/previews/DashboardPreview.tsx","pages/AdminSettings/Branding/previews/index.tsx","pages/AdminSettings/FormGroup/Common.tsx","pages/AdminSettings/FormGroup/ColorInput.tsx","pages/AdminSettings/FormGroup/ImageInput.tsx","pages/AdminSettings/Branding/SettingsForm.tsx","ce/pages/AdminSettings/Branding/useBrandingForm.tsx","pages/AdminSettings/Branding/BrandingPage.tsx","ce/pages/AdminSettings/config/branding.tsx","ce/pages/Upgrade/Header.tsx","ce/pages/Upgrade/Carousel.tsx","ce/pages/Upgrade/Footer.tsx","ce/pages/Upgrade/UpgradePage.tsx","ce/pages/AdminSettings/config/provisioning.ts","ce/pages/Upgrade/ProvisioningUpgradePage.tsx","ce/pages/AdminSettings/config/userlisting.ts","ce/pages/Upgrade/AccessControlUpgradePage.tsx","ce/pages/AdminSettings/config/auditlogs.ts","ce/pages/Upgrade/AuditLogsUpgradePage.tsx","ce/pages/AdminSettings/config/index.ts","ee/pages/AdminSettings/config/index.ts","pages/AdminSettings/LeftPane.tsx","ce/actions/settingsAction.ts","pages/AdminSettings/FormGroup/TextInput.tsx","pages/AdminSettings/FormGroup/Toggle.tsx","pages/AdminSettings/FormGroup/Text.tsx","pages/AdminSettings/FormGroup/Button.tsx","pages/AdminSettings/FormGroup/CopyUrlForm.tsx","pages/AdminSettings/FormGroup/Accordion.tsx","pages/AdminSettings/FormGroup/TagInputField.tsx","components/editorComponents/form/fields/DropdownWrapper.tsx","components/editorComponents/form/fields/SelectField.tsx","pages/AdminSettings/FormGroup/Dropdown.tsx","pages/AdminSettings/FormGroup/Checkbox.tsx","../node_modules/design-system-old/src/FieldError/index.tsx","pages/AdminSettings/FormGroup/Radio.tsx","pages/AdminSettings/FormGroup/group.tsx","pages/AdminSettings/RestartBanner.tsx","pages/AdminSettings/SaveSettings.tsx","pages/AdminSettings/DisconnectService.tsx","pages/AdminSettings/SettingsForm.tsx","pages/AdminSettings/Main.tsx","ee/pages/AdminSettings/WithSuperUserHoc.tsx","ce/pages/AdminSettings/WithSuperUserHoc.tsx","pages/AdminSettings/index.tsx","pages/AppViewer/BrandingBadge.tsx","../node_modules/lodash/_castFunction.js","../node_modules/lodash/forEach.js"],"sourcesContent":["import type {\n  AdminConfigType,\n  Category,\n  Setting,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { SettingTypes } from \"@appsmith/pages/AdminSettings/config/types\";\nexport class ConfigFactory {\n  static settingsMap: Record<string, Setting> = {};\n  static settings: Setting[] = [];\n  static categories: Category[] = [];\n  static wrapperCategories: Record<string, AdminConfigType> = {};\n  static savableCategories: string[] = [];\n\n  static registerSettings(config: AdminConfigType): void {\n    config?.settings?.forEach((item) => {\n      ConfigFactory.settingsMap[item.id] = {\n        ...item,\n      };\n      ConfigFactory.settings.push({\n        name: item.id,\n        ...item,\n      });\n\n      item?.advanced?.forEach((subItem) => {\n        ConfigFactory.settingsMap[subItem.id] = {\n          ...subItem,\n        };\n      });\n    });\n    config?.children?.forEach((child) => ConfigFactory.registerSettings(child));\n  }\n\n  static getCategory(config: AdminConfigType): Category {\n    if (config.controlType === SettingTypes.PAGE) {\n      ConfigFactory.wrapperCategories[config.type] = config;\n    }\n    if (config.canSave) {\n      ConfigFactory.savableCategories.push(config.type);\n    }\n\n    return {\n      icon: config.icon,\n      title: config.title,\n      slug: config.type,\n      subText: config.subText,\n      categoryType: config.categoryType,\n      isEnterprise: config.isEnterprise,\n      needsRefresh: config.needsRefresh,\n      isFeatureEnabled: config.isFeatureEnabled,\n      children: config?.children?.map((child) =>\n        ConfigFactory.getCategory(child),\n      ),\n    };\n  }\n\n  static registerCategory(config: AdminConfigType): void {\n    ConfigFactory.categories.push(ConfigFactory.getCategory(config));\n  }\n\n  static register(config: AdminConfigType) {\n    ConfigFactory.registerSettings(config);\n    ConfigFactory.registerCategory(config);\n  }\n\n  static validate(name: string, value: string) {\n    const setting = ConfigFactory.settingsMap[name];\n    if (setting?.validate) {\n      return setting.validate(value, setting);\n    }\n\n    return \"\";\n  }\n\n  static get(category: string) {\n    ConfigFactory.settings.forEach((setting) => {\n      setting.isHidden = setting.category !== category;\n    });\n\n    return ConfigFactory.settings;\n  }\n\n  static getCategoryDetails(\n    currentCategory: string,\n    currentSubCategory: string,\n  ) {\n    if (\n      currentSubCategory &&\n      ConfigFactory.wrapperCategories[currentCategory].children\n    ) {\n      return ConfigFactory.wrapperCategories[currentCategory].children?.find(\n        (category) => category.type === currentSubCategory,\n      );\n    } else {\n      return ConfigFactory.categories.find(\n        (category) => category.slug === currentCategory,\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport { isEmail } from \"utils/formhelpers\";\nimport type {\n  AdminConfigType,\n  Setting,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingSubtype,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport BrandingBadge from \"pages/AppViewer/BrandingBadge\";\nimport { TagInput } from \"design-system-old\";\nimport localStorage from \"utils/localStorage\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { AppsmithFrameAncestorsSetting } from \"pages/Applications/EmbedSnippet/Constants/constants\";\nimport { formatEmbedSettings } from \"pages/Applications/EmbedSnippet/Utils/utils\";\n\nexport const APPSMITH_INSTANCE_NAME_SETTING_SETTING: Setting = {\n  id: \"instanceName\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.TEXTINPUT,\n  controlSubType: SettingSubtype.TEXT,\n  label: \"Instance name\",\n  placeholder: \"appsmith/prod\",\n};\n\nexport const APPSMITH_ADMIN_EMAILS_SETTING: Setting = {\n  id: \"APPSMITH_ADMIN_EMAILS\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.TAGINPUT,\n  controlSubType: SettingSubtype.EMAIL,\n  label: \"Admin email\",\n  subText: \"* Emails of the users who can modify instance settings\",\n  placeholder: \"Jane@example.com\",\n  validate: (value: string) => {\n    if (\n      value &&\n      !value\n        .split(\",\")\n        .reduce((prev, curr) => prev && isEmail(curr.trim()), true)\n    ) {\n      return \"Please enter valid email id(s)\";\n    }\n  },\n};\n\nexport const APPSMITH_DISABLE_TELEMETRY_SETTING: Setting = {\n  id: \"APPSMITH_DISABLE_TELEMETRY\",\n  name: \"APPSMITH_DISABLE_TELEMETRY\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.CHECKBOX,\n  label: \"Anonymous usage data\",\n  text: \"Share anonymous usage data to help improve the product\",\n};\n\nexport const APPSMITH_HIDE_WATERMARK_SETTING: Setting = {\n  id: \"hideWatermark\",\n  name: \"hideWatermark\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.CHECKBOX,\n  label: \"Appsmith watermark\",\n  text: \"Hide Appsmith watermark\",\n  isFeatureEnabled: false,\n  isDisabled: () => true,\n  textSuffix: <BrandingBadge />,\n};\n\nexport const APPSMITH_SHOW_ROLES_AND_GROUPS_SETTING: Setting = {\n  id: \"showRolesAndGroups\",\n  name: \"showRolesAndGroups\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.CHECKBOX,\n  label: \"Programmatic access control\",\n  text: \"Access roles and user groups in code for conditional business logic\",\n  isFeatureEnabled: false,\n  isDisabled: () => true,\n};\n\nexport const APPSMITH_SINGLE_USER_PER_SESSION_SETTING: Setting = {\n  id: \"singleSessionPerUserEnabled\",\n  name: \"singleSessionPerUserEnabled\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.CHECKBOX,\n  label: \"User session limit\",\n  text: \"Limit users to a single active session\",\n  isFeatureEnabled: false,\n  isDisabled: () => true,\n};\n\nexport const APPSMITH_USER_SESSION_TIMEOUT_SETTING: Setting = {\n  id: \"userSessionTimeoutInMinutes\",\n  name: \"userSessionTimeoutInMinutes\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.TEXTINPUT,\n  label: \"Session Timeout\",\n  subText:\n    \"* Default duration is 30 days. To change, enter the new duration in DD:HH:MM format\",\n  helpText:\n    \"Users' session will automatically end if there's no activity for the specified duration, requiring them to log in again for security. The duration can be set between 1 minute and 30 days.\",\n  isFeatureEnabled: false,\n  isEnterprise: true,\n  isDisabled: () => true,\n};\n\nexport const APPSMITH_IS_ATOMIC_PUSH_ALLOWED: Setting = {\n  id: \"isAtomicPushAllowed\",\n  name: \"isAtomicPushAllowed\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.CHECKBOX,\n  label: \"Allow atomic pushes\",\n  text: \"Git operations on this tenant should attempt to perform pushes atomically\",\n};\n\nexport const APPSMITH_ALLOWED_FRAME_ANCESTORS_SETTING: Setting = {\n  id: \"APPSMITH_ALLOWED_FRAME_ANCESTORS\",\n  name: \"APPSMITH_ALLOWED_FRAME_ANCESTORS\",\n  category: SettingCategories.GENERAL,\n  controlType: SettingTypes.RADIO,\n  label: \"Embed settings\",\n  controlTypeProps: {\n    options: [\n      {\n        badge: \"Not recommended\",\n        tooltip: {\n          icon: \"question-line\",\n          text: \"Lets all domains, including malicious ones, embed your Appsmith apps. \",\n          linkText: \"Find out why it's risky\",\n          link: \"https://docs.appsmith.com/getting-started/setup/instance-configuration/frame-ancestors#why-should-i-control-this\",\n        },\n        label: \"Allow embedding everywhere\",\n        value: AppsmithFrameAncestorsSetting.ALLOW_EMBEDDING_EVERYWHERE,\n      },\n      {\n        label: \"Limit embedding to certain URLs\",\n        value: AppsmithFrameAncestorsSetting.LIMIT_EMBEDDING,\n        nodeLabel: \"You can add one or more URLs\",\n        node: <TagInput input={{}} placeholder={\"\"} type={\"text\"} />,\n        nodeInputPath: \"input\",\n        nodeParentClass: \"tag-input\",\n      },\n      {\n        label: \"Disable embedding everywhere\",\n        value: AppsmithFrameAncestorsSetting.DISABLE_EMBEDDING_EVERYWHERE,\n      },\n    ],\n  },\n  format: formatEmbedSettings,\n  parse: (value: { value: string; additionalData?: any }) => {\n    // Retrieve values from local storage while switching to limit by url option\n    const sources = isUndefined(value.additionalData)\n      ? localStorage.getItem(\"ALLOWED_FRAME_ANCESTORS\") ?? \"\"\n      : value.additionalData.replaceAll(\",\", \" \");\n    // If they are one of the other options we don't store it in storage since it will\n    // set in the env variable on save\n    if (sources !== \"*\" && sources !== \"'none'\") {\n      localStorage.setItem(\"ALLOWED_FRAME_ANCESTORS\", sources);\n    }\n\n    if (\n      value.value === AppsmithFrameAncestorsSetting.ALLOW_EMBEDDING_EVERYWHERE\n    ) {\n      return \"*\";\n    } else if (\n      value.value === AppsmithFrameAncestorsSetting.DISABLE_EMBEDDING_EVERYWHERE\n    ) {\n      return \"'none'\";\n    } else {\n      return sources;\n    }\n  },\n  validate: (value: string) => {\n    if (!value) {\n      return \"This field cannot be empty\";\n    }\n  },\n};\n\nexport const config: AdminConfigType = {\n  icon: \"settings-2-line\",\n  type: SettingCategories.GENERAL,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"General\",\n  canSave: true,\n  settings: [\n    APPSMITH_INSTANCE_NAME_SETTING_SETTING,\n    APPSMITH_ADMIN_EMAILS_SETTING,\n    APPSMITH_DISABLE_TELEMETRY_SETTING,\n    APPSMITH_HIDE_WATERMARK_SETTING,\n    APPSMITH_SHOW_ROLES_AND_GROUPS_SETTING,\n    APPSMITH_SINGLE_USER_PER_SESSION_SETTING,\n    APPSMITH_USER_SESSION_TIMEOUT_SETTING,\n    APPSMITH_IS_ATOMIC_PUSH_ALLOWED,\n    APPSMITH_ALLOWED_FRAME_ANCESTORS_SETTING,\n  ],\n} as AdminConfigType;\n","import { EMAIL_SETUP_DOC } from \"constants/ThirdPartyConstants\";\nimport { isEmail } from \"utils/formhelpers\";\nimport type { Dispatch } from \"react\";\nimport type { ReduxAction } from \"@appsmith/constants/ReduxActionConstants\";\nimport { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\nimport { isNil, omitBy } from \"lodash\";\nimport type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingSubtype,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  ADMIN_SETTINGS_EMAIL_WARNING,\n  createMessage,\n} from \"@appsmith/constants/messages\";\n\nexport const config: AdminConfigType = {\n  icon: \"mail-line\",\n  type: SettingCategories.EMAIL,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Email\",\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_MAIL_READ_MORE\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.CALLOUT,\n      label: \"How to configure?\",\n      url: EMAIL_SETUP_DOC,\n    },\n    {\n      id: \"APPSMITH_MAIL_WARNING\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.LINK,\n      calloutType: \"warning\",\n      label: createMessage(ADMIN_SETTINGS_EMAIL_WARNING),\n    },\n    {\n      id: \"APPSMITH_MAIL_HOST\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"SMTP host\",\n      placeholder: \"email-smtp.us-east-2.amazonaws.com\",\n    },\n    {\n      id: \"APPSMITH_MAIL_PORT\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.NUMBER,\n      placeholder: \"25\",\n      label: \"SMTP port\",\n      validate: (value: string) => {\n        const port = parseInt(value);\n        if (value && (port < 0 || port > 65535)) {\n          return \"Please enter a valid port\";\n        }\n      },\n    },\n    {\n      id: \"APPSMITH_MAIL_FROM\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"From address\",\n      placeholder: \"admin@appsmith.com\",\n      validate: (value: string) => {\n        if (value && !isEmail(value)) {\n          return \"Please enter a valid email id\";\n        }\n      },\n      subText:\n        \"* You will need to verify your from email address to begin sending emails\",\n    },\n    {\n      id: \"APPSMITH_REPLY_TO\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Reply-to address\",\n      placeholder: \"admin@appsmith.com\",\n      validate: (value: string) => {\n        if (value && !isEmail(value)) {\n          return \"Please enter a valid email id\";\n        }\n      },\n      subText:\n        \"* You will need to verify your to email address to begin receiving emails\",\n    },\n    {\n      id: \"APPSMITH_MAIL_SMTP_TLS_ENABLED\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TOGGLE,\n      label: \"TLS protected connection\",\n    },\n    {\n      id: \"APPSMITH_MAIL_USERNAME\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"SMTP username\",\n    },\n    {\n      id: \"APPSMITH_MAIL_PASSWORD\",\n      category: SettingCategories.EMAIL,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.PASSWORD,\n      label: \"SMTP password\",\n    },\n    {\n      id: \"APPSMITH_MAIL_TEST_EMAIL\",\n      category: SettingCategories.EMAIL,\n      action: (dispatch: Dispatch<ReduxAction<any>>, settings: any = {}) => {\n        dispatch &&\n          dispatch({\n            type: ReduxActionTypes.SEND_TEST_EMAIL,\n            payload: omitBy(\n              {\n                smtpHost: settings[\"APPSMITH_MAIL_HOST\"],\n                smtpPort: settings[\"APPSMITH_MAIL_PORT\"],\n                fromEmail: settings[\"APPSMITH_MAIL_FROM\"],\n                starttlsEnabled:\n                  settings[\"APPSMITH_MAIL_SMTP_TLS_ENABLED\"] || false,\n                username: settings[\"APPSMITH_MAIL_USERNAME\"],\n                password: settings[\"APPSMITH_MAIL_PASSWORD\"],\n              },\n              isNil,\n            ),\n          });\n      },\n      controlType: SettingTypes.BUTTON,\n      isDisabled: (settings?: Record<string, any>) => {\n        return (\n          !settings ||\n          !settings[\"APPSMITH_MAIL_HOST\"] ||\n          !settings[\"APPSMITH_MAIL_FROM\"]\n        );\n      },\n      text: \"Send test email\",\n    },\n  ],\n};\n","import { GOOGLE_MAPS_SETUP_DOC } from \"constants/ThirdPartyConstants\";\nimport type { Setting } from \"../types\";\nimport {\n  SettingCategories,\n  SettingSubtype,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\n\nexport const googleMapsConfig: Setting[] = [\n  {\n    id: \"APPSMITH_GOOGLE_MAPS_READ_MORE\",\n    category: SettingCategories.DEVELOPER_SETTINGS,\n    controlType: SettingTypes.CALLOUT,\n    label: \"How to configure google maps?\",\n    url: GOOGLE_MAPS_SETUP_DOC,\n  },\n  {\n    id: \"googleMapsKey\",\n    category: SettingCategories.DEVELOPER_SETTINGS,\n    controlType: SettingTypes.TEXTINPUT,\n    controlSubType: SettingSubtype.TEXT,\n    label: \"Google Maps API key\",\n  },\n];\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { googleMapsConfig } from \"./googleMaps\";\n\nexport const config: AdminConfigType = {\n  icon: \"snippet\",\n  type: SettingCategories.DEVELOPER_SETTINGS,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Developer settings\",\n  canSave: true,\n  settings: [...googleMapsConfig],\n};\n","import type { Dispatch } from \"react\";\nimport type { ReduxAction } from \"@appsmith/constants/ReduxActionConstants\";\nimport { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\nimport type {\n  AdminConfigType,\n  Setting,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { isAirgapped } from \"@appsmith/utils/airgapHelpers\";\n\nconst isAirgappedInstance = isAirgapped();\n\nexport const config: AdminConfigType = {\n  icon: \"timer-2-line\",\n  type: SettingCategories.VERSION,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Version\",\n  canSave: false,\n  settings: [\n    {\n      id: \"APPSMITH_CURRENT_VERSION\",\n      category: SettingCategories.VERSION,\n      controlType: SettingTypes.TEXT,\n      label: \"Current version\",\n    },\n    {\n      id: \"APPSMITH_VERSION_READ_MORE\",\n      action: (dispatch?: Dispatch<ReduxAction<boolean>>) => {\n        dispatch &&\n          dispatch({\n            type: ReduxActionTypes.TOGGLE_RELEASE_NOTES,\n            payload: true,\n          });\n      },\n      category: SettingCategories.VERSION,\n      controlType: SettingTypes.CALLOUT,\n      label: \"Release notes\",\n    },\n  ].filter((setting) =>\n    isAirgappedInstance ? setting.id !== \"APPSMITH_VERSION_READ_MORE\" : true,\n  ) as Setting[],\n};\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingSubtype,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\n\nexport const config: AdminConfigType = {\n  icon: \"settings-line\",\n  type: SettingCategories.ADVANCED,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Advanced\",\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_DB_URL\",\n      category: SettingCategories.ADVANCED,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"MongoDB URI\",\n      subText:\n        \"* Appsmith internally uses MongoDB. Change to an external MongoDB for clustering\",\n    },\n    {\n      id: \"APPSMITH_REDIS_URL\",\n      category: SettingCategories.ADVANCED,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Redis URL\",\n      subText:\n        \"* Appsmith internally uses Redis for session storage. Change this to an external redis for clustering\",\n    },\n    {\n      id: \"APPSMITH_CUSTOM_DOMAIN\",\n      category: SettingCategories.ADVANCED,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Custom domain\",\n      subText: \"* Custom domain for your Appsmith instance\",\n    },\n  ],\n};\n","import React from \"react\";\nimport {\n  EMAIL_SETUP_DOC,\n  GITHUB_SIGNUP_SETUP_DOC,\n  GOOGLE_SIGNUP_SETUP_DOC,\nSAPCDC_AUTH_SETUP_DOC\n} from \"constants/ThirdPartyConstants\";\nimport type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingSubtype,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport type { AuthMethodType } from \"pages/AdminSettings/Authentication/AuthPage\";\nimport { AuthPage } from \"pages/AdminSettings/Authentication/AuthPage\";\nimport Google from \"assets/images/Google.png\";\nimport SamlSso from \"assets/images/saml.svg\";\nimport OIDC from \"assets/images/oidc.svg\";\nimport Github from \"assets/images/Github.png\";\nimport Lock from \"assets/images/lock-password-line.svg\";\nimport Sapcdc from \"assets/images/SAPCDC.png\";\nimport { useSelector } from \"react-redux\";\nimport {\n  getThirdPartyAuths,\n  getIsFormLoginEnabled,\n} from \"@appsmith/selectors/tenantSelectors\";\nimport {\n  FORM_LOGIN_DESC,\n  GITHUB_AUTH_DESC,\n  GOOGLE_AUTH_DESC,\n  OIDC_AUTH_DESC,\n  SAML_AUTH_DESC,\n  createMessage,\n  SAPCDC_AUTH_DESC\n} from \"@appsmith/constants/messages\";\nimport { isSAMLEnabled, isOIDCEnabled } from \"@appsmith/utils/planHelpers\";\nimport { selectFeatureFlags } from \"@appsmith/selectors/featureFlagsSelectors\";\nimport store from \"store\";\nconst featureFlags = selectFeatureFlags(store.getState());\nimport { getAppsmithConfigs } from \"@appsmith/configs\";\nconst { mailEnabled } = getAppsmithConfigs();\n\nconst FormAuth: AdminConfigType = {\n  type: SettingCategories.FORM_AUTH,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Form login\",\n  subText: createMessage(FORM_LOGIN_DESC),\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_FORM_LOGIN_DISABLED\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.TOGGLE,\n      label: \"form login\",\n    },\n    {\n      id: \"APPSMITH_SIGNUP_DISABLED\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.TOGGLE,\n      label: \"Form signup\",\n      toggleText: (value: boolean) =>\n        value\n          ? \"Allow only invited users to signup\"\n          : \"Allow all users to signup\",\n    },\n    {\n      id: \"emailVerificationEnabled\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.TOGGLE,\n      label: \"email verification\",\n      isDisabled: (settings) => {\n        // Disabled when mail is not enabled, unless setting already enabled then enabled\n        if (!settings) {\n          return true;\n        }\n        if (settings.emailVerificationEnabled) {\n          return false;\n        }\n        return !mailEnabled;\n      },\n    },\n    {\n      id: \"APPSMITH_FORM_DISABLED_BANNER\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.LINK,\n      label:\n        \"To enable email verification for form login, you must enable SMTP server from email settings\",\n      url: EMAIL_SETUP_DOC,\n      calloutType: \"warning\",\n      isVisible: (settings) => {\n        // Visible when mail is disabled, unless setting already enabled then visible\n        if (!settings) {\n          return false;\n        }\n        if (settings.emailVerificationEnabled) {\n          return false;\n        }\n        return !mailEnabled;\n      },\n    },\n    {\n      id: \"APPSMITH_FORM_CALLOUT_BANNER\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.CALLOUT,\n      label:\n        \"Please ensure that your SMTP settings are correctly configured to ensure that the verification emails can be delivered\",\n      calloutType: \"warning\",\n      isVisible: (settings) => {\n        // Visible when mail is enabled and setting is true\n        if (!settings) {\n          return false;\n        }\n        return settings.emailVerificationEnabled && mailEnabled;\n      },\n    },\n    {\n      id: \"APPSMITH_FORM_ERROR_BANNER\",\n      category: SettingCategories.FORM_AUTH,\n      controlType: SettingTypes.LINK,\n      label:\n        \"Valid SMTP settings not found. Signup with email verification will not work without SMTP configuration\",\n      calloutType: \"error\",\n      isVisible: (settings) => {\n        // Visible when mail is disabled but settings is true\n        if (!settings) {\n          return false;\n        }\n        if (!mailEnabled && settings.emailVerificationEnabled) {\n          return true;\n        }\n        return false;\n      },\n    },\n  ],\n};\n\nexport const SapcdcAuth: AdminConfigType = {\n  type: SettingCategories.SAPCDC_AUTH,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"SAP CDC authentication\",\n  subText: createMessage(SAPCDC_AUTH_DESC),\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_SAPCDC_READ_MORE\",\n      category: SettingCategories.SAPCDC_AUTH,\n      controlType: SettingTypes.CALLOUT,\n      label: \"How to configure?\",\n      url: SAPCDC_AUTH_SETUP_DOC,\n    },\n    {\n      id: \"APPSMITH_SAPCDC_HOMEPAGE_URL\",\n      category: SettingCategories.SAPCDC_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"Homepage URL\",\n      fieldName: \"homepage-url-form\",\n      value: \"\", \n      tooltip:\n        \"This URL will be used while configuring the SAP CDC OAuth Client ID's homepage URL\",\n      helpText: \"Paste this URL in your SAP CDC developer settings.\",\n    },\n    {\n      id: \"APPSMITH_SAPCDC_REDIRECT_URL\",\n      category: SettingCategories.SAPCDC_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"Redirect URL\",\n      fieldName: \"redirect-url-form\",\n      value: \"https://dev.appsmith.com/user/login/callback\",\n      tooltip:\n        \"This URL will be used while configuring the SAP CDC OAuth Client ID's authorized redirect URIs\",\n      helpText: \"Paste this URL in your SAP CDC developer settings.\",\n    },\n    {\n      id: \"APPSMITH_SAPCDC_CLIENT_ID\",\n      category: SettingCategories.SAPCDC_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"SAP CDC Client ID\",\n      isRequired: true,\n    },\n    {\n      id: \"APPSMITH_SAPCDC_CLIENT_SECRET\",\n      category: SettingCategories.SAPCDC_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"SAP CDC Client Secret\",\n      isRequired: true,\n    },\n  ],\n};\n\nexport const GoogleAuth: AdminConfigType = {\n  type: SettingCategories.GOOGLE_AUTH,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"Google authentication\",\n  subText: createMessage(GOOGLE_AUTH_DESC),\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_OAUTH2_GOOGLE_READ_MORE\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.CALLOUT,\n      label: \"How to configure?\",\n      url: GOOGLE_SIGNUP_SETUP_DOC,\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GOOGLE_JS_ORIGIN_URL\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"JavaScript origin URL\",\n      fieldName: \"js-origin-url-form\",\n      value: \"\",\n      tooltip:\n        \"This URL will be used while configuring the Google OAuth Client ID's authorized JavaScript origins\",\n      helpText: \"Paste this URL in your Google developer console.\",\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GOOGLE_REDIRECT_URL\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"Redirect URL\",\n      fieldName: \"redirect-url-form\",\n      value: \"/login/oauth2/code/google\",\n      tooltip:\n        \"This URL will be used while configuring the Google OAuth Client ID's authorized redirect URIs\",\n      helpText: \"Paste this URL in your Google developer console.\",\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GOOGLE_CLIENT_ID\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Client ID\",\n      isRequired: true,\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Client secret\",\n      isRequired: true,\n    },\n    {\n      id: \"APPSMITH_SIGNUP_ALLOWED_DOMAINS\",\n      category: SettingCategories.GOOGLE_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Allowed domains\",\n      placeholder: \"domain1.com, domain2.com\",\n    },\n  ],\n};\n\nexport const GithubAuth: AdminConfigType = {\n  type: SettingCategories.GITHUB_AUTH,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.GROUP,\n  title: \"GitHub authentication\",\n  subText: createMessage(GITHUB_AUTH_DESC),\n  canSave: true,\n  settings: [\n    {\n      id: \"APPSMITH_OAUTH2_GITHUB_READ_MORE\",\n      category: SettingCategories.GITHUB_AUTH,\n      controlType: SettingTypes.CALLOUT,\n      label: \"How to configure?\",\n      url: GITHUB_SIGNUP_SETUP_DOC,\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GITHUB_HOMEPAGE_URL\",\n      category: SettingCategories.GITHUB_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"Homepage URL\",\n      fieldName: \"homepage-url-form\",\n      value: \"\",\n      tooltip:\n        \"This URL will be used while configuring the GitHub OAuth Client ID's homepage URL\",\n      helpText: \"Paste this URL in your GitHub developer settings.\",\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GITHUB_REDIRECT_URL\",\n      category: SettingCategories.GITHUB_AUTH,\n      controlType: SettingTypes.UNEDITABLEFIELD,\n      label: \"Redirect URL\",\n      fieldName: \"callback-url-form\",\n      value: \"/login/oauth2/code/github\",\n      tooltip:\n        \"This URL will be used while configuring the GitHub OAuth Client ID's Authorization callback URL\",\n      helpText: \"Paste this URL in your GitHub developer settings.\",\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GITHUB_CLIENT_ID\",\n      category: SettingCategories.GITHUB_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Client ID\",\n      isRequired: true,\n    },\n    {\n      id: \"APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET\",\n      category: SettingCategories.GITHUB_AUTH,\n      controlType: SettingTypes.TEXTINPUT,\n      controlSubType: SettingSubtype.TEXT,\n      label: \"Client secret\",\n      isRequired: true,\n    },\n  ],\n};\n\nexport const FormAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_FORM_LOGIN_AUTH\",\n  category: SettingCategories.FORM_AUTH,\n  label: \"Form login\",\n  subText: createMessage(FORM_LOGIN_DESC),\n  image: Lock,\n  icon: \"lock-password-line\",\n  isFeatureEnabled: true,\n};\n\nexport const SapcdcAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_SAPCDC_AUTH\",\n  category: SettingCategories.SAPCDC_AUTH,\n  label: \"SAP CDC\",\n  subText: createMessage(SAPCDC_AUTH_DESC),\n  image: Sapcdc,\n  isFeatureEnabled: true,\n};\n\nexport const GoogleAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_GOOGLE_AUTH\",\n  category: SettingCategories.GOOGLE_AUTH,\n  label: \"Google\",\n  subText: createMessage(GOOGLE_AUTH_DESC),\n  image: Google,\n  isFeatureEnabled: true,\n};\n\nexport const GithubAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_GITHUB_AUTH\",\n  category: SettingCategories.GITHUB_AUTH,\n  label: \"GitHub\",\n  subText: createMessage(GITHUB_AUTH_DESC),\n  image: Github,\n  isFeatureEnabled: true,\n};\n\nexport const SamlAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_SAML_AUTH\",\n  category: SettingCategories.SAML_AUTH,\n  label: \"SAML 2.0\",\n  subText: createMessage(SAML_AUTH_DESC),\n  image: SamlSso,\n  isFeatureEnabled: isSAMLEnabled(featureFlags),\n};\n\nexport const OidcAuthCallout: AuthMethodType = {\n  id: \"APPSMITH_OIDC_AUTH\",\n  category: SettingCategories.OIDC_AUTH,\n  label: \"OIDC\",\n  subText: createMessage(OIDC_AUTH_DESC),\n  image: OIDC,\n  isFeatureEnabled: isOIDCEnabled(featureFlags),\n};\n\nconst AuthMethods = [\n  OidcAuthCallout,\n  SamlAuthCallout,\n  GoogleAuthCallout,\n  GithubAuthCallout,\n  FormAuthCallout,\n  SapcdcAuthCallout\n];\n\nfunction AuthMain() {\n  FormAuthCallout.isConnected = useSelector(getIsFormLoginEnabled);\n  const socialLoginList = useSelector(getThirdPartyAuths);\n  GoogleAuth.isConnected = GoogleAuthCallout.isConnected =\n    socialLoginList.includes(\"google\");\n  GithubAuth.isConnected = GithubAuthCallout.isConnected =\n    socialLoginList.includes(\"github\");\n  SapcdcAuth.isConnected = SapcdcAuthCallout.isConnected =\n    socialLoginList.includes(\"sapcdc\");\n    console.log('socialLoginList---', socialLoginList); \n  console.log('Is SAPCDC included?', socialLoginList.includes(\"sapcdc\")); \n\n\n  return <AuthPage authMethods={AuthMethods} />;\n}\n\nexport const config: AdminConfigType = {\n  icon: \"lock-password-line\",\n  type: SettingCategories.AUTHENTICATION,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.PAGE,\n  title: \"Authentication\",\n  canSave: false,\n  children: [FormAuth, GoogleAuth, GithubAuth, SapcdcAuth],\n  component: AuthMain,\n};\n","import React from \"react\";\nimport { ContentBox } from \"pages/AdminSettings/components\";\nimport { Text } from \"design-system\";\n\ninterface PreviewBoxProps {\n  title?: string;\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst PreviewBox = (props: PreviewBoxProps) => {\n  const { children, className, title, ...rest } = props;\n\n  return (\n    <div className=\"flex flex-col\">\n      <ContentBox\n        className={`flex justify-center h-full border mb-1 relative ${\n          className ?? \"\"\n        }`}\n        {...rest}\n      >\n        {children}\n      </ContentBox>\n      {title && <Text renderAs=\"p\">{title}</Text>}\n    </div>\n  );\n};\n\nexport default PreviewBox;\n","import { ContentBox } from \"pages/AdminSettings/components\";\nimport React from \"react\";\n\nimport type { PreviewsProps } from \".\";\nimport PreviewBox from \"./PreviewBox\";\nimport { Icon } from \"design-system\";\n\nconst AppPreview = (props: PreviewsProps) => {\n  const { logo, shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-center p-4\"\n      style={{\n        backgroundColor: shades?.background,\n      }}\n      title=\"App\"\n    >\n      <div className=\"w-full h-full bg-white\">\n        <div className=\"flex flex-col\">\n          <ContentBox className=\"flex items-center gap-1 px-3 py-2  border-b rounded-none\">\n            <Icon className=\"p-1\" name=\"apps-line\" size=\"md\" />\n            <img\n              alt=\"Branding Logo\"\n              className=\"block h-4 t--branding-logo\"\n              src={logo as string}\n            />\n          </ContentBox>\n        </div>\n      </div>\n    </PreviewBox>\n  );\n};\n\nexport default AppPreview;\n","import React from \"react\";\nimport { Text } from \"design-system\";\nimport type { PreviewsProps } from \".\";\nimport PreviewBox from \"./PreviewBox\";\nimport { ContentBox } from \"pages/AdminSettings/components\";\n\nconst EmailPreview = (props: PreviewsProps) => {\n  const { logo, shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-end\"\n      style={{\n        backgroundColor: shades.background,\n      }}\n      title=\"E-mail\"\n    >\n      <ContentBox className=\"w-7/12 bg-white border-l border-r border-t b h-4/5\">\n        <div className=\"flex flex-col gap-3 pt-6 px-9\">\n          <img\n            alt=\"Branding Logo\"\n            className=\"block h-4 m-auto t--branding-logo\"\n            src={logo as string}\n          />\n          <Text\n            color=\"var(--ads-v2-color-fg)\"\n            renderAs=\"p\"\n            style={{\n              fontSize: \"8px\",\n            }}\n          >\n            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nostrum\n            quas quos cumque sit hic unde deserunt\n          </Text>\n          <ContentBox\n            className=\"flex items-center justify-center h-4 mt-2 t--branding-bg\"\n            style={{\n              backgroundColor: shades.primary,\n            }}\n          />\n        </div>\n      </ContentBox>\n    </PreviewBox>\n  );\n};\n\nexport default EmailPreview;\n","import { ContentBox } from \"pages/AdminSettings/components\";\nimport React from \"react\";\n\nimport type { PreviewsProps } from \".\";\nimport PreviewBox from \"./PreviewBox\";\n\nconst LoginPreview = (props: PreviewsProps) => {\n  const { logo, shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-end\"\n      style={{\n        backgroundColor: shades?.background,\n      }}\n      title=\"Login screen\"\n    >\n      <ContentBox className=\"w-7/12 bg-white border-l border-r border-t h-4/5\">\n        <div className=\"flex flex-col gap-3 pt-6 px-9\">\n          <img\n            alt=\"Logo\"\n            className=\"block h-4 m-auto t--branding-logo\"\n            src={logo as string}\n          />\n          <ContentBox className=\"h-4 border\" />\n          <ContentBox className=\"h-4 border\" />\n          <ContentBox\n            className=\"flex items-center justify-center h-4 mt-2 t--branding-bg\"\n            style={{\n              backgroundColor: shades?.primary,\n            }}\n          />\n        </div>\n      </ContentBox>\n    </PreviewBox>\n  );\n};\n\nexport default LoginPreview;\n","import React from \"react\";\nimport PreviewBox from \"./PreviewBox\";\nimport { Icon, Text } from \"design-system\";\nimport type { PreviewsProps } from \".\";\nimport { ContentBox } from \"pages/AdminSettings/components\";\n\nconst FaviconPreview = (props: PreviewsProps) => {\n  const { favicon, shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-center p-4\"\n      style={{\n        backgroundColor: shades?.background,\n      }}\n      title=\"Browser tab\"\n    >\n      <ContentBox className=\"w-full h-full border bg-white\">\n        <div\n          className=\"flex items-center gap-2 px-4 pt-2\"\n          style={{\n            backgroundColor: \"var(--ads-v2-color-bg-muted)\",\n          }}\n        >\n          <div className=\"flex items-center gap-2 px-3 py-2 bg-white w-fit\">\n            <img\n              alt=\"Branding Logo\"\n              className=\"w-3 h-3 t--branding-favicon\"\n              src={favicon}\n            />\n            <Text kind=\"body-s\" renderAs=\"span\">\n              Application name\n            </Text>\n          </div>\n          <Icon name=\"add-line\" size=\"md\" />\n        </div>\n        <ContentBox className=\"p-3 border-b h-11\">\n          <div\n            className=\"w-full h-full\"\n            style={{\n              backgroundColor: \"var(--ads-v2-color-bg-muted)\",\n            }}\n          />\n        </ContentBox>\n      </ContentBox>\n    </PreviewBox>\n  );\n};\n\nexport default FaviconPreview;\n","import React from \"react\";\nimport { Text } from \"design-system\";\nimport PreviewBox from \"./PreviewBox\";\nimport type { PreviewsProps } from \".\";\nimport { ContentBox } from \"pages/AdminSettings/components\";\n\nconst NotFoundPreview = (props: PreviewsProps) => {\n  const { shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-end\"\n      style={{\n        backgroundColor: shades?.background,\n      }}\n      title=\"404 page\"\n    >\n      <ContentBox className=\"flex flex-col items-center justify-center bg-white border-t border-l border-r w-7/12 h-4/5\">\n        <div className=\"flex items-center justify-center h-8 font-semibold\">\n          <Text\n            kind=\"heading-s\"\n            renderAs=\"p\"\n            style={{\n              color: shades.primary,\n            }}\n          >\n            404\n          </Text>\n        </div>\n        <ContentBox\n          className=\"h-3 mt-1 w-10 t--branding-bg\"\n          style={{\n            backgroundColor: shades.primary,\n          }}\n        />\n      </ContentBox>\n    </PreviewBox>\n  );\n};\n\nexport default NotFoundPreview;\n","import { ContentBox } from \"pages/AdminSettings/components\";\nimport React from \"react\";\n\nimport type { PreviewsProps } from \".\";\nimport PreviewBox from \"./PreviewBox\";\n\nconst DashboardPreview = (props: PreviewsProps) => {\n  const { logo, shades } = props;\n\n  return (\n    <PreviewBox\n      className=\"items-center p-4\"\n      style={{\n        backgroundColor: shades?.background,\n      }}\n      title=\"Home\"\n    >\n      <div className=\"w-full h-full bg-white\">\n        <div className=\"flex flex-col\">\n          <ContentBox className=\"px-3 py-2 border-b rounded-none\">\n            <img\n              alt=\"Branding Logo\"\n              className=\"block h-4 t--branding-logo\"\n              src={logo as string}\n            />\n          </ContentBox>\n          <main className=\"flex items-center justify-end gap-2 px-3\">\n            <ContentBox className=\"h-3 border mt-2 w-7\" />\n            <ContentBox\n              className=\"h-3 mt-2 w-7 t--branding-bg\"\n              style={{\n                backgroundColor: shades.primary,\n              }}\n            />\n          </main>\n        </div>\n      </div>\n    </PreviewBox>\n  );\n};\n\nexport default DashboardPreview;\n","import React, { useEffect, useState } from \"react\";\n\nimport AppPreview from \"./AppPreview\";\nimport EmailPreview from \"./EmailPreview\";\nimport LoginPreview from \"./LoginPreview\";\nimport FaviconPreview from \"./FaviconPreview\";\nimport NotFoundPreview from \"./NotFoundPreview\";\nimport DashboardPreview from \"./DashboardPreview\";\nimport type { brandColorsKeys } from \"../BrandingPage\";\nimport { ContentBox } from \"pages/AdminSettings/components\";\n\nexport interface PreviewsProps {\n  shades: Record<brandColorsKeys, string>;\n  logo: string | Blob;\n  favicon: string;\n}\n\nconst Previews = (props: PreviewsProps) => {\n  const { favicon, logo } = props;\n\n  const [logoPreview, setLogoPreview] = useState<any>(null);\n  const [faviconPreview, setFaviconPreview] = useState<any>(null);\n\n  useEffect(() => {\n    if (!logo) return;\n\n    if (typeof logo === \"string\") {\n      setLogoPreview(logo);\n\n      return;\n    }\n\n    if (typeof logo !== \"string\") {\n      const reader = new FileReader();\n      reader.readAsDataURL(logo);\n\n      reader.onloadend = function () {\n        setLogoPreview(reader.result);\n      };\n    }\n  }, [logo]);\n\n  useEffect(() => {\n    if (!favicon) return;\n\n    if (typeof favicon === \"string\") {\n      setFaviconPreview(favicon);\n\n      return;\n    }\n\n    if (typeof favicon !== \"string\") {\n      const reader = new FileReader();\n      reader.readAsDataURL(favicon);\n\n      reader.onloadend = function () {\n        setFaviconPreview(reader.result);\n      };\n    }\n  }, [favicon]);\n\n  return (\n    <ContentBox className=\"grid grid-cols-[repeat(auto-fit,_minmax(300px,_1fr))] gap-8 auto-rows-[240px] border p-8 mb-4 pointer-events-none select-none\">\n      {/* login */}\n      <LoginPreview {...props} logo={logoPreview} />\n      <EmailPreview {...props} logo={logoPreview} />\n      <DashboardPreview {...props} logo={logoPreview} />\n      <AppPreview {...props} logo={logoPreview} />\n      <NotFoundPreview {...props} logo={logoPreview} />\n      <FaviconPreview {...props} favicon={faviconPreview} logo={logoPreview} />\n    </ContentBox>\n  );\n};\n\nexport default Previews;\n","import { createMessage } from \"@appsmith/constants/messages\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Icon, Tooltip, Text } from \"design-system\";\nimport type { Setting } from \"@appsmith/pages/AdminSettings/config/types\";\nimport EnterpriseTag from \"components/EnterpriseTag\";\nimport BusinessTag from \"components/BusinessTag\";\n\ninterface FieldHelperProps {\n  setting: Setting;\n  children: React.ReactNode;\n  className?: string;\n  isToggle?: boolean;\n}\n\nexport const StyledFormGroup = styled.div`\n  width: 40rem;\n  margin-bottom: ${(props) => props.theme.spaces[7]}px;\n  &.t--admin-settings-dropdown {\n    div {\n      width: 100%;\n    }\n  }\n`;\n\nexport const StyledLabel = styled.div`\n  margin-bottom: 4px;\n  display: flex;\n  align-items: center;\n  gap: var(--ads-v2-spaces-3);\n\n  .admin-settings-form-group-label {\n    font-weight: var(--ads-v2-h5-font-weight);\n  }\n\n  .help-icon {\n    cursor: pointer;\n  }\n`;\n\nexport const StyledSubtext = styled(Text)`\n  font-size: 12px;\n  color: var(--ads-v2-color-fg-muted);\n  margin-top: 4px;\n`;\n\nexport const StyledAsterisk = styled(Text)`\n  color: var(--ads-v2-color-fg-error);\n  margin-left: 2px;\n  font-weight: 500;\n`;\n\nexport function FormGroup({ children, className, setting }: FieldHelperProps) {\n  return (\n    <StyledFormGroup\n      className={`${className}`}\n      data-testid=\"admin-settings-form-group\"\n    >\n      <StyledLabel className=\"styled-label\">\n        {setting.label && (\n          <Text\n            className=\"admin-settings-form-group-label\"\n            color=\"var(--ads-v2-color-fg)\"\n            data-testid=\"admin-settings-form-group-label\"\n            kind=\"body-m\"\n            renderAs=\"label\"\n          >\n            {setting.label || \"\"}\n            {setting.isRequired && (\n              <StyledAsterisk renderAs=\"span\">*</StyledAsterisk>\n            )}\n          </Text>\n        )}\n        {setting.helpText && (\n          <Tooltip content={createMessage(() => setting.helpText || \"\")}>\n            <Icon\n              className={\"help-icon\"}\n              color=\"var(--ads-v2-color-fg)\"\n              data-testid=\"admin-settings-form-group-helptext\"\n              name=\"question-line\"\n              size=\"md\"\n            />\n          </Tooltip>\n        )}\n        {setting.isFeatureEnabled === false &&\n          (setting.isEnterprise === true ? <EnterpriseTag /> : <BusinessTag />)}\n      </StyledLabel>\n      {children}\n      {setting.subText && (\n        <StyledSubtext\n          data-testid=\"admin-settings-form-group-subtext\"\n          renderAs=\"p\"\n        >\n          {createMessage(() => setting.subText || \"\")}\n        </StyledSubtext>\n      )}\n    </StyledFormGroup>\n  );\n}\n\nexport interface SettingComponentProps {\n  setting: Setting;\n}\n","import React, { memo, useRef, useCallback, useState } from \"react\";\nimport type { WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { Field } from \"redux-form\";\nimport { startCase } from \"lodash\";\nimport tinycolor from \"tinycolor2\";\nimport styled from \"styled-components\";\nimport { Icon, Text, Tooltip } from \"design-system\";\nimport { InputGroup, Classes } from \"@blueprintjs/core\";\nimport Color from \"colorjs.io\";\n\nimport type { SettingComponentProps } from \"./Common\";\nimport { FormGroup } from \"./Common\";\nimport type { FormTextFieldProps } from \"components/utils/ReduxFormTextField\";\nimport { createBrandColorsFromPrimaryColor } from \"utils/BrandingUtils\";\nimport type { brandColorsKeys } from \"../Branding/BrandingPage\";\nimport { ContentBox } from \"../components\";\n\nexport const StyledInputGroup = styled(InputGroup)`\n  .${Classes.INPUT} {\n    box-shadow: none;\n    border-radius: var(--ads-v2-border-radius);\n    &:focus {\n      box-shadow: none;\n    }\n  }\n  input[type=\"color\"]::-webkit-color-swatch {\n    border: none;\n    border-radius: 50%;\n    padding: 0;\n  }\n  input[type=\"color\"]::-webkit-color-swatch-wrapper {\n    border: none;\n    border-radius: 50%;\n    padding: 0;\n  }\n  &&& input {\n    padding-left: 36px;\n    height: 36px;\n    border: 1px solid var(--ads-v2-color-border);\n    background: var(--ads-v2-color-bg);\n    color: var(--ads-v2-color-fg);\n    &:focus {\n      border: 1px solid var(--ads-v2-color-border-emphasis-plus);\n    }\n  }\n`;\n\nconst StyledColorInputIcon = styled.input`\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  bottom: 0;\n  width: 20px;\n  height: 20px !important;\n  padding-left: 0 !important;\n  border: red;\n  z-index: 1;\n  display: flex;\n  border: 1px solid var(--ads-v2-color-border);\n  border-radius: 100%;\n  &::-webkit-color-swatch {\n    border-radius: 15px;\n    border: none;\n  }\n  &::-moz-color-swatch {\n    border-radius: 15px;\n    border: none;\n  }\n`;\n\nconst StyledText = styled(Text)`\n  font-weight: 500;\n`;\n\ninterface ColorInputProps {\n  value: Record<brandColorsKeys, string>;\n  onChange?: (value: any) => void;\n  className?: string;\n  tooltips?: Record<brandColorsKeys, string>;\n  filter?: (key: brandColorsKeys) => boolean;\n  defaultValue?: Record<brandColorsKeys, string>;\n  logEvent?: (property: string) => void;\n}\n\nconst LeftIcon = (\n  props: Omit<ColorInputProps, \"value\"> & { value: string },\n) => {\n  const { onChange, value } = props;\n  return (\n    <StyledColorInputIcon onChange={onChange} type=\"color\" value={value} />\n  );\n};\n\nexport const ColorInput = (props: ColorInputProps) => {\n  const [selectedIndex, setSelectedIndex] =\n    useState<brandColorsKeys>(\"primary\");\n  const {\n    className,\n    filter = () => true,\n    logEvent,\n    onChange,\n    tooltips,\n    value,\n  } = props;\n  const colorInputRef = useRef<HTMLInputElement>(null);\n\n  const onColorInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let shades = value;\n\n      shades[selectedIndex] = e.target.value;\n\n      logEvent && logEvent(selectedIndex);\n      let color = undefined;\n      try {\n        color = Color.parse(e.target.value);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n      // if user is touching the primary color\n      // then we need to update the shades\n      if (selectedIndex === \"primary\" && color) {\n        shades = createBrandColorsFromPrimaryColor(e.target.value);\n      }\n\n      onChange && onChange(shades);\n    },\n    [onChange, selectedIndex, value],\n  );\n\n  // if the selected color is empty, use the white color for left icon\n  const hex = value[selectedIndex]\n    ? tinycolor(value[selectedIndex]).toHexString()\n    : \"#ffffff\";\n  const colorKeys = Object.keys(value) as brandColorsKeys[];\n\n  return (\n    <>\n      <div className=\"flex mb-2 space-x-1 border-gray-300 t--color-input-shades\">\n        {/* selectable color shades */}\n        {colorKeys.filter(filter).map((colorKey: brandColorsKeys, index) => (\n          <Tooltip\n            className=\"flex-1\"\n            content={startCase(colorKey)}\n            key={colorKey}\n          >\n            <ContentBox\n              className={`flex-grow w-5 h-5 cursor-pointer p-px relative border ${\n                selectedIndex === colorKey\n                  ? \"border-gray-700 bg-clip-content\"\n                  : \"border-gray-200 hover:border-gray-400\"\n              }`}\n              data-id={colorKey}\n              key={`shades-${colorKey}-${index}`}\n              onClick={() => setSelectedIndex(colorKey)}\n              style={{ backgroundColor: value[colorKey] }}\n            />\n          </Tooltip>\n        ))}\n      </div>\n\n      <input\n        className=\"hidden w-0 h-0\"\n        readOnly\n        ref={colorInputRef}\n        type=\"color\"\n        value={value[selectedIndex]} // convert to hex for safari compatibility\n      />\n\n      {/* label with tooltip */}\n      <div className=\"flex items-center gap-1\">\n        <StyledText\n          color=\"var(--ads-v2-color-fg)\"\n          kind=\"body-m\"\n          renderAs=\"label\"\n        >\n          {startCase(selectedIndex)}\n        </StyledText>\n        <Tooltip\n          content={tooltips && tooltips[selectedIndex]}\n          key={`tooltip-${selectedIndex}`}\n        >\n          <Icon className=\"help-icon\" name=\"question-line\" size=\"md\" />\n        </Tooltip>\n      </div>\n\n      <StyledInputGroup\n        className={`mb-2 ${className ? className : \"\"}`}\n        leftIcon={<LeftIcon onChange={onColorInputChange} value={hex} />}\n        onChange={onColorInputChange}\n        placeholder=\"enter color name or hex\"\n        value={value[selectedIndex]}\n      />\n    </>\n  );\n};\n\nexport function FieldColorInput() {\n  return function FieldCheckbox(\n    componentProps: FormTextFieldProps & {\n      meta: Partial<WrappedFieldMetaProps>;\n      input: Partial<WrappedFieldInputProps>;\n    },\n  ) {\n    return (\n      <ColorInput\n        onChange={componentProps.input.onChange}\n        value={componentProps.input.value}\n      />\n    );\n  };\n}\n\nexport function ColorInputComponent({ setting }: SettingComponentProps) {\n  return (\n    <FormGroup setting={setting}>\n      <Field component={FieldColorInput()} name={setting.name} />\n    </FormGroup>\n  );\n}\n\nexport default memo(ColorInputComponent);\n","import type { WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { Field } from \"redux-form\";\nimport { Button } from \"design-system\";\nimport React, { memo, useRef, useState, useEffect } from \"react\";\n\nimport type { FormTextFieldProps } from \"components/utils/ReduxFormTextField\";\n\nimport type { SettingComponentProps } from \"./Common\";\nimport { FormGroup } from \"./Common\";\nimport { ContentBox } from \"../components\";\nimport { getAssetUrl } from \"@appsmith/utils/airgapHelpers\";\n\ninterface ImageInputProps {\n  value?: any;\n  onChange?(value?: any): void;\n  validate?(\n    e: React.ChangeEvent<HTMLInputElement>,\n    callback?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  ): void;\n  className?: string;\n  defaultValue?: string;\n}\nexport const ImageInput = (props: ImageInputProps) => {\n  const { className, defaultValue, onChange, validate, value } = props;\n  const [preview, setPreview] = useState<string | ArrayBuffer | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // trigger file input on click of upload logo button\n  const onFileInputClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // on upload, pass the blob to api\n  const onFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n\n    if (!file) return;\n\n    // validate the file, if invalid, show error\n    // else call the callback\n    validate &&\n      validate(e, () => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onloadend = function () {\n          setPreview(reader.result);\n        };\n\n        onChange && onChange(file);\n      });\n  };\n\n  useEffect(() => {\n    setPreview(null);\n  }, [defaultValue]);\n\n  return (\n    <ContentBox\n      className={`relative flex items-center justify-center w-full border h-28 group ${\n        className ? className : \"\"\n      }`}\n    >\n      <img\n        alt=\"Preview\"\n        className=\"h-8\"\n        src={getAssetUrl((preview as any) || value)}\n      />\n      <div className=\"absolute inset-0 items-center justify-center hidden gap-2 group-hover:flex bg-opacity-20 hover-state\">\n        <Button onClick={onFileInputClick} size=\"md\" startIcon=\"upload-line\">\n          Upload file\n        </Button>\n      </div>\n\n      <input\n        accept=\"image/*\"\n        className=\"hidden\"\n        onChange={onFileInputChange}\n        ref={fileInputRef}\n        type=\"file\"\n      />\n    </ContentBox>\n  );\n};\n\nfunction FieldImageInput() {\n  return function FieldCheckbox(\n    componentProps: FormTextFieldProps & {\n      meta: Partial<WrappedFieldMetaProps>;\n      input: Partial<WrappedFieldInputProps>;\n    },\n  ) {\n    return <ImageInput value={componentProps.input.value} />;\n  };\n}\nexport function ImageInputComponent({ setting }: SettingComponentProps) {\n  return (\n    <FormGroup setting={setting}>\n      <Field component={FieldImageInput()} name={setting.name} />\n    </FormGroup>\n  );\n}\n\nexport default memo(ImageInputComponent);\n","import React from \"react\";\nimport type {\n  Control,\n  FormState,\n  UseFormReset,\n  UseFormHandleSubmit,\n  UseFormSetValue,\n  UseFormResetField,\n} from \"react-hook-form\";\nimport { Controller } from \"react-hook-form\";\nimport { Button, Icon, Text, Tooltip } from \"design-system\";\n\nimport type { Inputs } from \"./BrandingPage\";\nimport {\n  ADMIN_BRANDING_LOGO_REQUIREMENT,\n  ADMIN_BRANDING_FAVICON_REQUIREMENT,\n  ADMIN_BRANDING_COLOR_TOOLTIP_BACKGROUND,\n  ADMIN_BRANDING_COLOR_TOOLTIP_FONT,\n  ADMIN_BRANDING_COLOR_TOOLTIP_PRIMARY,\n  ADMIN_BRANDING_COLOR_TOOLTIP_HOVER,\n  ADMIN_BRANDING_COLOR_TOOLTIP_DISABLED,\n  ADMIN_BRANDING_COLOR_TOOLTIP,\n  createMessage,\n} from \"@appsmith/constants/messages\";\nimport { ColorInput } from \"pages/AdminSettings/FormGroup/ColorInput\";\nimport { ImageInput } from \"pages/AdminSettings/FormGroup/ImageInput\";\nimport { logoImageValidator, faivconImageValidator } from \"utils/BrandingUtils\";\nimport { useBrandingForm } from \"@appsmith/pages/AdminSettings/Branding/useBrandingForm\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport styled from \"styled-components\";\nimport { HelperText } from \"pages/AdminSettings/components\";\n\nconst Wrapper = styled.form`\n  .help-icon {\n    cursor: pointer;\n  }\n`;\n\nconst StyledText = styled(Text)`\n  font-weight: var(--ads-v2-font-weight-bold);\n`;\n\ninterface SettingsFormProps {\n  disabled?: boolean;\n  control: Control<Inputs, any>;\n  formState: FormState<Inputs>;\n  handleSubmit: UseFormHandleSubmit<Inputs>;\n  reset: UseFormReset<Inputs>;\n  defaultValues: Inputs;\n  setValue: UseFormSetValue<Inputs>;\n  resetField: UseFormResetField<Inputs>;\n  values: Inputs;\n}\n\nfunction SettingsForm(props: SettingsFormProps) {\n  const { control, defaultValues, disabled, formState, handleSubmit } = props;\n  const hasDirtyFields = Object.keys(formState.dirtyFields).length > 0;\n  const { onSubmit } = useBrandingForm({\n    dirtyFields: formState.dirtyFields,\n  });\n\n  return (\n    <Wrapper\n      className=\"flex flex-col flex-grow gap-4\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      {/* LOGO */}\n      <div className=\"flex flex-col gap-2\">\n        <StyledText\n          color=\"var(--ads-v2-color-fg)\"\n          htmlFor=\"brandLogo\"\n          kind=\"body-m\"\n          renderAs=\"label\"\n        >\n          Logo\n        </StyledText>\n        <Controller\n          control={control}\n          name=\"brandLogo\"\n          render={({ field: { onChange, value } }) => (\n            <ImageInput\n              className=\"t--settings-brand-logo-input\"\n              defaultValue={defaultValues.brandLogo}\n              onChange={(e) => {\n                onChange && onChange(e);\n\n                AnalyticsUtil.logEvent(\"BRANDING_PROPERTY_UPDATE\", {\n                  propertyName: \"logo\",\n                });\n              }}\n              validate={logoImageValidator}\n              value={value}\n            />\n          )}\n        />\n        <HelperText renderAs=\"p\">\n          * {createMessage(ADMIN_BRANDING_LOGO_REQUIREMENT)}\n        </HelperText>\n      </div>\n\n      {/* FAVICON */}\n      <div className=\"flex flex-col gap-2\">\n        <StyledText\n          color=\"var(--ads-v2-color-fg)\"\n          htmlFor=\"brandFavicon\"\n          kind=\"body-m\"\n          renderAs=\"label\"\n        >\n          Favicon\n        </StyledText>\n        <Controller\n          control={control}\n          name=\"brandFavicon\"\n          render={({ field: { onChange, value } }) => (\n            <ImageInput\n              className=\"t--settings-brand-favicon-input\"\n              defaultValue={defaultValues.brandFavicon}\n              onChange={(e) => {\n                onChange && onChange(e);\n\n                AnalyticsUtil.logEvent(\"BRANDING_PROPERTY_UPDATE\", {\n                  propertyName: \"favicon\",\n                });\n              }}\n              validate={faivconImageValidator}\n              value={value}\n            />\n          )}\n        />\n        <HelperText renderAs=\"p\">\n          * {createMessage(ADMIN_BRANDING_FAVICON_REQUIREMENT)}\n        </HelperText>\n      </div>\n\n      {/* COLOR */}\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"flex items-center gap-1\">\n          <StyledText\n            color=\"var(--ads-v2-color-fg)\"\n            htmlFor=\"APPSMITH_BRAND_PRIMARY_COLOR\"\n            kind=\"body-m\"\n            renderAs=\"label\"\n          >\n            Color\n          </StyledText>\n          <Tooltip content={createMessage(ADMIN_BRANDING_COLOR_TOOLTIP)}>\n            <Icon className=\"help-icon\" name=\"question-line\" size=\"md\" />\n          </Tooltip>\n        </div>\n\n        <Controller\n          control={control}\n          name=\"brandColors\"\n          render={({ field: { onChange, value } }) => (\n            <ColorInput\n              className=\"t--settings-brand-color-input\"\n              defaultValue={defaultValues.brandColors}\n              filter={(key) => ![\"disabled\", \"hover\", \"active\"].includes(key)}\n              logEvent={(property: string) => {\n                AnalyticsUtil.logEvent(\"BRANDING_PROPERTY_UPDATE\", {\n                  propertyName: property,\n                });\n              }}\n              onChange={onChange}\n              tooltips={{\n                primary: createMessage(ADMIN_BRANDING_COLOR_TOOLTIP_PRIMARY),\n                background: createMessage(\n                  ADMIN_BRANDING_COLOR_TOOLTIP_BACKGROUND,\n                ),\n                hover: createMessage(ADMIN_BRANDING_COLOR_TOOLTIP_HOVER),\n                font: createMessage(ADMIN_BRANDING_COLOR_TOOLTIP_FONT),\n                disabled: createMessage(ADMIN_BRANDING_COLOR_TOOLTIP_DISABLED),\n              }}\n              value={value}\n            />\n          )}\n        />\n      </div>\n\n      <Button\n        className=\"t--settings-branding-submit-button\"\n        isDisabled={disabled || !hasDirtyFields}\n        size=\"md\"\n        type=\"submit\"\n      >\n        Submit\n      </Button>\n    </Wrapper>\n  );\n}\n\nexport default SettingsForm;\n","/* eslint-disable */\n//@ts-nocheck\nexport const useBrandingForm = (props: any) => {\n  /* eslint-disable */\n  //@ts-nocheck\n  const onSubmit = (data: any) => {\n    //\n  };\n\n  return {\n    onSubmit,\n  };\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\n\nimport Previews from \"./previews\";\nimport SettingsForm from \"./SettingsForm\";\nimport { getTenantConfig } from \"@appsmith/selectors/tenantSelectors\";\nimport { Wrapper } from \"pages/AdminSettings/Authentication/AuthPage\";\n\nimport { getAssetUrl } from \"@appsmith/utils/airgapHelpers\";\nimport type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport { getUpgradeBanner } from \"@appsmith/utils/BusinessFeatures/brandingPageHelpers\";\n\nexport type brandColorsKeys =\n  | \"primary\"\n  | \"background\"\n  | \"font\"\n  | \"hover\"\n  | \"disabled\";\n\nexport interface Inputs {\n  brandColors: Record<brandColorsKeys, string>;\n  brandLogo: string;\n  brandFavicon: string;\n}\n\ninterface BrandingPageProps {\n  category: AdminConfigType;\n}\n\nfunction BrandingPage(props: BrandingPageProps) {\n  const { category } = props;\n  const isBrandingEnabled = category?.isFeatureEnabled ?? false;\n  const tenantConfig = useSelector(getTenantConfig);\n  const defaultValues = {\n    brandColors: tenantConfig.brandColors,\n    brandLogo: tenantConfig.brandLogoUrl,\n    brandFavicon: tenantConfig.brandFaviconUrl,\n  };\n  const {\n    control,\n    formState,\n    getValues,\n    handleSubmit,\n    reset,\n    resetField,\n    setValue,\n    watch,\n  } = useForm<Inputs>({\n    defaultValues,\n  });\n\n  const values = getValues();\n\n  /**\n   * reset the form when the tenant config changes\n   */\n  useEffect(() => {\n    reset({\n      brandColors: tenantConfig.brandColors,\n      brandLogo: tenantConfig.brandLogoUrl,\n      brandFavicon: tenantConfig.brandFaviconUrl,\n    });\n  }, [tenantConfig, reset]);\n\n  watch();\n\n  return (\n    <Wrapper>\n      {getUpgradeBanner(isBrandingEnabled)}\n      <div className=\"grid md:grid-cols-[1fr] lg:grid-cols-[max(300px,30%)_1fr] gap-8 mt-4 pr-7\">\n        <SettingsForm\n          control={control}\n          defaultValues={defaultValues}\n          disabled={!isBrandingEnabled}\n          formState={formState}\n          handleSubmit={handleSubmit}\n          reset={reset}\n          resetField={resetField}\n          setValue={setValue}\n          values={values}\n        />\n        <div className=\"flex-grow\">\n          <Previews\n            favicon={getAssetUrl(values.brandFavicon)}\n            logo={getAssetUrl(values.brandLogo)}\n            shades={values.brandColors}\n          />\n        </div>\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default BrandingPage;\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { selectFeatureFlags } from \"@appsmith/selectors/featureFlagsSelectors\";\nimport { isBrandingEnabled } from \"@appsmith/utils/planHelpers\";\nimport BrandingPage from \"pages/AdminSettings/Branding/BrandingPage\";\nimport store from \"store\";\n\nconst featureFlags = selectFeatureFlags(store.getState());\n\nexport const config: AdminConfigType = {\n  type: SettingCategories.BRANDING,\n  categoryType: CategoryType.GENERAL,\n  controlType: SettingTypes.PAGE,\n  canSave: false,\n  title: \"Branding\",\n  icon: \"pantone\",\n  component: BrandingPage,\n  isFeatureEnabled: isBrandingEnabled(featureFlags),\n};\n","import styled from \"styled-components\";\nimport React from \"react\";\nimport type { HeaderProps } from \"./types\";\nimport { Text } from \"design-system\";\n\nexport const HeaderContainer = styled.div`\n  padding: 32px 32px 20px;\n  margin: auto;\n  text-align: center;\n\n  & .header-subHeadings-container {\n    margin: 8px auto;\n    max-width: 720px;\n  }\n`;\n\nexport function HeaderComponent(props: HeaderProps) {\n  const subHeadings = props.subHeadings?.map((sub: string, index: number) => (\n    <div\n      className=\"header-subHeading-container\"\n      data-testid={`t--header-subHeading-container-${index}`}\n      key={`subHeading-${index}`}\n    >\n      <Text\n        color=\"var(--ads-v2-color-fg-emphasis)\"\n        kind=\"action-l\"\n        renderAs=\"p\"\n      >\n        {sub}\n      </Text>\n    </div>\n  ));\n  return (\n    <HeaderContainer\n      className=\"upgrade-page-header-container\"\n      data-testid=\"t--upgrade-page-header-container\"\n    >\n      <div\n        className=\"header-heading-container\"\n        data-testid=\"t--header-heading-container\"\n      >\n        <Text\n          color=\"var(--ads-v2-color-fg-emphasis-plus)\"\n          kind=\"heading-xl\"\n          renderAs=\"h1\"\n        >\n          {props.heading}\n        </Text>\n      </div>\n      <div\n        className=\"header-subHeadings-container\"\n        data-testid=\"t--header-subHeadings-container\"\n      >\n        {subHeadings}\n      </div>\n    </HeaderContainer>\n  );\n}\n","import styled from \"styled-components\";\nimport React, { useEffect, useState } from \"react\";\nimport { Icon, Text } from \"design-system\";\nimport type { CarouselProps } from \"./types\";\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  flex: 1 1;\n  gap: 64px;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 16px 52px;\n\n  & .carousel-triggers {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    justify-content: center;\n    align-items: center;\n    width: 50%;\n    max-width: 420px;\n\n    & .carousel-trigger {\n      padding: 16px;\n      width: 100%;\n      height: max-content;\n      cursor: pointer;\n\n      .icon-container {\n        margin-top: 4px;\n        svg path {\n          fill: var(--ads-v2-color-fg-emphasis);\n        }\n      }\n\n      & .trigger {\n        display: flex;\n        gap: 16px;\n        align-items: flex-start;\n\n        & .trigger-content {\n          display: flex;\n          gap: 16px;\n          flex-direction: column;\n          align-content: flex-start;\n\n          & .trigger-heading {\n            span {\n              color: var(--ads-v2-color-fg-muted);\n            }\n          }\n\n          & .trigger-details-container {\n            .detail-content {\n              color: var(--ads-v2-color-fg);\n\n              span {\n                color: var(--ads-v2-color-fg-brand);\n                font-weight: 500;\n              }\n            }\n          }\n        }\n      }\n\n      &.active {\n        height: max-content;\n        box-shadow:\n          0 2px 4px -2px rgba(0, 0, 0, 0.06),\n          0 4px 8px -2px rgba(0, 0, 0, 0.1);\n\n        background-color: var(--ads-v2-color-bg);\n        border-radius: var(--ads-v2-border-radius);\n\n        & .icon-container svg path {\n          fill: var(--ads-v2-color-fg-brand);\n        }\n\n        & .trigger {\n          & .trigger-content {\n            & .trigger-heading {\n              span {\n                color: var(--ads-v2-color-fg-emphasis);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    & .carousel-targets {\n      width: auto;\n      height: auto;\n    }\n  }\n\n  & .carousel-targets {\n    width: 600px;\n    min-height: 400px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    & img {\n      height: inherit;\n      width: inherit;\n    }\n  }\n`;\n\nexport function CarouselComponent(props: CarouselProps) {\n  const [active, setActive] = useState(0);\n  const [targetContent, setTargetContent] = useState(null);\n  const { design, targets, triggers } = props;\n  useEffect(() => {\n    setTargetContent(targets[active]);\n  }, [active]);\n\n  const isActive = (i: number) => i === active;\n  const targetsComponent = (\n    <div\n      className={`carousel-targets ${design}`}\n      data-testid=\"t--carousel-targets\"\n    >\n      {targetContent}\n    </div>\n  );\n  const triggersComponent = (\n    <div\n      className={`carousel-triggers ${design}`}\n      data-testid=\"t--carousel-triggers\"\n    >\n      {triggers.map((d, i) => {\n        return (\n          <div\n            className={`carousel-item-container carousel-trigger ${\n              isActive(i) ? \"active\" : \"\"\n            }`}\n            key={`carousel-item-${i}`}\n            onClick={() => setActive(i)}\n            role=\"button\"\n          >\n            <div className={\"trigger\"}>\n              <div className=\"icon-container\">\n                <Icon name={d.icon} size=\"lg\" />\n              </div>\n              <div className=\"trigger-content\">\n                <div className=\"trigger-heading\">\n                  <Text\n                    color=\"var(--ads-v2-color-fg-emphasis)\"\n                    kind=\"heading-m\"\n                    renderAs=\"h1\"\n                  >\n                    {d.heading}\n                  </Text>\n                </div>\n                {isActive(i) && (\n                  <>\n                    <div className=\"trigger-details-container\">\n                      {d.details.map((detail, di) => {\n                        return (\n                          <div\n                            className={\"expanded\"}\n                            key={`trigger-detail-${di}`}\n                          >\n                            <span\n                              className=\"detail-content\"\n                              dangerouslySetInnerHTML={{ __html: detail }}\n                            />\n                          </div>\n                        );\n                      })}\n                    </div>\n                    {design === \"trigger-contains-target\" && (\n                      <div>{targetsComponent}</div>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  let display = (\n    <>\n      {triggersComponent}\n      {targetsComponent}\n    </>\n  );\n  switch (design) {\n    case \"no-target\":\n      display = triggersComponent;\n      break;\n    case \"trigger-contains-target\":\n      display = triggersComponent;\n      break;\n    case \"split-right-trigger\":\n      display = (\n        <>\n          {targetsComponent}\n          {triggersComponent}\n        </>\n      );\n      break;\n  }\n\n  return (\n    <CarouselContainer\n      className=\"upgrade-page-carousel-container\"\n      data-testid=\"t--upgrade-page-carousel-container\"\n    >\n      {display}\n    </CarouselContainer>\n  );\n}\n","import styled from \"styled-components\";\nimport React from \"react\";\nimport { Button, Text } from \"design-system\";\nimport type { FooterProps } from \"./types\";\nimport {\n  AVAILABLE_ON_BUSINESS,\n  AVAILABLE_ON_ENTERPRISE,\n  createMessage,\n  UPGRADE,\n} from \"@appsmith/constants/messages\";\n\nconst FooterContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 112px;\n  gap: 20px;\n  padding: 16px 20px;\n  background-color: var(--ads-v2-color-bg);\n\n  & .left {\n    min-width: 362px;\n    width: 50%;\n    flex-grow: 9;\n    display: flex;\n    flex-direction: column;\n  }\n\n  & .right {\n    flex-grow: 1;\n    text-align: end;\n  }\n`;\n\nexport function FooterComponent(props: FooterProps) {\n  const { isEnterprise = false, message, onClick, showHeading = true } = props;\n  return (\n    <FooterContainer\n      className=\"upgrade-page-footer-container\"\n      data-testid=\"t--upgrade-page-footer-container\"\n    >\n      <div className=\"left\">\n        {showHeading && (\n          <div className=\"heading-container\">\n            <Text\n              color=\"var(ads-v2-color-fg-emphasis-plus)\"\n              kind=\"heading-m\"\n              renderAs=\"h1\"\n            >\n              {createMessage(\n                isEnterprise ? AVAILABLE_ON_ENTERPRISE : AVAILABLE_ON_BUSINESS,\n              )}\n            </Text>\n          </div>\n        )}\n        <div className=\"text-container\">\n          <Text color=\"var(--ads-v2-color-fg)\" renderAs=\"p\">\n            {message}\n          </Text>\n        </div>\n      </div>\n      <div className=\"right\">\n        <Button data-testid=\"t--button-upgrade\" onClick={onClick} size=\"md\">\n          {createMessage(UPGRADE)}\n        </Button>\n      </div>\n    </FooterContainer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { HeaderComponent as Header } from \"./Header\";\nimport { CarouselComponent as Carousel } from \"./Carousel\";\nimport { FooterComponent as Footer } from \"./Footer\";\nimport type { UpgradePageProps } from \"./types\";\n\nexport const Container = styled.div`\n  background-color: var(--ads-v2-color-bg-subtle);\n  min-height: 0;\n  width: 100%;\n  position: relative;\n\n  .scroll-container {\n    height: calc(100vh - 50px - 112px);\n    overflow: auto;\n  }\n`;\n\nexport default function UpgradePage(props: UpgradePageProps) {\n  const { carousel, footer, header } = props;\n  return (\n    <Container\n      className=\"upgrade-page-container\"\n      data-testid=\"t--upgrade-page-container\"\n    >\n      <div className=\"scroll-container\">\n        <Header {...header} />\n        <Carousel {...carousel} />\n      </div>\n      <Footer {...footer} />\n    </Container>\n  );\n}\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { ProvisioningUpgradePage } from \"../../Upgrade/ProvisioningUpgradePage\";\n\nexport const config: AdminConfigType = {\n  icon: \"user-follow-line\",\n  type: SettingCategories.PROVISIONING,\n  categoryType: CategoryType.ACL,\n  controlType: SettingTypes.PAGE,\n  component: ProvisioningUpgradePage,\n  title: \"Provisioning\",\n  canSave: false,\n  isFeatureEnabled: false,\n  isEnterprise: true,\n} as AdminConfigType;\n","import React from \"react\";\nimport type { Carousel, Header } from \"./types\";\nimport UpgradePage from \"./UpgradePage\";\nimport ProvisionDeprovisionUsersImage from \"assets/images/upgrade/provisioning/provision-deprovision-users.svg\";\nimport AutoGroupSyncImage from \"assets/images/upgrade/provisioning/auto-group-sync.svg\";\nimport {\n  AUTO_GROUP_SYNC,\n  AUTO_GROUP_SYNC_DETAIL1,\n  createMessage,\n  PROVISION_DEPROVISION_USERS,\n  PROVISION_DEPROVISION_USERS_DETAIL1,\n  PROVISIONING_UPGRADE_PAGE_FOOTER,\n  PROVISIONING_UPGRADE_PAGE_SUB_HEADING,\n  USER_PROVISIONING_FOR_ENTERPRISES,\n} from \"@appsmith/constants/messages\";\nimport useOnUpgrade from \"utils/hooks/useOnUpgrade\";\nimport { RampFeature, RampSection } from \"utils/ProductRamps/RampsControlList\";\n\nexport function ProvisioningUpgradePage() {\n  const { onUpgrade } = useOnUpgrade({\n    logEventName: \"PROVISIONING_UPGRADE_ADMIN_SETTINGS\",\n    logEventData: { source: \"Provisioning\" },\n    featureName: RampFeature.Provisioning,\n    sectionName: RampSection.AdminSettings,\n    isEnterprise: true,\n  });\n\n  const header: Header = {\n    heading: createMessage(USER_PROVISIONING_FOR_ENTERPRISES),\n    subHeadings: [createMessage(PROVISIONING_UPGRADE_PAGE_SUB_HEADING)],\n  };\n  const carousel: Carousel = {\n    triggers: [\n      {\n        icon: \"user-settings-line\",\n        heading: createMessage(PROVISION_DEPROVISION_USERS),\n        details: [createMessage(PROVISION_DEPROVISION_USERS_DETAIL1)],\n      },\n      {\n        icon: \"group-line\",\n        heading: createMessage(AUTO_GROUP_SYNC),\n        details: [createMessage(AUTO_GROUP_SYNC_DETAIL1)],\n      },\n    ],\n    targets: [\n      <img\n        alt={createMessage(PROVISION_DEPROVISION_USERS)}\n        key=\"provision-deprovision-users\"\n        src={ProvisionDeprovisionUsersImage}\n      />,\n      <img\n        alt={createMessage(AUTO_GROUP_SYNC)}\n        key=\"auto-group-sync\"\n        src={AutoGroupSyncImage}\n      />,\n    ],\n    design: \"split-left-trigger\",\n  };\n  const footer = {\n    onClick: () => {\n      onUpgrade();\n    },\n    message: createMessage(PROVISIONING_UPGRADE_PAGE_FOOTER),\n    isEnterprise: true,\n  };\n  const props = { header, carousel, footer };\n  return <UpgradePage {...props} />;\n}\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { AccessControlUpgradePage } from \"../../Upgrade/AccessControlUpgradePage\";\n\nexport const config: AdminConfigType = {\n  icon: \"user-3-line\",\n  type: SettingCategories.ACCESS_CONTROL,\n  categoryType: CategoryType.ACL,\n  controlType: SettingTypes.PAGE,\n  component: AccessControlUpgradePage,\n  title: \"Access Control\",\n  canSave: false,\n  isFeatureEnabled: false,\n} as AdminConfigType;\n","import React from \"react\";\nimport type { Carousel, Header } from \"./types\";\nimport UpgradePage from \"./UpgradePage\";\nimport SecureAppsLeastPrivilegeImage from \"assets/images/upgrade/access-control/secure-apps-least-privilege.png\";\nimport RestrictPublicExposureImage from \"assets/images/upgrade/access-control/restrict-public-exposure.png\";\nimport PreventAccidentalDamageImage from \"assets/images/upgrade/access-control/prevent-accidental-damage.png\";\nimport {\n  ACCESS_CONTROL_UPGRADE_PAGE_FOOTER,\n  ACCESS_CONTROL_UPGRADE_PAGE_SUB_HEADING,\n  createMessage,\n  GRANULAR_ACCESS_CONTROL_FOR_TEAMS,\n  INTRODUCING,\n  PREVENT_ACCIDENTAL_DAMAGE,\n  PREVENT_ACCIDENTAL_DAMAGE_DETAIL1,\n  RESTRICT_PUBLIC_EXPOSURE,\n  RESTRICT_PUBLIC_EXPOSURE_DETAIL1,\n  SECURITY_APPS_LEAST_PRIVILEGE,\n  SECURITY_APPS_LEAST_PRIVILEGE_DETAIL1,\n} from \"@appsmith/constants/messages\";\nimport useOnUpgrade from \"utils/hooks/useOnUpgrade\";\nimport { RampFeature, RampSection } from \"utils/ProductRamps/RampsControlList\";\n\nexport function AccessControlUpgradePage() {\n  const { onUpgrade } = useOnUpgrade({\n    logEventName: \"GAC_UPGRADE_CLICK_ADMIN_SETTINGS\",\n    logEventData: { source: \"Granular Access Control\" },\n    featureName: RampFeature.Gac,\n    sectionName: RampSection.AdminSettings,\n  });\n\n  const header: Header = {\n    heading: createMessage(\n      INTRODUCING,\n      createMessage(GRANULAR_ACCESS_CONTROL_FOR_TEAMS),\n    ),\n    subHeadings: [createMessage(ACCESS_CONTROL_UPGRADE_PAGE_SUB_HEADING)],\n  };\n  const carousel: Carousel = {\n    triggers: [\n      {\n        icon: \"user-shared-line\",\n        heading: createMessage(SECURITY_APPS_LEAST_PRIVILEGE),\n        details: [createMessage(SECURITY_APPS_LEAST_PRIVILEGE_DETAIL1)],\n      },\n      {\n        icon: \"delete-row\",\n        heading: createMessage(PREVENT_ACCIDENTAL_DAMAGE),\n        details: [createMessage(PREVENT_ACCIDENTAL_DAMAGE_DETAIL1)],\n      },\n      {\n        icon: \"eye-off\",\n        heading: createMessage(RESTRICT_PUBLIC_EXPOSURE),\n        details: [createMessage(RESTRICT_PUBLIC_EXPOSURE_DETAIL1)],\n      },\n    ],\n    targets: [\n      <img\n        alt={createMessage(SECURITY_APPS_LEAST_PRIVILEGE)}\n        key=\"secure-apps-least-privilege\"\n        src={SecureAppsLeastPrivilegeImage}\n      />,\n      <img\n        alt={createMessage(PREVENT_ACCIDENTAL_DAMAGE)}\n        key=\"prevent-accidental-damage\"\n        src={PreventAccidentalDamageImage}\n      />,\n      <img\n        alt={createMessage(RESTRICT_PUBLIC_EXPOSURE)}\n        key=\"restrict-exposure-sensitive-data\"\n        src={RestrictPublicExposureImage}\n      />,\n    ],\n    design: \"split-left-trigger\",\n  };\n  const footer = {\n    onClick: () => {\n      onUpgrade();\n    },\n    message: createMessage(ACCESS_CONTROL_UPGRADE_PAGE_FOOTER),\n  };\n  const props = { header, carousel, footer };\n  return <UpgradePage {...props} />;\n}\n","import type { AdminConfigType } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  CategoryType,\n  SettingCategories,\n  SettingTypes,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { AuditLogsUpgradePage } from \"../../Upgrade/AuditLogsUpgradePage\";\n\nexport const config: AdminConfigType = {\n  icon: \"file-list-2-line\",\n  type: SettingCategories.AUDIT_LOGS,\n  categoryType: CategoryType.OTHER,\n  controlType: SettingTypes.PAGE,\n  component: AuditLogsUpgradePage,\n  title: \"Audit logs\",\n  canSave: false,\n  isFeatureEnabled: false,\n} as AdminConfigType;\n","import React from \"react\";\nimport type { Carousel, Header } from \"./types\";\nimport UpgradePage from \"./UpgradePage\";\nimport DebuggingImage from \"assets/svg/upgrade/audit-logs/debugging.svg\";\nimport IncidentManagementImage from \"assets/svg/upgrade/audit-logs/incident-management.svg\";\nimport SecurityAndComplianceImage from \"assets/svg/upgrade/audit-logs/security-and-compliance.svg\";\nimport {\n  AUDIT_LOGS_UPGRADE_PAGE_SUB_HEADING,\n  createMessage,\n  DEBUGGING,\n  DEBUGGING_DETAIL1,\n  EXCLUSIVE_TO_BUSINESS,\n  INCIDENT_MANAGEMENT,\n  INCIDENT_MANAGEMENT_DETAIL1,\n  INTRODUCING,\n  SECURITY_AND_COMPLIANCE,\n  SECURITY_AND_COMPLIANCE_DETAIL1,\n  SECURITY_AND_COMPLIANCE_DETAIL2,\n} from \"@appsmith/constants/messages\";\nimport useOnUpgrade from \"utils/hooks/useOnUpgrade\";\nimport { RampFeature, RampSection } from \"utils/ProductRamps/RampsControlList\";\n\nexport function AuditLogsUpgradePage() {\n  const { onUpgrade } = useOnUpgrade({\n    logEventName: \"AUDIT_LOGS_UPGRADE_ADMIN_SETTINGS\",\n    logEventData: { source: \"AuditLogs\" },\n    featureName: RampFeature.AuditLogs,\n    sectionName: RampSection.AdminSettings,\n  });\n\n  const header: Header = {\n    heading: createMessage(INTRODUCING, \"audit logs\"),\n    subHeadings: [createMessage(AUDIT_LOGS_UPGRADE_PAGE_SUB_HEADING)],\n  };\n  const carousel: Carousel = {\n    triggers: [\n      {\n        icon: \"lock-2-line\",\n        heading: createMessage(SECURITY_AND_COMPLIANCE),\n        details: [\n          createMessage(SECURITY_AND_COMPLIANCE_DETAIL1),\n          createMessage(SECURITY_AND_COMPLIANCE_DETAIL2),\n        ],\n      },\n      {\n        icon: \"search-eye-line\",\n        heading: createMessage(DEBUGGING),\n        details: [createMessage(DEBUGGING_DETAIL1)],\n      },\n      {\n        icon: \"alert-line\",\n        heading: createMessage(INCIDENT_MANAGEMENT),\n        details: [createMessage(INCIDENT_MANAGEMENT_DETAIL1)],\n      },\n    ],\n    targets: [\n      <img\n        alt={createMessage(SECURITY_AND_COMPLIANCE)}\n        key=\"security-and-compliance\"\n        src={SecurityAndComplianceImage}\n      />,\n      <img\n        alt={createMessage(DEBUGGING)}\n        key=\"debugging\"\n        src={DebuggingImage}\n      />,\n      <img\n        alt={createMessage(INCIDENT_MANAGEMENT)}\n        key=\"incident-management\"\n        src={IncidentManagementImage}\n      />,\n    ],\n    design: \"split-left-trigger\",\n  };\n\n  const footer = {\n    onClick: () => {\n      onUpgrade();\n    },\n    message: createMessage(EXCLUSIVE_TO_BUSINESS, [\"audit logs\"]),\n  };\n  const props = { header, carousel, footer };\n  return <UpgradePage {...props} />;\n}\n","import { ConfigFactory } from \"pages/AdminSettings/config/ConfigFactory\";\n\nimport { config as GeneralConfig } from \"@appsmith/pages/AdminSettings/config/general\";\nimport { config as EmailConfig } from \"pages/AdminSettings/config/email\";\nimport { config as DeveloperSettings } from \"@appsmith/pages/AdminSettings/config/DeveloperSettings\";\nimport { config as VersionConfig } from \"pages/AdminSettings/config/version\";\nimport { config as AdvancedConfig } from \"pages/AdminSettings/config/advanced\";\nimport { config as Authentication } from \"@appsmith/pages/AdminSettings/config/authentication\";\nimport { config as BrandingConfig } from \"@appsmith/pages/AdminSettings/config/branding\";\nimport { config as ProvisioningConfig } from \"@appsmith/pages/AdminSettings/config/provisioning\";\nimport { config as UserListing } from \"@appsmith/pages/AdminSettings/config//userlisting\";\nimport { config as AuditLogsConfig } from \"@appsmith/pages/AdminSettings/config/auditlogs\";\n\nConfigFactory.register(GeneralConfig);\nConfigFactory.register(EmailConfig);\nConfigFactory.register(DeveloperSettings);\nConfigFactory.register(Authentication);\nConfigFactory.register(AdvancedConfig);\nConfigFactory.register(VersionConfig);\nConfigFactory.register(BrandingConfig);\nConfigFactory.register(ProvisioningConfig);\nConfigFactory.register(UserListing);\nConfigFactory.register(AuditLogsConfig);\n\nexport default ConfigFactory;\n","export * from \"ce/pages/AdminSettings/config\";\nimport { ConfigFactory } from \"pages/AdminSettings/config/ConfigFactory\";\nexport default ConfigFactory;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport AdminConfig from \"@appsmith/pages/AdminSettings/config\";\nimport {\n  CategoryType,\n  type Category,\n} from \"@appsmith/pages/AdminSettings/config/types\";\nimport { adminSettingsCategoryUrl } from \"@appsmith/RouteBuilder\";\nimport { useParams } from \"react-router\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport { Link, Text } from \"design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\nimport { getCurrentUser } from \"selectors/usersSelectors\";\nimport BusinessTag from \"components/BusinessTag\";\nimport EnterpriseTag from \"components/EnterpriseTag\";\nimport { getTenantPermissions } from \"@appsmith/selectors/tenantSelectors\";\nimport {\n  getFilteredAclCategories,\n  getFilteredGeneralCategories,\n  getFilteredOtherCategories,\n} from \"@appsmith/utils/adminSettingsHelpers\";\nimport { useFeatureFlag } from \"utils/hooks/useFeatureFlag\";\nimport { FEATURE_FLAG } from \"@appsmith/entities/FeatureFlag\";\nimport { getHasAuditLogsReadPermission } from \"@appsmith/utils/BusinessFeatures/permissionPageHelpers\";\n\nexport const Wrapper = styled.div`\n  flex-basis: ${(props) => props.theme.sidebarWidth};\n  overflow-y: auto;\n  border-right: 1px solid var(--ads-v2-color-border);\n  flex-shrink: 0;\n  padding: 12px 0;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  > div:not(:first-child) {\n    border-top: 1px solid var(--ads-v2-color-border);\n  }\n`;\n\nexport const HeaderContainer = styled.div`\n  margin: 12px;\n`;\n\nexport const StyledHeader = styled(Text)`\n  height: 20px;\n  margin: 16px;\n  color: var(--ads-v2-color-fg-emphasis);\n`;\n\nexport const CategoryList = styled.ul`\n  margin: 0;\n  list-style-type: none;\n`;\n\nexport const CategoryItem = styled.li`\n  /* width: 90%; */\n`;\n\nexport const StyledLink = styled(Link)<{ $active: boolean }>`\n  padding: 8px 16px;\n  border-radius: var(--ads-v2-border-radius);\n  background-color: ${(props) =>\n    props.$active ? `var(--ads-v2-color-bg-muted)` : \"\"};\n  text-decoration: none !important;\n\n  .ads-v2-text {\n    display: flex;\n    gap: var(--ads-v2-spaces-3);\n    align-items: center;\n  }\n\n  && {\n    color: var(--ads-v2-color-fg);\n  }\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  &:hover:not(.active) {\n    background-color: var(--ads-v2-color-bg-subtle);\n  }\n`;\n\nexport const SettingName = styled(Text)<{ active?: boolean }>`\n  color: ${(props) =>\n    props.active\n      ? \"var(--ads-v2-color-fg-emphasis-plus)\"\n      : \"var(--ads-v2-color-fg)\"};\n  font-weight: 400;\n`;\n\nexport function getSettingsCategory(type: string): Category[] {\n  return Array.from(\n    AdminConfig.categories.filter((cat: any) => cat.categoryType === type),\n  );\n}\n\nexport function Categories({\n  categories,\n  currentCategory,\n  currentSubCategory,\n  parentCategory,\n  showSubCategory,\n}: {\n  categories?: Category[];\n  parentCategory?: Category;\n  currentCategory: string;\n  currentSubCategory?: string;\n  showSubCategory?: boolean;\n}) {\n  const dispatch = useDispatch();\n\n  const triggerAnalytics = (page: string) => {\n    const source: any = {\n      \"audit-logs\": \"AuditLogs\",\n      \"access-control\": \"AccessControl\",\n      provisioning: \"Provisioning\",\n    };\n    AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_CLICK\", {\n      source: source[page],\n    });\n  };\n\n  const onClickHandler = (category: string, showUpgradeTag: boolean) => {\n    if (category === \"general\") {\n      dispatch({\n        type: ReduxActionTypes.FETCH_ADMIN_SETTINGS,\n      });\n    }\n    if (showUpgradeTag) {\n      triggerAnalytics(category);\n    }\n  };\n\n  return (\n    <CategoryList className=\"t--settings-category-list\">\n      {categories?.map((config) => {\n        const active =\n          !!currentSubCategory && showSubCategory\n            ? currentSubCategory == config.slug\n            : currentCategory == config.slug;\n        const showUpgradeTag = config?.isFeatureEnabled === false;\n        return (\n          <CategoryItem key={config.slug}>\n            <StyledLink\n              $active={active}\n              className={`t--settings-category-${config.slug} ${\n                active ? \"active\" : \"\"\n              }`}\n              onClick={() =>\n                onClickHandler(config.slug, showUpgradeTag || false)\n              }\n              startIcon={showUpgradeTag ? \"lock-2-line\" : `${config.icon}`}\n              target=\"_self\"\n              to={\n                !parentCategory\n                  ? adminSettingsCategoryUrl({ category: config.slug })\n                  : adminSettingsCategoryUrl({\n                      category: parentCategory.slug,\n                      selected: config.slug,\n                    })\n              }\n            >\n              <SettingName active={active}>{config.title}</SettingName>\n              {showUpgradeTag &&\n                (config?.isEnterprise ? <EnterpriseTag /> : <BusinessTag />)}\n            </StyledLink>\n            {showSubCategory && (\n              <Categories\n                categories={config.children}\n                currentCategory={currentCategory}\n                currentSubCategory={currentSubCategory}\n                parentCategory={config}\n              />\n            )}\n          </CategoryItem>\n        );\n      })}\n    </CategoryList>\n  );\n}\n\nexport default function LeftPane() {\n  const categories = getSettingsCategory(CategoryType.GENERAL);\n  const aclCategories = getSettingsCategory(CategoryType.ACL);\n  const othersCategories = getSettingsCategory(CategoryType.OTHER);\n  const { category, selected: subCategory } = useParams() as any;\n  const user = useSelector(getCurrentUser);\n  const isSuperUser = user?.isSuperUser;\n  const tenantPermissions = useSelector(getTenantPermissions);\n  const isFeatureEnabled = useFeatureFlag(FEATURE_FLAG.license_gac_enabled);\n  const isAuditLogsEnabled = getHasAuditLogsReadPermission(\n    isFeatureEnabled,\n    tenantPermissions,\n  );\n\n  const filteredGeneralCategories = getFilteredGeneralCategories(categories);\n\n  const filteredAclCategories = getFilteredAclCategories(\n    aclCategories,\n    isSuperUser,\n  );\n\n  const filteredOthersCategories = getFilteredOtherCategories(\n    othersCategories,\n    isSuperUser,\n  );\n\n  return (\n    <Wrapper>\n      {isSuperUser && (\n        <HeaderContainer>\n          <StyledHeader kind=\"heading-s\" renderAs=\"p\">\n            Admin settings\n          </StyledHeader>\n          <Categories\n            categories={filteredGeneralCategories}\n            currentCategory={category}\n            currentSubCategory={subCategory}\n          />\n        </HeaderContainer>\n      )}\n      <HeaderContainer>\n        <StyledHeader kind=\"heading-s\" renderAs=\"p\">\n          Access control\n        </StyledHeader>\n        <Categories\n          categories={filteredAclCategories}\n          currentCategory={category}\n          currentSubCategory={subCategory}\n        />\n      </HeaderContainer>\n      {isAuditLogsEnabled && (\n        <HeaderContainer>\n          <StyledHeader kind=\"heading-s\" renderAs=\"p\">\n            Others\n          </StyledHeader>\n          <Categories\n            categories={filteredOthersCategories}\n            currentCategory={category}\n            currentSubCategory={subCategory}\n          />\n        </HeaderContainer>\n      )}\n    </Wrapper>\n  );\n}\n","import { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\n\nexport const saveSettings = (settings: any, needsRestart = true) => ({\n  type: ReduxActionTypes.SAVE_ADMIN_SETTINGS,\n  payload: {\n    settings,\n    needsRestart,\n  },\n});\n\nexport const retryServerRestart = () => ({\n  type: ReduxActionTypes.RETRY_RESTART_SERVER_POLL,\n});\n","import FormTextField from \"components/utils/ReduxFormTextField\";\nimport { createMessage } from \"@appsmith/constants/messages\";\nimport React from \"react\";\nimport { FormGroup, type SettingComponentProps } from \"./Common\";\n\nexport default function TextInput({ setting }: SettingComponentProps) {\n  return (\n    <FormGroup\n      className={`t--admin-settings-text-input t--admin-settings-${\n        setting.name || setting.id\n      } mb-4`}\n      setting={setting}\n    >\n      <FormTextField\n        defaultValue={setting.value}\n        disabled={setting.isFeatureEnabled === false}\n        format={setting.format}\n        isRequired={setting.isRequired}\n        name={setting.name || setting.id || \"\"}\n        parse={setting.parse}\n        placeholder={createMessage(() => setting.placeholder || \"\")}\n        type={setting.controlSubType}\n      />\n    </FormGroup>\n  );\n}\n","import React, { memo } from \"react\";\nimport type { WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { Field, getFormValues } from \"redux-form\";\nimport styled from \"styled-components\";\nimport type { SettingComponentProps } from \"./Common\";\nimport type { FormTextFieldProps } from \"components/utils/ReduxFormTextField\";\nimport { createMessage } from \"@appsmith/constants/messages\";\nimport { Switch, Text } from \"design-system\";\nimport { SETTINGS_FORM_NAME } from \"@appsmith/constants/forms\";\nimport { useSelector } from \"react-redux\";\n\nconst ToggleWrapper = styled.div`\n  margin-bottom: 16px;\n`;\n\nconst ToggleStatus = styled(Text)``;\n\nfunction FieldToggleWithToggleText(\n  toggleText?: (value: boolean) => string,\n  id?: string,\n  isPropertyDisabled?: boolean,\n  label?: React.ReactNode,\n  isDisabled = false,\n) {\n  return function FieldToggle(\n    componentProps: FormTextFieldProps & {\n      meta: Partial<WrappedFieldMetaProps>;\n      input: Partial<WrappedFieldInputProps>;\n    },\n  ) {\n    const val = componentProps.input.value;\n\n    function onToggle(value?: boolean) {\n      const toggleValue = isPropertyDisabled ? !value : value;\n      componentProps.input.onChange &&\n        componentProps.input.onChange(toggleValue);\n      componentProps.input.onBlur && componentProps.input.onBlur(toggleValue);\n    }\n    /* Value = !ENV_VARIABLE\n    This has been done intentionally as naming convention used contains the word disabled but the UI should show the button enabled by default.\n    */\n\n    //TODO: This should be refactored to utilize the functionality of the switch component for state\n    return (\n      <ToggleWrapper>\n        <Switch\n          data-testid={id}\n          isDisabled={isDisabled}\n          isSelected={isPropertyDisabled ? !val : val}\n          onChange={onToggle}\n        >\n          <ToggleStatus>\n            {typeof toggleText == \"function\"\n              ? createMessage(() => toggleText(val))\n              : createMessage(() => `${label ? `Enable ${label}` : \"Enable\"}`)}\n          </ToggleStatus>\n        </Switch>\n      </ToggleWrapper>\n    );\n  };\n}\n\nconst StyledFieldToggleGroup = styled.div`\n  margin-bottom: 8px;\n`;\n\nconst formValuesSelector = getFormValues(SETTINGS_FORM_NAME);\n\nexport function ToggleComponent({ setting }: SettingComponentProps) {\n  const settings = useSelector(formValuesSelector);\n  return (\n    <StyledFieldToggleGroup className=\"t--admin-settings-toggle\">\n      <Field\n        component={FieldToggleWithToggleText(\n          setting.toggleText,\n          setting.id,\n          !setting.name?.toLowerCase().includes(\"enable\"),\n          setting.label,\n          setting.isDisabled ? setting.isDisabled(settings) : false,\n        )}\n        name={setting.name || setting.id}\n      />\n    </StyledFieldToggleGroup>\n  );\n}\n\nexport default memo(ToggleComponent);\n","import { Text } from \"design-system\";\nimport React from \"react\";\nimport { getSettings } from \"selectors/settingsSelectors\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport type { SettingComponentProps } from \"./Common\";\nimport { FormGroup } from \"./Common\";\n\nconst TextWrapper = styled.div`\n  margin-bottom: ${(props) => props.theme.spaces[12]}px;\n`;\n\nexport default function TextComponent({ setting }: SettingComponentProps) {\n  const settingsConfig = useSelector(getSettings);\n  const value = setting.name && settingsConfig && settingsConfig[setting.name];\n  return (\n    <FormGroup setting={setting}>\n      {value && (\n        <TextWrapper>\n          <Text\n            color=\"var(--ads-v2-color-fg-muted)\"\n            data-testid=\"admin-settings-text\"\n            renderAs=\"p\"\n          >\n            {value}\n          </Text>\n        </TextWrapper>\n      )}\n    </FormGroup>\n  );\n}\n","import { SETTINGS_FORM_NAME } from \"@appsmith/constants/forms\";\nimport React from \"react\";\nimport { Button } from \"design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFormValues } from \"redux-form\";\nimport styled from \"styled-components\";\nimport { FormGroup, type SettingComponentProps } from \"./Common\";\n\nconst ButtonWrapper = styled.div`\n  width: 357px;\n\n  .styled-label {\n    padding: 0 0 0.5rem;\n  }\n\n  .admin-settings-form-group-label {\n    font-weight: var(--ads-v2-h5-font-weight);\n  }\n`;\n\nexport const StyledButton = styled(Button)`\n  display: inline-block;\n`;\n\nconst formValuesSelector = getFormValues(SETTINGS_FORM_NAME);\n\nexport default function ButtonComponent({ setting }: SettingComponentProps) {\n  const dispatch = useDispatch();\n  const settings = useSelector(formValuesSelector);\n  return (\n    <ButtonWrapper>\n      <FormGroup setting={setting}>\n        <StyledButton\n          data-testid=\"admin-settings-button\"\n          isDisabled={setting.isDisabled && setting.isDisabled(settings)}\n          kind=\"secondary\"\n          onClick={() => {\n            if (setting.action) {\n              setting.action(dispatch, settings);\n            }\n          }}\n          size=\"md\"\n        >\n          {setting.text}\n        </StyledButton>\n      </FormGroup>\n    </ButtonWrapper>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport copy from \"copy-to-clipboard\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport { Icon, Input, Text, toast, Tooltip } from \"design-system\";\n\nexport const BodyContainer = styled.div`\n  width: 100%;\n  padding: 0 0 16px;\n  .ads-v2-input__input-section-input,\n  .ads-v2-input__input-section-icon[data-has-onclick=\"true\"],\n  .ads-v2-input__input-section-icon[data-has-onclick=\"true\"] * {\n    cursor: pointer !important;\n  }\n`;\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  color: var(--ads-v2-color-fg);\n\n  .title-text {\n    font-weight: var(--ads-v2-h5-font-weight);\n  }\n\n  .help-icon {\n    margin-left: 8px;\n    cursor: pointer;\n  }\n`;\n\nfunction CopyUrlForm(props: {\n  value: string;\n  title: React.ReactNode;\n  helpText?: string;\n  tooltip?: string;\n  fieldName?: string;\n  startIcon?: string;\n  append?: boolean;\n}) {\n  const {\n    append = true,\n    fieldName,\n    helpText,\n    startIcon,\n    title,\n    tooltip,\n  } = props;\n\n  const fieldValue = useMemo(\n    () => `${append ? window.location.origin : \"\"}${props.value}`,\n    [props.value],\n  );\n\n  const handleCopy = () => {\n    copy(fieldValue);\n    toast.show(`${props.title} copied to clipboard`, {\n      kind: \"success\",\n    });\n    AnalyticsUtil.logEvent(\"URL_COPIED\", { snippet: fieldValue });\n  };\n\n  return (\n    <BodyContainer>\n      <Input\n        data-testid={`${fieldName}-input`}\n        {...(helpText ? { description: `* ${helpText}` } : {})}\n        endIcon=\"duplicate\"\n        endIconProps={{\n          className: \"copy-icon\",\n          \"data-testid\": `${fieldName}-copy-icon`,\n          onClick: handleCopy,\n        }}\n        isReadOnly\n        label={\n          <HeaderWrapper>\n            <Text\n              className=\"title-text\"\n              color=\"var(--ads-v2-color-fg)\"\n              kind=\"body-m\"\n              renderAs=\"label\"\n            >\n              {title}\n            </Text>\n            {tooltip && (\n              <Tooltip content={tooltip} placement=\"right\" trigger=\"hover\">\n                <Icon\n                  className={\"help-icon\"}\n                  color=\"var(--ads-v2-color-fg)\"\n                  name=\"question-line\"\n                  size=\"md\"\n                />\n              </Tooltip>\n            )}\n          </HeaderWrapper>\n        }\n        name={fieldName}\n        onClick={handleCopy}\n        size=\"md\"\n        {...(startIcon ? { startIcon } : {})}\n        value={fieldValue}\n      />\n    </BodyContainer>\n  );\n}\n\nexport default CopyUrlForm;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport type { Setting } from \"@appsmith/pages/AdminSettings/config/types\";\nimport Group from \"./group\";\nimport { Icon, Text } from \"design-system\";\n\nconst AccordionWrapper = styled.div`\n  margin-top: 40px;\n  max-width: 40rem;\n`;\n\nconst AccordionHeader = styled(Text)`\n  margin-bottom: ${(props) => props.theme.spaces[9]}px;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst AccordionBody = styled.div`\n  & .hide {\n    display: none;\n  }\n  & .callout-link {\n    > div {\n      margin-top: 0px;\n    }\n  }\n`;\n\nconst Line = styled.hr`\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid var(--ads-v2-color-border);\n  margin: 0 16px;\n  flex: 1 0 auto;\n}\n`;\n\ninterface AccordionProps {\n  label?: React.ReactNode;\n  settings?: Setting[];\n  isHidden?: boolean;\n  category?: string;\n  subCategory?: string;\n}\n\nexport default function Accordion({\n  category,\n  label,\n  settings,\n  subCategory,\n}: AccordionProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <AccordionWrapper>\n      {label && (\n        <AccordionHeader\n          color=\"var(--ads-v2-color-fg)\"\n          data-testid=\"admin-settings-form-group-label\"\n          kind=\"heading-s\"\n          onClick={() => setIsOpen(!isOpen)}\n          renderAs=\"label\"\n        >\n          <span>{label}</span>\n          <Line />\n          <Icon name={isOpen ? \"expand-less\" : \"expand-more\"} size=\"md\" />\n        </AccordionHeader>\n      )}\n      {isOpen && (\n        <AccordionBody>\n          <Group\n            category={category}\n            settings={settings}\n            subCategory={subCategory}\n          />\n        </AccordionBody>\n      )}\n    </AccordionWrapper>\n  );\n}\n","import React from \"react\";\nimport type { WrappedFieldMetaProps, WrappedFieldInputProps } from \"redux-form\";\nimport { Field } from \"redux-form\";\nimport { TagInput } from \"design-system-old\";\nimport { FormGroup } from \"./Common\";\nimport type { Intent } from \"constants/DefaultTheme\";\nimport type { Setting } from \"@appsmith/pages/AdminSettings/config/types\";\n\nconst renderComponent = (\n  componentProps: TagListFieldProps & {\n    meta: Partial<WrappedFieldMetaProps>;\n    input: Partial<WrappedFieldInputProps>;\n  },\n) => {\n  const setting = componentProps.setting;\n  return (\n    <FormGroup\n      className={`tag-input t--admin-settings-tag-input t--admin-settings-${\n        setting.name || setting.id\n      }`}\n      setting={setting}\n    >\n      <TagInput {...componentProps} />\n    </FormGroup>\n  );\n};\n\ninterface TagListFieldProps {\n  name: string;\n  placeholder: string;\n  type: string;\n  label?: React.ReactNode;\n  intent: Intent;\n  setting: Setting;\n  customError?: (err: string) => void;\n}\n\nfunction TagInputField(props: TagListFieldProps) {\n  return <Field component={renderComponent} {...props} />;\n}\n\nexport default TagInputField;\n","import type { SelectOptionProps } from \"design-system\";\nimport { Text, Option, Select } from \"design-system\";\nimport React, { useEffect, useState } from \"react\";\nimport type { DropdownOnSelect } from \"./SelectField\";\n\ninterface DropdownWrapperProps {\n  allowDeselection?: boolean;\n  placeholder: string;\n  input?: {\n    value?: string;\n    onChange?: (value?: string | Partial<SelectOptionProps>[]) => void;\n  };\n  options: Partial<SelectOptionProps>[];\n  isMultiSelect?: boolean;\n  onOptionSelect?: (\n    value?: string,\n    option?: Partial<SelectOptionProps>[] | Partial<SelectOptionProps>,\n  ) => void;\n  removeSelectedOption?: DropdownOnSelect;\n  selected?: Partial<SelectOptionProps> | Partial<SelectOptionProps>[];\n  showLabelOnly?: boolean;\n  labelRenderer?: (selected: Partial<SelectOptionProps>[]) => JSX.Element;\n  fillOptions?: boolean;\n  disabled?: boolean;\n  dropdownMaxHeight?: string;\n  enableSearch?: boolean;\n}\n\nfunction DropdownWrapper(props: DropdownWrapperProps) {\n  const [selectedOption, setSelectedOption] = useState<any>([\n    {\n      value: props.placeholder,\n    },\n  ]);\n\n  const onSelectHandler = (value?: any, option?: any) => {\n    if (props?.isMultiSelect) {\n      const updatedItems: Partial<SelectOptionProps>[] = [\n        ...selectedOption,\n        option,\n      ];\n      props.input && props.input.onChange && props.input.onChange(updatedItems);\n      props.onOptionSelect && props.onOptionSelect(value, updatedItems);\n    } else {\n      props.input && props.input.onChange && props.input.onChange(value);\n      props.onOptionSelect && props.onOptionSelect(value, option);\n    }\n  };\n\n  const onRemoveOptions = (value: any) => {\n    const updatedItems = selectedOption.filter(\n      (option: any) => option.value !== value,\n    );\n    props.input && props.input.onChange && props.input.onChange(updatedItems);\n    props.removeSelectedOption && props.removeSelectedOption(updatedItems);\n  };\n\n  useEffect(() => {\n    if (props.selected) {\n      setSelectedOption(props.selected);\n    } else {\n      if (props.input && props.input.value) {\n        setSelectedOption([{ value: props.input.value }]);\n      } else if (props.placeholder) {\n        setSelectedOption([{ value: props.placeholder }]);\n      }\n    }\n  }, [props.input, props.placeholder, props.selected]);\n\n  return (\n    <Select\n      defaultValue={props.isMultiSelect ? selectedOption : selectedOption[0]}\n      isDisabled={props.disabled}\n      isMultiSelect={props.isMultiSelect}\n      onDeselect={onRemoveOptions}\n      onSelect={onSelectHandler}\n      placeholder={props.placeholder}\n      showSearch={props.enableSearch}\n      value={props.isMultiSelect ? selectedOption : selectedOption[0]}\n    >\n      {props.options.map((option: Partial<SelectOptionProps>) => (\n        <Option key={option.value} value={option.id}>\n          <Text renderAs=\"p\">{option.value}</Text>\n          {option.label && <Text renderAs=\"p\">{option.label}</Text>}\n        </Option>\n      ))}\n    </Select>\n  );\n}\n\nexport default DropdownWrapper;\n","import React from \"react\";\nimport type { WrappedFieldMetaProps, WrappedFieldInputProps } from \"redux-form\";\nimport { Field } from \"redux-form\";\nimport DropdownWrapper from \"./DropdownWrapper\";\nimport type { SelectOptionProps } from \"design-system\";\n\nconst renderComponent = (\n  componentProps: SelectFieldProps & {\n    meta: Partial<WrappedFieldMetaProps>;\n    input: Partial<WrappedFieldInputProps>;\n  },\n) => {\n  return <DropdownWrapper {...componentProps} />;\n};\n\nexport type DropdownOnSelect = (value?: string, dropdownOption?: any) => void;\n\ninterface SelectFieldProps {\n  allowDeselection?: boolean;\n  isMultiSelect?: boolean;\n  name: string;\n  placeholder: string;\n  onSelect?: (val: any, option: any) => void;\n  options: Partial<SelectOptionProps>[];\n  selected?: Partial<SelectOptionProps> | Partial<SelectOptionProps>[];\n  size?: \"large\" | \"small\";\n  outline?: boolean;\n  removeSelectedOption?: DropdownOnSelect;\n  showLabelOnly?: boolean;\n  labelRenderer?: (selected: Partial<SelectOptionProps>[]) => JSX.Element;\n  fillOptions?: boolean;\n  disabled?: boolean;\n  dropdownMaxHeight?: string;\n  enableSearch?: boolean;\n}\n\nexport function SelectField(props: SelectFieldProps) {\n  return (\n    <Field\n      allowDeselection={props.allowDeselection}\n      component={renderComponent}\n      disabled={props.disabled}\n      dropdownMaxHeight={props.dropdownMaxHeight}\n      enableSearch={props.enableSearch}\n      fillOptions={props.fillOptions}\n      isMultiSelect={props.isMultiSelect}\n      labelRenderer={props.labelRenderer}\n      name={props.name}\n      onOptionSelect={props.onSelect}\n      options={props.options}\n      outline={props.outline}\n      placeholder={props.placeholder}\n      removeSelectedOption={props.removeSelectedOption}\n      selected={props.selected}\n      showLabelOnly={props.showLabelOnly}\n      size={props.size}\n    />\n  );\n}\n\nexport default SelectField;\n","import React from \"react\";\nimport type { SettingComponentProps } from \"./Common\";\nimport { FormGroup } from \"./Common\";\nimport SelectField from \"components/editorComponents/form/fields/SelectField\";\nimport type { SelectOptionProps } from \"design-system\";\n\nexport default function DropDown(\n  props: {\n    dropdownOptions: Partial<SelectOptionProps>[];\n  } & SettingComponentProps,\n) {\n  const { dropdownOptions, setting } = props;\n\n  return (\n    <FormGroup\n      className={`t--admin-settings-dropdown t--admin-settings-${\n        setting.name || setting.id\n      }`}\n      setting={setting}\n    >\n      <SelectField\n        fillOptions\n        name={setting.id}\n        options={dropdownOptions}\n        outline={false}\n        placeholder=\"Select an option\"\n        size=\"large\"\n      />\n    </FormGroup>\n  );\n}\n","import React, { memo } from \"react\";\nimport type { WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { Field, getFormValues } from \"redux-form\";\nimport styled from \"styled-components\";\nimport { FormGroup, type SettingComponentProps } from \"./Common\";\nimport type { FormTextFieldProps } from \"components/utils/ReduxFormTextField\";\nimport { Checkbox } from \"design-system\";\nimport { useSelector } from \"react-redux\";\nimport { SETTINGS_FORM_NAME } from \"@appsmith/constants/forms\";\nimport { isTenantConfig } from \"@appsmith/utils/adminSettingsHelpers\";\n\nconst CheckboxWrapper = styled.div`\n  display: grid;\n  margin-bottom: 8px;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 16px;\n`;\n\ninterface CheckboxProps {\n  label?: React.ReactNode;\n  id?: string;\n  isDisabled?: boolean;\n  isFeatureEnabled?: boolean;\n  text: string;\n  labelSuffix?: React.ReactElement;\n  isPropertyDisabled?: boolean;\n}\n\nfunction FieldCheckboxWithCheckboxText(props: CheckboxProps) {\n  return function FieldCheckbox(\n    componentProps: FormTextFieldProps & {\n      meta: Partial<WrappedFieldMetaProps>;\n      input: Partial<WrappedFieldInputProps>;\n    },\n  ) {\n    const { isPropertyDisabled, labelSuffix } = props;\n    const val = componentProps.input.value;\n\n    function onCheckbox(value?: boolean) {\n      const CheckboxValue = isPropertyDisabled ? !value : value;\n      componentProps.input.onChange &&\n        componentProps.input.onChange(CheckboxValue);\n      componentProps.input.onBlur && componentProps.input.onBlur(CheckboxValue);\n    }\n    /* Value = !ENV_VARIABLE\n    This has been done intentionally as naming convention used contains the word disabled but the UI should show the button enabled by default.\n    */\n    return (\n      <CheckboxWrapper>\n        <Checkbox\n          data-testid={props.id}\n          defaultSelected={isPropertyDisabled ? !val : val}\n          isDisabled={props.isDisabled}\n          onChange={onCheckbox}\n          value={props.id}\n        >\n          {props.text}\n        </Checkbox>\n        <div>{labelSuffix}</div>\n      </CheckboxWrapper>\n    );\n  };\n}\n\nconst StyledFieldCheckboxGroup = styled.div`\n  .styled-label {\n    padding: 0 0 0.5rem;\n  }\n\n  .admin-settings-form-group-label {\n    font-weight: var(--ads-v2-h5-font-weight);\n  }\n`;\n\nconst formValuesSelector = getFormValues(SETTINGS_FORM_NAME);\n\nexport function CheckboxComponent({ setting }: SettingComponentProps) {\n  const settings: Record<string, any> = useSelector(formValuesSelector);\n\n  return (\n    <StyledFieldCheckboxGroup>\n      <FormGroup\n        className={`t--admin-settings-checkbox t--admin-settings-${\n          setting.name || setting.id\n        }`}\n        setting={setting}\n      >\n        <Field\n          component={FieldCheckboxWithCheckboxText({\n            label: setting.label,\n            text: setting.text || \"\",\n            id: setting.id,\n            isDisabled: setting.isDisabled && setting.isDisabled(settings),\n            isFeatureEnabled: setting.isFeatureEnabled,\n            labelSuffix: setting.textSuffix,\n            isPropertyDisabled: isTenantConfig(setting.id)\n              ? false\n              : !setting.name?.toLowerCase().includes(\"enable\"),\n          })}\n          name={setting.name}\n        />\n      </FormGroup>\n    </StyledFieldCheckboxGroup>\n  );\n}\n\nexport default memo(CheckboxComponent);\n","import React from \"react\";\nimport styled from \"styled-components\";\n// Note: This component is only for the input fields which donot have the\n// popover error tooltip. This is also only for Appsmith components\n// Not to be used in widgets / canvas\n\nconst StyledError = styled.span<{ show: boolean }>`\n  text-align: left;\n  color: var(--ads-v2-color-fg-error);\n  font-size: var(--ads-font-size-3);\n  opacity: ${(props) => (props.show ? 1 : 0)};\n  display: block;\n  position: relative;\n  margin-top: var(--ads-spaces-1);\n`;\n\ntype FormFieldErrorProps = {\n  error?: string;\n  className?: string;\n};\n\nexport function FormFieldError(props: FormFieldErrorProps) {\n  return (\n    <StyledError\n      className={props.className ? props.className : undefined}\n      show={!!props.error}\n    >\n      {props.error || \"&nbsp;\"}\n    </StyledError>\n  );\n}\n\nexport default FormFieldError;\n","import React, { useEffect, useState } from \"react\";\nimport type { ReactElement } from \"react\";\nimport { FieldError } from \"design-system-old\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport { FormGroup, type SettingComponentProps } from \"./Common\";\nimport type { WrappedFieldInputProps, WrappedFieldMetaProps } from \"redux-form\";\nimport { Field } from \"redux-form\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { Position } from \"@blueprintjs/core\";\nimport type { RadioProps } from \"design-system\";\nimport { Icon, Link, Radio, RadioGroup, Tag, Text } from \"design-system\";\n\ntype RadioOption = {\n  node?: ReactElement;\n  nodeLabel?: string;\n  nodeInputPath?: string;\n  nodeParentClass?: string;\n  badge?: string;\n  tooltip?: {\n    icon: string;\n    text: string;\n    linkText: string;\n    link: string;\n  };\n  label: string;\n} & RadioProps;\nexport interface RadioOptionProps {\n  options: RadioOption[];\n}\n\nconst StyledTag = styled(Tag)<{ selected?: boolean }>`\n  /* \n  TODO: handle the colors on the Tag with the new component which will get introduced\n  background-color: ${(props) =>\n    props.selected ? \"var(--ads-v2-color-bg-warning)\" : \"inital\"}; */\n  margin-left: 4px;\n  /* .ads-v2-text {\n    color: ${(props) =>\n    props.selected ? \"var(--ads-v2-color-fg-warning)\" : \"initial\"};\n  }*/\n`;\n\nconst TooltipContent = styled.div`\n  width: 300px;\n  padding: 12px;\n\n  a {\n    justify-content: flex-start;\n    padding: 0;\n    margin-top: 4px;\n    text-decoration: underline;\n  }\n\n  .tooltip-text {\n    line-height: 1.17;\n    margin-bottom: 8px;\n  }\n`;\n\nconst SuffixWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  .icon {\n    margin-left: 4px;\n\n    > svg {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst NodeWrapper = styled.div`\n  margin-left: 27px;\n  margin-top: 8px;\n`;\n\nconst PopoverStyles = createGlobalStyle`\n  .bp3-popover, .bp3-popover2 {\n    box-shadow: none;\n    border-radius: var(--ads-v2-border-radius);\n    border: 1px solid var(--ads-v2-color-border);\n\n    .bp3-popover2-content {\n      border-radius: var(--ads-v2-border-radius);\n    }\n  }\n`;\n\nconst StyledFormGroup = styled(FormGroup)`\n  .styled-label {\n    padding: 0 0 0.5rem;\n  }\n\n  .admin-settings-form-group-label {\n    font-weight: var(--ads-v2-h5-font-weight);\n  }\n`;\n\ntype RadioGroupProps = SettingComponentProps;\n\nfunction RadioFieldWrapper(\n  componentProps: {\n    meta: Partial<WrappedFieldMetaProps>;\n    input: Partial<WrappedFieldInputProps>;\n  } & RadioOptionProps,\n) {\n  function onChangeHandler(value: string) {\n    setValue(value);\n    componentProps.input.onChange &&\n      componentProps.input.onChange({\n        value,\n        additionalData: componentProps.input.value.additionalData,\n      });\n  }\n\n  function onInputNodeChangeHandler(value?: any) {\n    componentProps.input.onChange &&\n      componentProps.input.onChange({\n        value: componentProps.input.value.value,\n        additionalData: value,\n      });\n    componentProps.input.onBlur &&\n      componentProps.input.onBlur({\n        value: componentProps.input.value.value,\n        additionalData: value,\n      });\n  }\n\n  const [value, setValue] = useState<string>(\"\");\n\n  useEffect(() => {\n    setValue(componentProps.input.value.value);\n  }, [componentProps.input.value]);\n\n  return (\n    <RadioGroup onChange={onChangeHandler as any} value={value}>\n      <PopoverStyles />\n      {componentProps.options.map((item) => {\n        const isSelected = item.value === value;\n\n        return (\n          <div key={item.value}>\n            <Radio value={item.value}>\n              {item.label}\n              <SuffixWrapper>\n                {item.badge && (\n                  <StyledTag isClosable={false} selected={isSelected} size=\"sm\">\n                    {item.badge}\n                  </StyledTag>\n                )}\n                {item.tooltip && (\n                  <Popover2\n                    className=\"embed-settings-popover\"\n                    content={\n                      <TooltipContent>\n                        <Text\n                          className=\"tooltip-text\"\n                          color=\"var(--ads-v2-color-fg)\"\n                          kind=\"action-m\"\n                          renderAs=\"p\"\n                        >\n                          {item.tooltip.text}\n                        </Text>\n                        <Link\n                          endIcon=\"arrow-right-line\"\n                          kind=\"primary\"\n                          target=\"_blank\"\n                          to={item.tooltip.link}\n                        >\n                          {item.tooltip.linkText}\n                        </Link>\n                      </TooltipContent>\n                    }\n                    interactionKind=\"hover\"\n                    position={Position.RIGHT}\n                  >\n                    <Icon className=\"icon\" name={item.tooltip.icon} size=\"md\" />\n                  </Popover2>\n                )}\n              </SuffixWrapper>\n            </Radio>\n            {item.node && isSelected && item.nodeInputPath && (\n              <NodeWrapper className={item.nodeParentClass}>\n                <Text\n                  color=\"var(--ads-v2-color-fg)\"\n                  kind=\"body-s\"\n                  renderAs=\"span\"\n                >\n                  {item.nodeLabel}\n                </Text>\n                {React.cloneElement(item.node, {\n                  [item.nodeInputPath]: {\n                    value: componentProps.input.value.additionalData,\n                    onChange: onInputNodeChangeHandler,\n                  },\n                })}\n                {componentProps.meta.error && (\n                  <FieldError error={componentProps.meta.error} />\n                )}\n              </NodeWrapper>\n            )}\n          </div>\n        );\n      })}\n    </RadioGroup>\n  );\n}\n\nexport default function RadioField({ setting }: RadioGroupProps) {\n  const controlTypeProps = setting.controlTypeProps as RadioOptionProps;\n\n  return (\n    <StyledFormGroup\n      className={`t--admin-settings-radio t--admin-settings-${\n        setting.name || setting.id\n      }`}\n      setting={setting}\n    >\n      <Field\n        component={RadioFieldWrapper}\n        {...controlTypeProps}\n        format={setting.format}\n        name={setting.name}\n        parse={setting.parse}\n      />\n    </StyledFormGroup>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport type { Setting } from \"@appsmith/pages/AdminSettings/config/types\";\nimport { SettingTypes } from \"@appsmith/pages/AdminSettings/config/types\";\nimport TextInput from \"./TextInput\";\nimport Toggle from \"./Toggle\";\nimport TextComponent from \"./Text\";\nimport Button from \"./Button\";\nimport { getFormValues } from \"redux-form\";\nimport { SETTINGS_FORM_NAME } from \"@appsmith/constants/forms\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createMessage, LEARN_MORE } from \"@appsmith/constants/messages\";\nimport { Callout, Text } from \"design-system\";\nimport CopyUrlForm from \"./CopyUrlForm\";\nimport Accordion from \"./Accordion\";\nimport TagInputField from \"./TagInputField\";\nimport Dropdown from \"./Dropdown\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Checkbox from \"./Checkbox\";\nimport Radio from \"./Radio\";\nimport { getTypographyByKey } from \"constants/DefaultTheme\";\nimport classNames from \"classnames\";\n\ninterface GroupProps {\n  name?: string;\n  settings?: Setting[];\n  isHidden?: boolean;\n  category?: string;\n  subCategory?: string;\n}\n\nconst GroupWrapper = styled.div`\n  position: relative;\n  z-index: 1;\n  &.hide {\n    display: none;\n  }\n`;\n\nconst GroupHeader = styled(Text)`\n  margin-bottom: ${(props) => props.theme.spaces[9]}px;\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 8px;\n`;\n\nconst GroupBody = styled.div`\n  & .hide {\n    display: none;\n  }\n  & .callout-link {\n    > div {\n      margin-top: 0px;\n      margin-bottom: 12px;\n    }\n  }\n  &&&& {\n    // TagInput in design system has a right margin\n    .tag-input > div {\n      margin-right: 0;\n    }\n\n    .tag-input .${Classes.TAG_INPUT} {\n      box-shadow: none;\n      border-radius: var(--ads-v2-border-radius);\n      border: 1px solid var(--ads-v2-color-border);\n    }\n\n    .tag-input .${Classes.TAG} {\n      color: var(--ads-v2-color-fg);\n      background-color: var(--ads-v2-color-bg-subtle);\n      border-radius: var(--ads-v2-border-radius);\n      ${(props) => getTypographyByKey(props, \"h5\")}\n      // Cursor on close icon need to be a pointer\n      svg:hover {\n        cursor: pointer;\n      }\n    }\n\n    .tag-input .${Classes.TAG_INPUT}.${Classes.ACTIVE} {\n      border: 1px solid var(--ads-v2-color-border-emphasis-plus);\n    }\n  }\n\n  .t--admin-settings-toggle {\n    width: fit-content;\n    min-width: 260px;\n  }\n\n  label {\n    user-select: none;\n  }\n`;\n\nconst formValuesSelector = getFormValues(SETTINGS_FORM_NAME);\n\nexport default function Group({\n  category,\n  name,\n  settings,\n  subCategory,\n}: GroupProps) {\n  const state = useSelector((state) => state);\n  const calloutDispatch = useDispatch();\n\n  return (\n    <GroupWrapper data-testid=\"admin-settings-group-wrapper\">\n      {name && (\n        <GroupHeader\n          color=\"var(--ads-v2-color-fg-emphasis-plus)\"\n          data-testid=\"admin-settings-form-group-label\"\n          renderAs=\"span\"\n        >\n          {createMessage(() => name)}\n        </GroupHeader>\n      )}\n      <GroupBody>\n        {settings &&\n          settings.map((setting) => {\n            if (\n              (setting.isVisible &&\n                !setting.isVisible(formValuesSelector(state))) ||\n              (setting.category !== category &&\n                setting.category !== subCategory)\n            ) {\n              return null;\n            }\n            switch (setting.controlType) {\n              case SettingTypes.RADIO:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group-radio\"\n                    key={setting.name || setting.id}\n                  >\n                    <Radio setting={setting} />\n                  </div>\n                );\n              case SettingTypes.TEXTINPUT:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group-text-input\"\n                    key={setting.name || setting.id}\n                  >\n                    <TextInput setting={setting} />\n                  </div>\n                );\n              case SettingTypes.TOGGLE:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group-toggle\"\n                    key={setting.name || setting.id}\n                  >\n                    <Toggle setting={setting} />\n                  </div>\n                );\n              case SettingTypes.CHECKBOX:\n                return (\n                  <div\n                    className={`admin-settings-group-${\n                      setting.name || setting.id\n                    } ${setting.isHidden ? \"hide\" : \"\"}`}\n                    data-testid=\"admin-settings-group-checkbox\"\n                    key={setting.name || setting.id}\n                  >\n                    <Checkbox setting={setting} />\n                  </div>\n                );\n              case SettingTypes.CALLOUT:\n                return (\n                  <div\n                    className={classNames({\n                      \"t--read-more-link mb-2 callout-link\": true,\n                      hide:\n                        setting.isHidden ||\n                        (setting.isVisible &&\n                          !setting.isVisible(formValuesSelector(state))),\n                    })}\n                    data-testid=\"admin-settings-group-link\"\n                    key={setting.name || setting.id}\n                  >\n                    <Callout\n                      kind={setting?.calloutType || \"info\"}\n                      links={\n                        setting.url || setting.action\n                          ? [\n                              {\n                                children: createMessage(LEARN_MORE),\n                                ...(setting.url && { to: setting.url }),\n                                ...(setting.action && {\n                                  onClick: () => {\n                                    if (setting.action) {\n                                      setting.action(\n                                        calloutDispatch,\n                                      ) as unknown as React.MouseEventHandler<HTMLElement>;\n                                    }\n                                  },\n                                }),\n                              },\n                            ]\n                          : []\n                      }\n                    >\n                      {setting.label || \"\"}\n                    </Callout>\n                  </div>\n                );\n              case SettingTypes.TEXT:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group-text\"\n                    key={setting.name || setting.id}\n                  >\n                    <TextComponent setting={setting} />\n                  </div>\n                );\n              case SettingTypes.BUTTON:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group-button\"\n                    key={setting.name || setting.id}\n                  >\n                    <Button setting={setting} />\n                  </div>\n                );\n              case SettingTypes.GROUP:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-group\"\n                    key={setting.name || setting.id}\n                  >\n                    <Group\n                      category={category}\n                      name={setting.name}\n                      settings={setting.children}\n                      subCategory={subCategory}\n                    />\n                  </div>\n                );\n              case SettingTypes.UNEDITABLEFIELD:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-uneditable-field\"\n                    key={setting.name || setting.id}\n                  >\n                    <CopyUrlForm\n                      fieldName={setting.fieldName || \"\"}\n                      helpText={setting.helpText}\n                      title={setting.label || \"\"}\n                      tooltip={setting.tooltip}\n                      value={setting.value || \"\"}\n                    />\n                  </div>\n                );\n              case SettingTypes.TAGINPUT:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"tag-input\"}\n                    data-testid=\"admin-settings-tag-input\"\n                    key={setting.name || setting.id}\n                  >\n                    <TagInputField\n                      data-testid=\"t--tag-input\"\n                      intent=\"success\"\n                      label={setting.label}\n                      name={setting.name || setting.id}\n                      placeholder=\"\"\n                      setting={setting}\n                      type=\"text\"\n                    />\n                  </div>\n                );\n              case SettingTypes.ACCORDION:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-accordion\"\n                    key={setting.name || setting.id}\n                  >\n                    <Accordion\n                      category={category}\n                      label={setting.label}\n                      settings={setting.advanced}\n                      subCategory={subCategory}\n                    />\n                  </div>\n                );\n              case SettingTypes.DROPDOWN:\n                return (\n                  <div\n                    className={setting.isHidden ? \"hide\" : \"\"}\n                    data-testid=\"admin-settings-dropdown\"\n                    key={setting.name || setting.id}\n                  >\n                    {setting.dropdownOptions && (\n                      <Dropdown\n                        dropdownOptions={setting.dropdownOptions}\n                        setting={setting}\n                      />\n                    )}\n                  </div>\n                );\n            }\n          })}\n      </GroupBody>\n    </GroupWrapper>\n  );\n}\n","import React from \"react\";\nimport { hexToRgba } from \"design-system-old\";\nimport { Button, Icon, Spinner, Text } from \"design-system\";\nimport {\n  getIsRestartFailed,\n  getRestartingState,\n} from \"selectors/settingsSelectors\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {\n  createMessage,\n  RETRY_BUTTON,\n  RESTART_BANNER_BODY,\n  RESTART_BANNER_HEADER,\n  RESTART_ERROR_BODY,\n  RESTART_ERROR_HEADER,\n} from \"@appsmith/constants/messages\";\nimport { Colors } from \"constants/Colors\";\nimport { retryServerRestart } from \"@appsmith/actions/settingsAction\";\nimport { useDispatch } from \"react-redux\";\n\nconst RestartBannerWrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 0;\n  z-index: 20;\n  overflow: auto;\n`;\n\nconst OverlayBackdrop = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 0;\n  /* TODO: replaced hexToRgba (Albin) */\n  background-color: ${hexToRgba(Colors.COD_GRAY, 0.7)};\n  overflow: auto;\n  pointer-events: none;\n  user-select: none;\n  z-index: 20;\n`;\n\nconst RestartContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: ${(props) => props.theme.settings.footerHeight}px;\n  z-index: 20;\n  padding: 0px ${(props) => props.theme.spaces[11]}px 0px 276px;\n  background: var(--ads-v2-color-bg);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  pointer-events: all;\n  user-select: text;\n`;\n\nconst RestartMessageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  pointer-events: none;\n`;\n\nconst HeaderContents = styled.div`\n  display: flex;\n  align-items: center;\n  padding-bottom: ${(props) => props.theme.spaces[3]}px;\n  gap: 8px;\n`;\n\nconst Heading = styled(Text)``;\n\nconst AppIconWrapper = styled.div`\n  background: var(--ads-v2-color-bg-error);\n  border-radius: 50%;\n  padding: 4px;\n  margin-right: 12px;\n\n  svg {\n    width: 18px;\n    height: 18px;\n\n    path {\n      fill: var(--ads-v2-color-fg-on-error);\n    }\n  }\n`;\n\nfunction Header() {\n  const isRestartFailed = useSelector(getIsRestartFailed);\n  return (\n    <HeaderContents>\n      {isRestartFailed ? (\n        <AppIconWrapper>\n          <Icon name=\"server-line\" />\n        </AppIconWrapper>\n      ) : (\n        <Spinner\n          iconProps={{ color: \"var(--ads-v2-color-bg-brand)\" }}\n          size=\"lg\"\n        />\n      )}\n      <Heading kind=\"heading-m\" renderAs=\"p\">\n        {isRestartFailed\n          ? createMessage(RESTART_ERROR_HEADER)\n          : createMessage(RESTART_BANNER_HEADER)}\n      </Heading>\n    </HeaderContents>\n  );\n}\n\nexport default function RestartBanner() {\n  const isRestartFailed = useSelector(getIsRestartFailed);\n  const isRestarting = useSelector(getRestartingState);\n  const dispatch = useDispatch();\n  return isRestarting ? (\n    <RestartBannerWrapper className=\"t--admin-settings-restart-notice\">\n      <OverlayBackdrop />\n      <RestartContainer>\n        <RestartMessageWrapper>\n          <Header />\n          <Text renderAs=\"p\">\n            {isRestartFailed\n              ? createMessage(RESTART_ERROR_BODY)\n              : createMessage(RESTART_BANNER_BODY)}\n          </Text>\n        </RestartMessageWrapper>\n        {isRestartFailed && (\n          <Button\n            data-testid=\"btn-refresh\"\n            onClick={() => dispatch(retryServerRestart())}\n            size=\"md\"\n          >\n            {createMessage(RETRY_BUTTON)}\n          </Button>\n        )}\n      </RestartContainer>\n    </RestartBannerWrapper>\n  ) : null;\n}\n","import React from \"react\";\nimport {\n  RESET_BUTTON,\n  SAVE_AND_REFRESH_BUTTON,\n  SAVE_AND_RESTART_BUTTON,\n  SAVE_BUTTON,\n  createMessage,\n} from \"@appsmith/constants/messages\";\nimport { Button } from \"design-system\";\nimport styled from \"styled-components\";\n\nconst SettingsButtonWrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: ${(props) => props.theme.settings.footerHeight}px;\n  padding: ${(props) => props.theme.spaces[11]}px 20px 24px\n    ${(props) =>\n      props.theme.homePage.leftPane.leftPadding +\n      props.theme.homePage.leftPane.width +\n      props.theme.spaces[8]}px;\n  /* box-shadow: ${(props) => props.theme.settings.footerShadow}; */\n  border-top: 1px solid var(--ads-v2-color-border);\n  z-index: 2;\n  background-color: var(--ads-v2-color-bg);\n  display: flex;\n  flex-direction: row-reverse;\n  gap: 16px;\n  align-items: center;\n`;\n\ninterface SaveAdminSettingsProps {\n  isOnlyTenantConfig?: boolean;\n  isSaving?: boolean;\n  needsRefresh?: boolean;\n  onSave?: () => void;\n  onClear?: () => void;\n  settings: Record<string, string>;\n  valid: boolean;\n  updatedTenantSettings?: string[];\n}\n\nconst saveAdminSettings = (props: SaveAdminSettingsProps) => {\n  const {\n    isOnlyTenantConfig = false,\n    isSaving,\n    needsRefresh = false,\n    onClear,\n    onSave,\n    settings,\n    updatedTenantSettings,\n    valid,\n  } = props;\n\n  let saveButtonText = SAVE_AND_RESTART_BUTTON;\n\n  if (needsRefresh) {\n    saveButtonText = SAVE_AND_REFRESH_BUTTON;\n  } else if (\n    isOnlyTenantConfig ||\n    (updatedTenantSettings?.length === Object.keys(settings).length &&\n      updatedTenantSettings?.length !== 0)\n  ) {\n    saveButtonText = SAVE_BUTTON;\n  }\n\n  return (\n    <SettingsButtonWrapper>\n      <Button\n        className=\"t--admin-settings-save-button\"\n        isDisabled={Object.keys(settings).length == 0 || !valid}\n        isLoading={isSaving}\n        onClick={onSave}\n        size=\"md\"\n      >\n        {createMessage(saveButtonText)}\n      </Button>\n      <Button\n        className=\"t--admin-settings-reset-button\"\n        isDisabled={Object.keys(settings).length == 0}\n        kind=\"secondary\"\n        onClick={onClear}\n        size=\"md\"\n      >\n        {createMessage(RESET_BUTTON)}\n      </Button>\n    </SettingsButtonWrapper>\n  );\n};\nexport default saveAdminSettings;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Callout, Text } from \"design-system\";\nimport {\n  createMessage,\n  DANGER_ZONE,\n  DISCONNECT_AUTH_METHOD,\n  DISCONNECT_CONFIRMATION,\n} from \"@appsmith/constants/messages\";\n\nexport const Container = styled.div`\n  width: 100%;\n  padding: 16px 0;\n\n  > *:not(:first-child) {\n    margin: 8px 0;\n  }\n`;\n\nexport function DisconnectService(props: {\n  disconnect: () => void;\n  subHeader: string;\n  warning: string;\n}) {\n  const [warnDisconnectAuth, setWarnDisconnectAuth] = useState(false);\n  const [disconnectCalled, setDisconnectCalled] = useState(false);\n\n  const callDisconnect = () => {\n    if (!disconnectCalled) {\n      setDisconnectCalled(true);\n      props.disconnect();\n    }\n  };\n\n  return (\n    <Container>\n      <Text color=\"var(--ads-v2-color-fg-error)\" kind=\"heading-l\" renderAs=\"h2\">\n        {createMessage(DANGER_ZONE)}\n      </Text>\n      <Text renderAs=\"h3\">{props.subHeader}</Text>\n      <Callout kind=\"error\">{props.warning}</Callout>\n      <Button\n        data-testid=\"disconnect-service-button\"\n        isLoading={disconnectCalled}\n        kind=\"error\"\n        onClick={() =>\n          warnDisconnectAuth ? callDisconnect() : setWarnDisconnectAuth(true)\n        }\n        size=\"md\"\n      >\n        {warnDisconnectAuth\n          ? createMessage(DISCONNECT_CONFIRMATION)\n          : createMessage(DISCONNECT_AUTH_METHOD)}\n      </Button>\n    </Container>\n  );\n}\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { saveSettings } from \"@appsmith/actions/settingsAction\";\nimport { SETTINGS_FORM_NAME } from \"@appsmith/constants/forms\";\nimport { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\nimport _ from \"lodash\";\nimport ProductUpdatesModal from \"pages/Applications/ProductUpdatesModal\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport type { RouteComponentProps } from \"react-router\";\nimport { useParams, withRouter } from \"react-router\";\nimport type { AppState } from \"@appsmith/reducers\";\nimport type { InjectedFormProps } from \"redux-form\";\nimport { formValueSelector, reduxForm } from \"redux-form\";\nimport {\n  getSettings,\n  getSettingsSavingState,\n  getShowReleaseNotes,\n} from \"selectors/settingsSelectors\";\nimport Group from \"./FormGroup/group\";\nimport RestartBanner from \"./RestartBanner\";\nimport SaveAdminSettings from \"./SaveSettings\";\nimport { DisconnectService } from \"./DisconnectService\";\nimport AdminConfig from \"@appsmith/pages/AdminSettings/config\";\nimport type { Setting } from \"@appsmith/pages/AdminSettings/config/types\";\nimport { SettingTypes } from \"@appsmith/pages/AdminSettings/config/types\";\nimport {\n  createMessage,\n  DISCONNECT_AUTH_ERROR,\n  DISCONNECT_SERVICE_SUBHEADER,\n  DISCONNECT_SERVICE_WARNING,\n  MANDATORY_FIELDS_ERROR,\n} from \"@appsmith/constants/messages\";\nimport {\n  isTenantConfig,\n  saveAllowed,\n} from \"@appsmith/utils/adminSettingsHelpers\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport {\n  Wrapper,\n  BottomSpace,\n  HeaderWrapper,\n  SettingsHeader,\n  SettingsSubHeader,\n  SettingsFormWrapper,\n} from \"./components\";\nimport { BackButton } from \"components/utils/helperComponents\";\nimport { toast } from \"design-system\";\nimport {\n  getIsFormLoginEnabled,\n  getThirdPartyAuths,\n} from \"@appsmith/selectors/tenantSelectors\";\nimport { updateTenantConfig } from \"@appsmith/actions/tenantActions\";\nimport { tenantConfigConnection } from \"@appsmith/constants/tenantConstants\";\n\ninterface FormProps {\n  settings: Record<string, string>;\n  settingsConfig: Record<string, string | boolean>;\n  isSaving: boolean;\n  showReleaseNotes: boolean;\n}\n\nfunction getSettingLabel(name = \"\") {\n  return name.replace(/-/g, \"\");\n}\n\nfunction getSettingDetail(category: string, subCategory: string) {\n  return AdminConfig.getCategoryDetails(category, subCategory);\n}\n\nfunction getSettingsConfig(category: string, subCategory?: string) {\n  return AdminConfig.get(subCategory ?? category);\n}\n\nexport function SettingsForm(\n  props: InjectedFormProps & RouteComponentProps & FormProps,\n) {\n  const params = useParams() as any;\n  const { category, selected: subCategory } = params;\n  const settingsDetails = getSettingsConfig(category, subCategory);\n  const { settings, settingsConfig } = props;\n  const details = getSettingDetail(category, subCategory);\n  const dispatch = useDispatch();\n  const isSavable = AdminConfig.savableCategories.includes(\n    subCategory ?? category,\n  );\n  const pageTitle = getSettingLabel(\n    details?.title || (subCategory ?? category),\n  );\n  const isFormLoginEnabled = useSelector(getIsFormLoginEnabled);\n  const socialLoginList = useSelector(getThirdPartyAuths);\n\n  const updatedTenantSettings = useMemo(\n    () => Object.keys(props.settings).filter((s) => isTenantConfig(s)),\n    [props.settings],\n  );\n\n  // Is there a non-tenant (env) config in this category of settings?\n  const isOnlyTenantConfig = !settingsDetails.find(\n    (s) =>\n      s.category === (subCategory || category) &&\n      s.controlType != SettingTypes.CALLOUT &&\n      !isTenantConfig(s.id),\n  );\n\n  const saveChangedSettings = () => {\n    const settingsKeyLength = Object.keys(props.settings).length;\n    const isOnlyEnvSettings =\n      updatedTenantSettings.length === 0 && settingsKeyLength !== 0;\n    const isEnvAndTenantSettings =\n      updatedTenantSettings.length !== 0 &&\n      updatedTenantSettings.length !== settingsKeyLength;\n    if (isOnlyEnvSettings) {\n      // only env settings\n      dispatch(saveSettings(props.settings));\n    } else {\n      // only tenant settings\n      const config: any = {};\n      for (const each in props.settings) {\n        if (tenantConfigConnection.includes(each)) {\n          config[each] = props.settings[each];\n        }\n      }\n      dispatch(\n        updateTenantConfig({\n          tenantConfiguration: config,\n          isOnlyTenantSettings: !isEnvAndTenantSettings,\n          needsRefresh: details?.needsRefresh,\n        }),\n      );\n      // both env and tenant settings\n      if (isEnvAndTenantSettings) {\n        const filteredSettings = Object.keys(props.settings)\n          .filter((key) => !isTenantConfig(key))\n          .reduce((obj, key) => {\n            return Object.assign(obj, {\n              [key]: props.settings[key],\n            });\n          }, {});\n        dispatch(saveSettings(filteredSettings));\n      }\n    }\n  };\n\n  const onSave = () => {\n    if (checkMandatoryFileds()) {\n      if (saveAllowed(props.settings, isFormLoginEnabled, socialLoginList)) {\n        AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_SAVE\", {\n          method: pageTitle,\n        });\n        saveChangedSettings();\n      } else {\n        saveBlocked();\n      }\n    } else {\n      AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_ERROR\", {\n        error: createMessage(MANDATORY_FIELDS_ERROR),\n      });\n      toast.show(createMessage(MANDATORY_FIELDS_ERROR), {\n        kind: \"error\",\n      });\n    }\n  };\n\n  const checkMandatoryFileds = () => {\n    const requiredFields = settingsDetails.filter((eachSetting) => {\n      const isInitialSettingBlank =\n        settingsConfig[eachSetting.id]?.toString().trim() === \"\" ||\n        settingsConfig[eachSetting.id] === undefined;\n      const isInitialSettingNotBlank = settingsConfig[eachSetting.id];\n      const isNewSettingBlank =\n        settings[eachSetting.id]?.toString()?.trim() === \"\";\n      const isNewSettingNotBlank = !settings[eachSetting.id];\n\n      if (\n        eachSetting.isRequired &&\n        !eachSetting.isHidden &&\n        ((isInitialSettingBlank && isNewSettingNotBlank) ||\n          (isInitialSettingNotBlank && isNewSettingBlank))\n      ) {\n        return eachSetting.id;\n      }\n    });\n\n    return !(requiredFields.length > 0);\n  };\n\n  const onClear = (event?: React.FocusEvent<any, any>) => {\n    if (event?.type === \"click\") {\n      AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_RESET\", {\n        method: pageTitle,\n      });\n    }\n    _.forEach(props.settingsConfig, (value, settingName) => {\n      const setting = AdminConfig.settingsMap[settingName];\n      if (\n        setting &&\n        (setting.controlType == SettingTypes.TOGGLE ||\n          setting.controlType == SettingTypes.CHECKBOX)\n      ) {\n        const settingsStr = props.settingsConfig[settingName].toString();\n        if (settingName.toLowerCase().includes(\"enable\")) {\n          props.settingsConfig[settingName] =\n            settingsStr === \"\" || settingsStr === \"true\";\n        } else {\n          props.settingsConfig[settingName] = settingsStr === \"true\";\n        }\n      }\n    });\n    props.initialize(props.settingsConfig);\n  };\n\n  useEffect(onClear, [subCategory]);\n\n  const onReleaseNotesClose = useCallback(() => {\n    dispatch({\n      type: ReduxActionTypes.TOGGLE_RELEASE_NOTES,\n      payload: false,\n    });\n  }, []);\n\n  const saveBlocked = () => {\n    AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_ERROR\", {\n      error: createMessage(DISCONNECT_AUTH_ERROR),\n    });\n    toast.show(createMessage(DISCONNECT_AUTH_ERROR), {\n      kind: \"error\",\n    });\n  };\n\n  const disconnect = (currentSettings: AdminConfig) => {\n    const updatedSettings: any = {};\n    const connectedMethodsCount =\n      socialLoginList.length + (isFormLoginEnabled ? 1 : 0);\n    if (connectedMethodsCount >= 2) {\n      _.forEach(currentSettings, (setting: Setting) => {\n        if (\n          !setting.isHidden &&\n          [\n            SettingTypes.CALLOUT,\n            SettingTypes.ACCORDION,\n            SettingTypes.UNEDITABLEFIELD,\n          ].indexOf(setting.controlType) === -1\n        ) {\n          updatedSettings[setting.id] = \"\";\n        }\n      });\n      dispatch(saveSettings(updatedSettings));\n      AnalyticsUtil.logEvent(\"ADMIN_SETTINGS_DISCONNECT_AUTH_METHOD\", {\n        method: pageTitle,\n      });\n    } else {\n      saveBlocked();\n    }\n  };\n\n  return (\n    <Wrapper>\n      {subCategory && <BackButton />}\n      <SettingsFormWrapper>\n        <HeaderWrapper>\n          <SettingsHeader\n            color=\"var(--ads-v2-color-fg-emphasis-plus)\"\n            kind=\"heading-l\"\n            renderAs=\"h1\"\n          >\n            {pageTitle}\n          </SettingsHeader>\n          {details?.subText && (\n            <SettingsSubHeader\n              color=\"var(--ads-v2-color-fg-emphasis)\"\n              kind=\"body-m\"\n              renderAs=\"h2\"\n            >\n              {details.subText}\n            </SettingsSubHeader>\n          )}\n        </HeaderWrapper>\n        <Group\n          category={category}\n          settings={settingsDetails}\n          subCategory={subCategory}\n        />\n        {isSavable && (\n          <SaveAdminSettings\n            isOnlyTenantConfig={isOnlyTenantConfig}\n            isSaving={props.isSaving}\n            needsRefresh={details?.needsRefresh}\n            onClear={onClear}\n            onSave={onSave}\n            settings={props.settings}\n            updatedTenantSettings={updatedTenantSettings}\n            valid={props.valid}\n          />\n        )}\n        {details?.isConnected && (\n          <DisconnectService\n            disconnect={() => disconnect(settingsDetails)}\n            subHeader={createMessage(DISCONNECT_SERVICE_SUBHEADER)}\n            warning={`${pageTitle} ${createMessage(\n              DISCONNECT_SERVICE_WARNING,\n            )}`}\n          />\n        )}\n        <BottomSpace />\n      </SettingsFormWrapper>\n      {props.showReleaseNotes && (\n        <ProductUpdatesModal hideTrigger isOpen onClose={onReleaseNotesClose} />\n      )}\n      <RestartBanner />\n    </Wrapper>\n  );\n}\n\nconst validate = (values: Record<string, any>) => {\n  const errors: any = {};\n  _.filter(values, (value, name) => {\n    const err_message = AdminConfig.validate(name, value);\n    if (err_message) {\n      errors[name] = err_message;\n    }\n  });\n  return errors;\n};\n\nconst selector = formValueSelector(SETTINGS_FORM_NAME);\nexport default withRouter(\n  connect((state: AppState) => {\n    const settingsConfig = getSettings(state);\n    const newProps: any = {\n      settings: {},\n      settingsConfig,\n      isSaving: getSettingsSavingState(state),\n      showReleaseNotes: getShowReleaseNotes(state),\n    };\n    _.forEach(AdminConfig.settingsMap, (setting, name) => {\n      const fieldValue = selector(state, name);\n      const doNotUpdate =\n        setting.controlType === SettingTypes.CHECKBOX &&\n        !settingsConfig[name] &&\n        !fieldValue;\n      //We are not performing type check here as inputs we take are stored as string\n      //But server stores as numeric, string etc..\n      if (fieldValue != settingsConfig[name] && !doNotUpdate) {\n        newProps.settings[name] = fieldValue;\n      }\n    });\n    return newProps;\n  }, null)(\n    reduxForm<any, any>({\n      validate,\n      form: SETTINGS_FORM_NAME,\n      touchOnBlur: true,\n    })(SettingsForm),\n  ),\n);\n","import React from \"react\";\nimport AdminConfig from \"@appsmith/pages/AdminSettings/config\";\nimport { Redirect, useParams } from \"react-router\";\nimport { SettingCategories } from \"@appsmith/pages/AdminSettings/config/types\";\nimport SettingsForm from \"pages/AdminSettings/SettingsForm\";\nimport { getWrapperCategory } from \"@appsmith/utils/adminSettingsHelpers\";\nimport { useSelector } from \"react-redux\";\nimport { getCurrentUser } from \"selectors/usersSelectors\";\nimport { getTenantPermissions } from \"@appsmith/selectors/tenantSelectors\";\nimport { useFeatureFlag } from \"utils/hooks/useFeatureFlag\";\nimport { FEATURE_FLAG } from \"@appsmith/entities/FeatureFlag\";\nimport { getAdminSettingsPath } from \"@appsmith/utils/BusinessFeatures/adminSettingsHelpers\";\n\nconst Main = () => {\n  const params = useParams() as any;\n  const { category, selected: subCategory } = params;\n  const user = useSelector(getCurrentUser);\n  const tenantPermissions = useSelector(getTenantPermissions);\n  const isSuperUser = user?.isSuperUser || false;\n  const wrapperCategory = getWrapperCategory(\n    AdminConfig.wrapperCategories,\n    subCategory,\n    category,\n  );\n  const isFeatureEnabled = useFeatureFlag(FEATURE_FLAG.license_gac_enabled);\n\n  if (!!wrapperCategory?.component) {\n    const { component: WrapperCategoryComponent } = wrapperCategory;\n    return <WrapperCategoryComponent category={wrapperCategory} />;\n  } else if (\n    !Object.values(SettingCategories).includes(category) ||\n    (subCategory && !Object.values(SettingCategories).includes(subCategory))\n  ) {\n    return (\n      <Redirect\n        to={getAdminSettingsPath(\n          isFeatureEnabled,\n          isSuperUser,\n          tenantPermissions,\n        )}\n      />\n    );\n  } else {\n    return <SettingsForm />;\n  }\n};\n\nexport default Main;\n","export * from \"ce/pages/AdminSettings/WithSuperUserHoc\";\nimport { default as CE_WithSuperUserHOC } from \"ce/pages/AdminSettings/WithSuperUserHoc\";\nexport default CE_WithSuperUserHOC;\n","import { APPLICATIONS_URL } from \"constants/routes\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport type { RouteComponentProps } from \"react-router\";\nimport { Redirect } from \"react-router\";\nimport { getCurrentUser } from \"selectors/usersSelectors\";\nimport { getShowAdminSettings } from \"@appsmith/utils/BusinessFeatures/adminSettingsHelpers\";\nimport { useFeatureFlag } from \"utils/hooks/useFeatureFlag\";\nimport { FEATURE_FLAG } from \"@appsmith/entities/FeatureFlag\";\n\nexport default function WithSuperUserHOC(\n  Component: React.ComponentType<RouteComponentProps>,\n) {\n  return function Wrapped(props: RouteComponentProps) {\n    const user = useSelector(getCurrentUser);\n    const isFeatureEnabled = useFeatureFlag(FEATURE_FLAG.license_gac_enabled);\n    if (!user) return null;\n    if (!getShowAdminSettings(isFeatureEnabled, user)) {\n      return <Redirect to={APPLICATIONS_URL} />;\n    }\n    return <Component {...props} />;\n  };\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\nimport PageWrapper from \"pages/common/PageWrapper\";\nimport { getSettingsLoadingState } from \"selectors/settingsSelectors\";\nimport styled from \"styled-components\";\nimport LeftPane from \"pages/AdminSettings/LeftPane\";\nimport Main from \"pages/AdminSettings/Main\";\nimport WithSuperUserHOC from \"@appsmith/pages/AdminSettings/WithSuperUserHoc\";\nimport { getCurrentUser } from \"selectors/usersSelectors\";\nimport bootIntercom from \"utils/bootIntercom\";\nimport { LoaderContainer } from \"pages/AdminSettings/components\";\nimport { useParams } from \"react-router\";\nimport AdminConfig from \"@appsmith/pages/AdminSettings/config\";\nimport { Spinner } from \"design-system\";\n\nconst FlexContainer = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nfunction Settings() {\n  const dispatch = useDispatch();\n  const user = useSelector(getCurrentUser);\n  const isLoading = useSelector(getSettingsLoadingState);\n  const params = useParams() as any;\n  const { category, selected: subCategory } = params;\n  const isSavable = AdminConfig.savableCategories.includes(\n    subCategory ?? category,\n  );\n\n  useEffect(() => {\n    if (user?.isSuperUser) {\n      dispatch({\n        type: ReduxActionTypes.FETCH_ADMIN_SETTINGS,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    bootIntercom(user);\n  }, [user?.email]);\n\n  return (\n    <PageWrapper isFixed isSavable={isSavable}>\n      <FlexContainer>\n        {isLoading ? (\n          <LoaderContainer>\n            <Spinner size=\"lg\" />\n          </LoaderContainer>\n        ) : (\n          <>\n            <LeftPane />\n            <Main />\n          </>\n        )}\n      </FlexContainer>\n    </PageWrapper>\n  );\n}\n\nexport default WithSuperUserHOC(Settings);\n","import React from \"react\";\nimport { importSvg } from \"design-system-old\";\nimport styled from \"styled-components\";\nimport { Text } from \"design-system\";\nconst AppsmithLogo = importSvg(\n  async () => import(\"assets/svg/appsmith-logo-no-pad.svg\"),\n);\n\nconst Wrapper = styled.span`\n  border-radius: var(--ads-v2-border-radius);\n  border: 1px solid var(--ads-v2-color-border);\n  background-color: var(--ads-v2-color-bg);\n\n  svg {\n    margin-top: 2px;\n  }\n`;\n\nfunction BrandingBadge() {\n  return (\n    <Wrapper className=\"flex items-center p-1 px-2 space-x-2 w-max backdrop-blur-xl backdrop-filter\">\n      <Text renderAs=\"h4\">Built on</Text>\n      <AppsmithLogo className=\"w-auto h-3\" />\n    </Wrapper>\n  );\n}\n\nexport default BrandingBadge;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","var arrayEach = require('./_arrayEach'),\n    baseEach = require('./_baseEach'),\n    castFunction = require('./_castFunction'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEach;\n"],"names":["ConfigFactory","_classCallCheck","_createClass","key","value","config","_config$settings","_config$children","settings","forEach","item","_item$advanced","settingsMap","id","_objectSpread","push","name","advanced","subItem","children","child","registerSettings","_config$children2","controlType","SettingTypes","wrapperCategories","type","canSave","savableCategories","icon","title","slug","subText","categoryType","isEnterprise","needsRefresh","isFeatureEnabled","map","getCategory","categories","registerCategory","setting","validate","category","isHidden","currentCategory","currentSubCategory","_ConfigFactory$wrappe","find","APPSMITH_INSTANCE_NAME_SETTING_SETTING","SettingCategories","controlSubType","SettingSubtype","label","placeholder","APPSMITH_ADMIN_EMAILS_SETTING","split","reduce","prev","curr","isEmail","trim","APPSMITH_DISABLE_TELEMETRY_SETTING","text","APPSMITH_HIDE_WATERMARK_SETTING","isDisabled","textSuffix","_jsx","BrandingBadge","APPSMITH_SHOW_ROLES_AND_GROUPS_SETTING","APPSMITH_SINGLE_USER_PER_SESSION_SETTING","APPSMITH_USER_SESSION_TIMEOUT_SETTING","helpText","APPSMITH_IS_ATOMIC_PUSH_ALLOWED","APPSMITH_ALLOWED_FRAME_ANCESTORS_SETTING","controlTypeProps","options","badge","tooltip","linkText","link","AppsmithFrameAncestorsSetting","nodeLabel","node","TagInput","input","nodeInputPath","nodeParentClass","format","formatEmbedSettings","parse","_localStorage$getItem","sources","isUndefined","additionalData","localStorage","replaceAll","CategoryType","url","EMAIL_SETUP_DOC","calloutType","createMessage","ADMIN_SETTINGS_EMAIL_WARNING","port","parseInt","action","dispatch","arguments","length","undefined","ReduxActionTypes","payload","_omitBy","smtpHost","smtpPort","fromEmail","starttlsEnabled","username","password","_isNil","googleMapsConfig","GOOGLE_MAPS_SETUP_DOC","_toConsumableArray","isAirgappedInstance","isAirgapped","filter","featureFlags","selectFeatureFlags","store","mailEnabled","getAppsmithConfigs","FormAuth","FORM_LOGIN_DESC","toggleText","emailVerificationEnabled","isVisible","SapcdcAuth","SAPCDC_AUTH_DESC","SAPCDC_AUTH_SETUP_DOC","fieldName","isRequired","GoogleAuth","GOOGLE_AUTH_DESC","GOOGLE_SIGNUP_SETUP_DOC","GithubAuth","GITHUB_AUTH_DESC","GITHUB_SIGNUP_SETUP_DOC","FormAuthCallout","image","Lock","SapcdcAuthCallout","Sapcdc","GoogleAuthCallout","Google","GithubAuthCallout","Github","SamlAuthCallout","SAML_AUTH_DESC","SamlSso","isSAMLEnabled","AuthMethods","OIDC_AUTH_DESC","OIDC","isOIDCEnabled","component","isConnected","useSelector","getIsFormLoginEnabled","socialLoginList","getThirdPartyAuths","includes","console","log","AuthPage","authMethods","props","className","rest","_objectWithoutProperties","_excluded","_jsxs","ContentBox","concat","Text","renderAs","logo","shades","PreviewBox","style","backgroundColor","background","Icon","size","alt","src","color","fontSize","primary","favicon","kind","_useState","useState","_useState2","_slicedToArray","logoPreview","setLogoPreview","_useState3","_useState4","faviconPreview","setFaviconPreview","useEffect","reader","FileReader","readAsDataURL","onloadend","result","LoginPreview","EmailPreview","DashboardPreview","AppPreview","NotFoundPreview","FaviconPreview","StyledFormGroup","styled","_templateObject","_taggedTemplateLiteral","theme","spaces","StyledLabel","_templateObject2","StyledSubtext","_templateObject3","StyledAsterisk","_templateObject4","FormGroup","_ref","Tooltip","content","EnterpriseTag","BusinessTag","StyledInputGroup","InputGroup","Classes","StyledColorInputIcon","StyledText","LeftIcon","onChange","ColorInput","selectedIndex","setSelectedIndex","_props$filter","logEvent","tooltips","colorInputRef","useRef","onColorInputChange","useCallback","e","target","Color","error","createBrandColorsFromPrimaryColor","hex","tinycolor","toHexString","colorKeys","Object","keys","_Fragment","colorKey","index","_startCase","onClick","readOnly","ref","leftIcon","ImageInput","defaultValue","preview","setPreview","fileInputRef","getAssetUrl","Button","_fileInputRef$current","current","click","startIcon","accept","_e$target$files","file","files","Wrapper","control","defaultValues","disabled","formState","handleSubmit","hasDirtyFields","dirtyFields","onSubmit","data","htmlFor","Controller","render","_ref$field","field","brandLogo","AnalyticsUtil","propertyName","logoImageValidator","HelperText","ADMIN_BRANDING_LOGO_REQUIREMENT","_ref2","_ref2$field","brandFavicon","faivconImageValidator","ADMIN_BRANDING_FAVICON_REQUIREMENT","ADMIN_BRANDING_COLOR_TOOLTIP","_ref3","_ref3$field","brandColors","property","ADMIN_BRANDING_COLOR_TOOLTIP_PRIMARY","ADMIN_BRANDING_COLOR_TOOLTIP_BACKGROUND","hover","ADMIN_BRANDING_COLOR_TOOLTIP_HOVER","font","ADMIN_BRANDING_COLOR_TOOLTIP_FONT","ADMIN_BRANDING_COLOR_TOOLTIP_DISABLED","_category$isFeatureEn","isBrandingEnabled","tenantConfig","getTenantConfig","brandLogoUrl","brandFaviconUrl","_useForm","useForm","getValues","reset","resetField","setValue","watch","values","getUpgradeBanner","SettingsForm","Previews","BrandingPage","HeaderContainer","HeaderComponent","_props$subHeadings","subHeadings","sub","heading","CarouselContainer","CarouselComponent","active","setActive","targetContent","setTargetContent","design","targets","triggers","isActive","i","targetsComponent","triggersComponent","d","role","details","detail","di","dangerouslySetInnerHTML","__html","display","FooterContainer","FooterComponent","_props$isEnterprise","message","_props$showHeading","showHeading","AVAILABLE_ON_ENTERPRISE","AVAILABLE_ON_BUSINESS","UPGRADE","Container","UpgradePage","carousel","footer","header","Header","Carousel","Footer","onUpgrade","useOnUpgrade","logEventName","logEventData","source","featureName","RampFeature","sectionName","RampSection","USER_PROVISIONING_FOR_ENTERPRISES","PROVISIONING_UPGRADE_PAGE_SUB_HEADING","PROVISION_DEPROVISION_USERS","PROVISION_DEPROVISION_USERS_DETAIL1","AUTO_GROUP_SYNC","AUTO_GROUP_SYNC_DETAIL1","ProvisionDeprovisionUsersImage","AutoGroupSyncImage","PROVISIONING_UPGRADE_PAGE_FOOTER","INTRODUCING","GRANULAR_ACCESS_CONTROL_FOR_TEAMS","ACCESS_CONTROL_UPGRADE_PAGE_SUB_HEADING","SECURITY_APPS_LEAST_PRIVILEGE","SECURITY_APPS_LEAST_PRIVILEGE_DETAIL1","PREVENT_ACCIDENTAL_DAMAGE","PREVENT_ACCIDENTAL_DAMAGE_DETAIL1","RESTRICT_PUBLIC_EXPOSURE","RESTRICT_PUBLIC_EXPOSURE_DETAIL1","SecureAppsLeastPrivilegeImage","PreventAccidentalDamageImage","RestrictPublicExposureImage","ACCESS_CONTROL_UPGRADE_PAGE_FOOTER","AUDIT_LOGS_UPGRADE_PAGE_SUB_HEADING","SECURITY_AND_COMPLIANCE","SECURITY_AND_COMPLIANCE_DETAIL1","SECURITY_AND_COMPLIANCE_DETAIL2","DEBUGGING","DEBUGGING_DETAIL1","INCIDENT_MANAGEMENT","INCIDENT_MANAGEMENT_DETAIL1","SecurityAndComplianceImage","DebuggingImage","IncidentManagementImage","EXCLUSIVE_TO_BUSINESS","GeneralConfig","EmailConfig","DeveloperSettings","Authentication","AdvancedConfig","VersionConfig","BrandingConfig","ProvisioningConfig","UserListing","AuditLogsConfig","sidebarWidth","StyledHeader","CategoryList","CategoryItem","_templateObject5","StyledLink","Link","_templateObject6","$active","SettingName","_templateObject7","getSettingsCategory","Array","from","AdminConfig","cat","Categories","parentCategory","showSubCategory","useDispatch","onClickHandler","showUpgradeTag","page","provisioning","to","adminSettingsCategoryUrl","selected","LeftPane","aclCategories","othersCategories","useParams","subCategory","user","getCurrentUser","isSuperUser","tenantPermissions","getTenantPermissions","useFeatureFlag","FEATURE_FLAG","isAuditLogsEnabled","getHasAuditLogsReadPermission","filteredGeneralCategories","getFilteredGeneralCategories","filteredAclCategories","getFilteredAclCategories","filteredOthersCategories","getFilteredOtherCategories","saveSettings","needsRestart","retryServerRestart","TextInput","FormTextField","ToggleWrapper","ToggleStatus","FieldToggleWithToggleText","isPropertyDisabled","componentProps","val","Switch","isSelected","toggleValue","onBlur","StyledFieldToggleGroup","formValuesSelector","getFormValues","SETTINGS_FORM_NAME","ToggleComponent","_setting$name","Field","toLowerCase","memo","TextWrapper","TextComponent","settingsConfig","getSettings","ButtonWrapper","StyledButton","ButtonComponent","BodyContainer","HeaderWrapper","_props$append","append","fieldValue","useMemo","window","location","origin","handleCopy","copy","toast","snippet","Input","description","endIcon","endIconProps","isReadOnly","placement","trigger","AccordionWrapper","AccordionHeader","AccordionBody","Line","Accordion","isOpen","setIsOpen","Group","renderComponent","selectedOption","setSelectedOption","Select","isMultiSelect","onDeselect","updatedItems","option","removeSelectedOption","onSelect","onOptionSelect","showSearch","enableSearch","Option","DropdownWrapper","allowDeselection","dropdownMaxHeight","fillOptions","labelRenderer","outline","showLabelOnly","DropDown","dropdownOptions","SelectField","CheckboxWrapper","StyledFieldCheckboxGroup","CheckboxComponent","labelSuffix","isTenantConfig","Checkbox","defaultSelected","CheckboxValue","a","r","o","show","StyledTag","Tag","TooltipContent","SuffixWrapper","NodeWrapper","PopoverStyles","createGlobalStyle","RadioFieldWrapper","onInputNodeChangeHandler","RadioGroup","Radio","isClosable","Popover2","interactionKind","position","Position","React","_defineProperty","meta","FieldError","RadioField","GroupWrapper","GroupHeader","GroupBody","getTypographyByKey","state","calloutDispatch","Toggle","classNames","hide","Callout","links","LEARN_MORE","CopyUrlForm","TagInputField","intent","Dropdown","RestartBannerWrapper","OverlayBackdrop","hexToRgba","Colors","RestartContainer","footerHeight","RestartMessageWrapper","HeaderContents","Heading","AppIconWrapper","isRestartFailed","getIsRestartFailed","Spinner","iconProps","RESTART_ERROR_HEADER","RESTART_BANNER_HEADER","RestartBanner","isRestarting","getRestartingState","RESTART_ERROR_BODY","RESTART_BANNER_BODY","RETRY_BUTTON","SettingsButtonWrapper","homePage","leftPane","leftPadding","width","footerShadow","_props$isOnlyTenantCo","isOnlyTenantConfig","isSaving","_props$needsRefresh","onClear","onSave","updatedTenantSettings","valid","saveButtonText","SAVE_AND_RESTART_BUTTON","SAVE_AND_REFRESH_BUTTON","SAVE_BUTTON","isLoading","RESET_BUTTON","DisconnectService","warnDisconnectAuth","setWarnDisconnectAuth","disconnectCalled","setDisconnectCalled","DANGER_ZONE","subHeader","warning","disconnect","DISCONNECT_CONFIRMATION","DISCONNECT_AUTH_METHOD","selector","formValueSelector","withRouter","connect","newProps","getSettingsSavingState","showReleaseNotes","getShowReleaseNotes","_forEach","doNotUpdate","reduxForm","errors","_filter","err_message","form","touchOnBlur","params","settingsDetails","getSettingsConfig","getSettingDetail","isSavable","pageTitle","replace","getSettingLabel","isFormLoginEnabled","s","checkMandatoryFileds","eachSetting","_settingsConfig$eachS","_settings$eachSetting","_settings$eachSetting2","isInitialSettingBlank","toString","isInitialSettingNotBlank","isNewSettingBlank","isNewSettingNotBlank","event","method","settingName","settingsStr","initialize","onReleaseNotesClose","saveBlocked","DISCONNECT_AUTH_ERROR","BackButton","SettingsFormWrapper","SettingsHeader","SettingsSubHeader","SaveAdminSettings","saveAllowed","settingsKeyLength","isOnlyEnvSettings","isEnvAndTenantSettings","each","tenantConfigConnection","updateTenantConfig","tenantConfiguration","isOnlyTenantSettings","filteredSettings","obj","assign","saveChangedSettings","MANDATORY_FIELDS_ERROR","currentSettings","updatedSettings","indexOf","DISCONNECT_SERVICE_SUBHEADER","DISCONNECT_SERVICE_WARNING","BottomSpace","ProductUpdatesModal","hideTrigger","onClose","wrapperCategory","getWrapperCategory","WrapperCategoryComponent","Redirect","getAdminSettingsPath","Component","getShowAdminSettings","APPLICATIONS_URL","FlexContainer","WithSuperUserHOC","getSettingsLoadingState","bootIntercom","email","PageWrapper","isFixed","LoaderContainer","Main","AppsmithLogo","importSvg","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","abrupt","stop","identity","require","module","exports","arrayEach","baseEach","castFunction","isArray","collection","iteratee"],"sourceRoot":""}