{"version":3,"file":"static/js/5439.4c96c351.chunk.js","mappings":"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","sources":["components/editorComponents/CodeEditor/EvaluatedValuePopup.tsx","components/editorComponents/CodeEditor/generateQuickCommands.tsx","components/editorComponents/CodeEditor/commandsHelper.ts","components/editorComponents/Debugger/DebugCTA.tsx","pages/Editor/Popper.tsx","utils/NavigationSelector/common.ts","selectors/navigationSelectors.ts","utils/NavigationSelector/JsChildren.ts","utils/NavigationSelector/WidgetChildren.ts","ce/utils/moduleInstanceNavigationData.ts"],"sourcesContent":["import React, { memo, useEffect, useMemo, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { isObject, isString } from \"lodash\";\nimport equal from \"fast-deep-equal/es6\";\nimport Popper from \"pages/Editor/Popper\";\nimport ReactJson from \"react-json-view\";\nimport type { FieldEntityInformation } from \"components/editorComponents/CodeEditor/EditorConfig\";\nimport { EditorTheme } from \"components/editorComponents/CodeEditor/EditorConfig\";\nimport type { Placement } from \"popper.js\";\nimport { EvaluatedValueDebugButton } from \"components/editorComponents/Debugger/DebugCTA\";\nimport { EvaluationSubstitutionType } from \"entities/DataTree/dataTreeFactory\";\nimport type { IPopoverSharedProps } from \"@blueprintjs/core\";\nimport { Classes, Collapse } from \"@blueprintjs/core\";\nimport { UNDEFINED_VALIDATION } from \"utils/validation/common\";\nimport copy from \"copy-to-clipboard\";\n\nimport * as Sentry from \"@sentry/react\";\nimport { Severity } from \"@sentry/react\";\nimport type { CodeEditorExpected } from \"components/editorComponents/CodeEditor/index\";\nimport type { Indices } from \"constants/Layers\";\nimport { Layers } from \"constants/Layers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvaluatedPopupState } from \"selectors/editorContextSelectors\";\nimport type { AppState } from \"@appsmith/reducers\";\nimport { setEvalPopupState } from \"actions/editorContextActions\";\nimport { setDebuggerSelectedTab, showDebugger } from \"actions/debuggerActions\";\nimport { modText } from \"utils/helpers\";\nimport { getEntityNameAndPropertyPath } from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport { getPathNavigationUrl } from \"selectors/navigationSelectors\";\nimport { Button, Icon, Link, toast, Tooltip } from \"design-system\";\nimport type { EvaluationError } from \"utils/DynamicBindingUtils\";\nimport { DEBUGGER_TAB_KEYS } from \"../Debugger/helpers\";\n\nconst modifiers: IPopoverSharedProps[\"modifiers\"] = {\n  offset: {\n    enabled: true,\n    offset: \"0, 15\",\n  },\n  preventOverflow: {\n    enabled: true,\n    boundariesElement: \"viewport\",\n    padding: 50,\n  },\n};\nconst Wrapper = styled.div`\n  position: relative;\n  flex: 1;\n  height: 100%;\n  border-radius: var(--ads-v2-border-radius);\n`;\n\nconst THEME = {\n  backgroundColor: \"var(--ads-v2-color-bg)\",\n  textColor: \"var(--ads-v2-color-fg)\",\n  editorBackground: \"var(--ads-v2-color-bg)\",\n  editorColor: \"var(--ads-v2-color-fg)\",\n};\n\nconst ContentWrapper = styled.div<{ colorTheme: EditorTheme }>`\n  width: ${(props) => props.theme.evaluatedValuePopup.width}px;\n  max-height: ${(props) => props.theme.evaluatedValuePopup.height}px;\n  overflow-y: auto;\n  -ms-overflow-style: none;\n  background-color: ${THEME.backgroundColor};\n  color: ${THEME.textColor};\n  padding: 10px;\n  box-shadow: var(--ads-v2-shadow-popovers);\n  border-radius: var(--ads-v2-border-radius);\n  pointer-events: all;\n`;\n\nconst CopyIconWrapper = styled(Button)`\n  position: absolute !important;\n  right: var(--ads-v2-spaces-2);\n  top: var(--ads-v2-spaces-2);\n  cursor: pointer;\n  padding: 0;\n  display: none;\n  align-self: start;\n`;\n\nconst CurrentValueWrapper = styled.div<{ colorTheme: EditorTheme }>`\n  min-height: 36px;\n  -ms-overflow-style: none;\n  padding-left: var(--ads-v2-spaces-3);\n  padding-right: var(--ads-v2-spaces-2);\n  background-color: ${THEME.editorBackground};\n  border-radius: var(--ads-v2-border-radius);\n  border: 1px solid var(--ads-v2-color-border);\n  position: relative;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  &:hover {\n    .copyIconWrapper {\n      display: flex;\n    }\n  }\n\n  /* for audit logs */\n  .pushed-content .object-key-val,\n  .variable-row {\n    border-left: 1px solid var(--ads-v2-color-border) !important;\n\n    .object-key,\n    .object-key span,\n    span {\n      color: var(--ads-v2-color-fg) !important;\n      opacity: 1 !important;\n    }\n\n    .variable-value > div span {\n      color: var(--ads-v2-color-fg-brand) !important;\n    }\n  }\n\n  .object-key-val {\n    .collapsed-icon svg,\n    .expanded-icon svg {\n      color: var(--ads-v2-color-fg) !important;\n    }\n\n    .node-ellipsis {\n      color: var(--ads-v2-color-fg-brand) !important;\n      letter-spacing: -2px;\n    }\n  }\n`;\n\nconst CodeWrapper = styled.pre<{ colorTheme: EditorTheme }>`\n  margin: 0px 0px;\n  background-color: ${THEME.editorBackground};\n  color: ${THEME.editorColor};\n  font-size: 12px;\n  -ms-overflow-style: none;\n  white-space: pre-wrap;\n  word-break: break-all;\n`;\n\nconst TypeText = styled.pre<{\n  colorTheme: EditorTheme;\n  padded?: boolean;\n  addBorder?: boolean;\n}>`\n  padding: ${(props) => (props.padded ? \"8px\" : 0)};\n  background-color: ${THEME.editorBackground};\n  color: ${THEME.editorColor};\n  font-size: 12px;\n  margin: 5px 0;\n  -ms-overflow-style: none;\n  white-space: pre-wrap;\n  border-radius: var(--ads-v2-border-radius);\n  ${(props) =>\n    props?.addBorder && \"border: 1px solid var(--ads-v2-color-border);\"}\n`;\n\nconst ErrorText = styled.p`\n  margin: ${(props) => props.theme.spaces[2]}px 0px;\n  padding: ${(props) => props.theme.spaces[3]}px\n    ${(props) => props.theme.spaces[5]}px;\n  border-radius: var(--ads-v2-border-radius);\n  font-size: 12px;\n  line-height: 19px;\n  letter-spacing: -0.24px;\n  background-color: var(--ads-v2-color-bg-error);\n  border: 1px solid var(--ads-v2-color-border-error);\n  color: var(--ads-v2-color-fg-error);\n  margin-top: 15px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  &.open-collapse {\n    transform: rotate(90deg);\n  }\n  float: right;\n`;\n\nconst StyledTitle = styled.p`\n  margin: 8px 0;\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 12px;\n  cursor: pointer;\n`;\n\nconst StyledTitleName = styled.p`\n  margin: 8px 0;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 12px;\n  cursor: pointer;\n`;\n\nconst AsyncFunctionErrorView = styled.div`\n  display: flex;\n  margin-top: 12px;\n  justify-content: space-between;\n`;\n\nfunction CollapseToggle(props: { isOpen: boolean }) {\n  const { isOpen } = props;\n  return (\n    <StyledIcon\n      className={isOpen ? \"open-collapse\" : \"\"}\n      name=\"arrow-right-s-line\"\n    />\n  );\n}\n\nfunction copyContent(\n  content: any,\n  onCopyContentText = `Evaluated value copied to clipboard`,\n) {\n  const stringifiedContent = isString(content)\n    ? content\n    : JSON.stringify(content, null, 2);\n\n  copy(stringifiedContent);\n  toast.show(onCopyContentText, {\n    kind: \"success\",\n  });\n}\n\ninterface Props {\n  theme: EditorTheme;\n  isOpen: boolean;\n  hasError: boolean;\n  expected?: CodeEditorExpected;\n  evaluatedValue?: any;\n  children: JSX.Element;\n  errors: EvaluationError[];\n  useValidationMessage?: boolean;\n  hideEvaluatedValue?: boolean;\n  evaluationSubstitutionType?: EvaluationSubstitutionType;\n  popperPlacement?: Placement;\n  entity?: FieldEntityInformation;\n  popperZIndex?: Indices;\n  dataTreePath?: string;\n  evaluatedPopUpLabel?: string;\n  editorRef?: React.RefObject<HTMLDivElement>;\n}\n\ninterface PopoverContentProps {\n  hasError: boolean;\n  entity?: FieldEntityInformation;\n  expected?: CodeEditorExpected;\n  errors: EvaluationError[];\n  useValidationMessage?: boolean;\n  evaluatedValue: any;\n  theme: EditorTheme;\n  onMouseEnter: () => void;\n  onMouseLeave: () => void;\n  hideEvaluatedValue?: boolean;\n  preparedStatementViewer: boolean;\n  dataTreePath?: string;\n  evaluatedPopUpLabel?: string;\n  editorRef?: React.RefObject<HTMLDivElement>;\n}\n\nconst PreparedStatementViewerContainer = styled.span`\n  .${Classes.POPOVER_TARGET} {\n    display: inline-block;\n  }\n`;\n\nconst PreparedStatementParameter = styled.span`\n  cursor: pointer;\n  text-decoration: underline;\n  color: #333;\n`;\n\ninterface PreparedStatementValue {\n  value: string;\n  parameters: Record<string, number | string>;\n}\nexport function PreparedStatementViewer(props: {\n  evaluatedValue: PreparedStatementValue;\n}) {\n  const { parameters, value } = props.evaluatedValue;\n  if (!value) {\n    Sentry.captureException(\"Prepared Statement got no value\", {\n      level: Severity.Debug,\n      extra: { props },\n    });\n    return <div />;\n  }\n  const stringSegments = value.split(/\\$\\d+/);\n  const $params = [...value.matchAll(/\\$\\d+/g)].map((matches) => matches[0]);\n\n  const paramsWithTooltips = $params.map((param) => (\n    <Tooltip content={`${parameters[param]}`} key={param} trigger=\"hover\">\n      <PreparedStatementParameter key={param}>\n        {param}\n      </PreparedStatementParameter>\n    </Tooltip>\n  ));\n\n  return (\n    <PreparedStatementViewerContainer>\n      {stringSegments.map((segment, index) => (\n        <span key={segment}>\n          {segment}\n          {paramsWithTooltips[index]}\n        </span>\n      ))}\n    </PreparedStatementViewerContainer>\n  );\n}\n\nexport function CurrentValueViewer(props: {\n  theme: EditorTheme;\n  evaluatedValue: any;\n  hideLabel?: boolean;\n  preparedStatementViewer?: boolean;\n  /** @param {number} [collapseStringsAfterLength=20]\n   * This collapses the values visible in (say json) after these many characters and shows ellipsis.\n   */\n  collapseStringsAfterLength?: number;\n  /** @param {string} [onCopyContentText=`Evaluated value copied to clipboard`]\n   * This parameter contains the string that is shown when the evaluatedValue is copied.\n   */\n  onCopyContentText?: string;\n}) {\n  const [openEvaluatedValue, setOpenEvaluatedValue] = useState(true);\n  return (\n    <ControlledCurrentValueViewer\n      {...props}\n      openEvaluatedValue={openEvaluatedValue}\n      setOpenEvaluatedValue={(isOpen: boolean) => setOpenEvaluatedValue(isOpen)}\n    />\n  );\n}\n\nconst ControlledCurrentValueViewer = memo(\n  function ControlledCurrentValueViewer(props: {\n    theme: EditorTheme;\n    evaluatedValue: any;\n    openEvaluatedValue: boolean;\n    setOpenEvaluatedValue?: (a: boolean) => void;\n    hideLabel?: boolean;\n    preparedStatementViewer?: boolean;\n    /** @param {number} [collapseStringsAfterLength=20]\n     * This collapses the values visible in (say json) after these many characters and shows ellipsis.\n     */\n    collapseStringsAfterLength?: number;\n    /** @param {string} [onCopyContentText=`Evaluated value copied to clipboard`]\n     * This parameter contains the string that is shown when the evaluatedValue is copied.\n     */\n    onCopyContentText?: string;\n  }) {\n    /* Setting the default value for collapseStringsAfterLength to 20;\n       This ensures that earlier code that depends on the value keeps working.\n     */\n    const collapseStringsAfterLength = props.collapseStringsAfterLength || 20;\n    /* Setting the default value; ensuring that earlier code keeps working. */\n    const onCopyContentText =\n      props.onCopyContentText || `Evaluated value copied to clipboard`;\n    const codeWrapperRef = React.createRef<HTMLPreElement>();\n    const { openEvaluatedValue, setOpenEvaluatedValue } = props;\n    const toggleEvaluatedValue = () => {\n      if (!!setOpenEvaluatedValue) setOpenEvaluatedValue(!openEvaluatedValue);\n    };\n    let content = (\n      <CodeWrapper colorTheme={props.theme} ref={codeWrapperRef}>\n        {\"undefined\"}\n      </CodeWrapper>\n    );\n    if (props.evaluatedValue !== undefined) {\n      if (\n        isObject(props.evaluatedValue) ||\n        Array.isArray(props.evaluatedValue)\n      ) {\n        if (props.preparedStatementViewer) {\n          content = (\n            <CodeWrapper colorTheme={props.theme} ref={codeWrapperRef}>\n              <PreparedStatementViewer\n                evaluatedValue={props.evaluatedValue as PreparedStatementValue}\n              />\n            </CodeWrapper>\n          );\n        } else {\n          const reactJsonProps = {\n            theme:\n              props.theme === EditorTheme.DARK ? \"summerfruit\" : \"rjv-default\",\n            name: null,\n            enableClipboard: false,\n            displayObjectSize: false,\n            displayDataTypes: false,\n            style: {\n              fontSize: \"12px\",\n            },\n            collapsed: 2,\n            collapseStringsAfterLength,\n            shouldCollapse: (field: any) => {\n              const index = field.name * 1;\n              return index >= 2;\n            },\n          };\n          content = (\n            <ReactJson src={props.evaluatedValue} {...reactJsonProps} />\n          );\n        }\n      } else {\n        content = (\n          <CodeWrapper colorTheme={props.theme} ref={codeWrapperRef}>\n            {props.evaluatedValue === null\n              ? \"null\"\n              : props.evaluatedValue.toString()}\n          </CodeWrapper>\n        );\n      }\n    }\n    return (\n      <>\n        {!props.hideLabel && (\n          <StyledTitle\n            data-testid=\"evaluated-value-popup-title\"\n            onClick={toggleEvaluatedValue}\n          >\n            Evaluated value\n            <CollapseToggle isOpen={openEvaluatedValue} />\n          </StyledTitle>\n        )}\n        <Collapse isOpen={openEvaluatedValue}>\n          <CurrentValueWrapper\n            className=\"t-property-evaluated-value\"\n            colorTheme={props.theme}\n          >\n            {content}\n            {props.hasOwnProperty(\"evaluatedValue\") && (\n              <CopyIconWrapper\n                className={\"copyIconWrapper\"}\n                isIconButton\n                kind=\"tertiary\"\n                onClick={() =>\n                  copyContent(props.evaluatedValue, onCopyContentText)\n                }\n                size=\"sm\"\n                startIcon=\"copy-control\"\n              />\n            )}\n          </CurrentValueWrapper>\n        </Collapse>\n      </>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.theme === nextProps.theme &&\n      prevProps.hideLabel === nextProps.hideLabel &&\n      prevProps.openEvaluatedValue === nextProps.openEvaluatedValue &&\n      // Deep-compare evaluated values to ensure we only rerender\n      // when the array actually changes\n      equal(prevProps.evaluatedValue, nextProps.evaluatedValue)\n    );\n  },\n);\n\nfunction PopoverContent(props: PopoverContentProps) {\n  const typeTextRef = React.createRef<HTMLPreElement>();\n  const dispatch = useDispatch();\n  const popupContext = useSelector((state: AppState) =>\n    getEvaluatedPopupState(state, props.dataTreePath),\n  );\n  const [openExpectedDataType, setOpenExpectedDataType] = useState(\n    !!popupContext?.type,\n  );\n  const [openExpectedExample, setOpenExpectedExample] = useState(\n    props.expected?.openExampleTextByDefault || !!popupContext?.example,\n  );\n  const [openEvaluatedValue, setOpenEvaluatedValue] = useState(\n    popupContext && popupContext.value !== undefined\n      ? popupContext.value\n      : true,\n  );\n  const { errors, expected, hasError, onMouseEnter, onMouseLeave, theme } =\n    props;\n  const { entityName } = getEntityNameAndPropertyPath(props.dataTreePath || \"\");\n  const errorWithSource = errors.find(({ kind }) => kind && kind.rootcause);\n\n  const errorNavigationUrl = useSelector((state: AppState) =>\n    getPathNavigationUrl(state, entityName, errorWithSource?.kind?.rootcause),\n  );\n  const toggleExpectedDataType = () =>\n    setOpenExpectedDataType(!openExpectedDataType);\n  const toggleExpectedExample = () =>\n    setOpenExpectedExample(!openExpectedExample);\n\n  let error: EvaluationError | undefined;\n  if (hasError) {\n    error = errors[0];\n  }\n  const openDebugger = () => {\n    dispatch(showDebugger());\n    dispatch(setDebuggerSelectedTab(DEBUGGER_TAB_KEYS.ERROR_TAB));\n  };\n\n  useEffect(() => {\n    dispatch(\n      setEvalPopupState(props.dataTreePath, {\n        type: openExpectedDataType,\n        example: openExpectedExample,\n        value: openEvaluatedValue,\n      }),\n    );\n  }, [openExpectedDataType, openExpectedExample, openEvaluatedValue]);\n\n  const getErrorMessage = (error: Error) => {\n    return error\n      ? error.message\n      : `This value does not evaluate to type \"${expected?.type}\".`;\n  };\n\n  return (\n    <ContentWrapper\n      className=\"t--CodeEditor-evaluatedValue evaluated-value-popup\"\n      colorTheme={theme}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}\n    >\n      {props?.entity && props.entity?.entityName && (\n        <StyledTitleName>\n          {props?.evaluatedPopUpLabel\n            ? props?.evaluatedPopUpLabel\n            : props?.entity?.entityName}\n        </StyledTitleName>\n      )}\n      {hasError && error && (\n        <ErrorText>\n          <span className=\"t--evaluatedPopup-error\">\n            {/* errorMessage could be an empty string */}\n            {getErrorMessage(error.errorMessage)}\n          </span>\n\n          {errorNavigationUrl ? (\n            <AsyncFunctionErrorView>\n              <Link onClick={openDebugger}>{`See error (${modText()} D)`}</Link>\n              <Link target={\"_self\"} to={errorNavigationUrl}>\n                View source\n              </Link>\n            </AsyncFunctionErrorView>\n          ) : (\n            <EvaluatedValueDebugButton\n              entity={props.entity}\n              error={{\n                type: error.errorType,\n                message: error.errorMessage,\n              }}\n            />\n          )}\n        </ErrorText>\n      )}\n      {props.expected && props.expected.type !== UNDEFINED_VALIDATION && (\n        <>\n          <StyledTitle onClick={toggleExpectedDataType}>\n            Expected structure\n            <CollapseToggle isOpen={openExpectedDataType} />\n          </StyledTitle>\n          <Collapse isOpen={openExpectedDataType}>\n            <TypeText\n              addBorder\n              colorTheme={props.theme}\n              padded\n              ref={typeTextRef}\n            >\n              {props.expected.type}\n            </TypeText>\n          </Collapse>\n        </>\n      )}\n      {props.expected && props.expected.type !== UNDEFINED_VALIDATION && (\n        <>\n          <StyledTitle onClick={toggleExpectedExample}>\n            Expected structure - example\n            <CollapseToggle isOpen={openExpectedExample} />\n          </StyledTitle>\n          <Collapse isOpen={openExpectedExample}>\n            <TypeText colorTheme={props.theme} ref={typeTextRef}>\n              <CurrentValueViewer\n                evaluatedValue={props.expected.example}\n                hideLabel\n                theme={props.theme}\n              />\n            </TypeText>\n          </Collapse>\n        </>\n      )}\n      {!props.hideEvaluatedValue && (\n        <ControlledCurrentValueViewer\n          evaluatedValue={props.evaluatedValue}\n          openEvaluatedValue={openEvaluatedValue}\n          preparedStatementViewer={props.preparedStatementViewer}\n          setOpenEvaluatedValue={(isOpen: boolean) =>\n            setOpenEvaluatedValue(isOpen)\n          }\n          theme={props.theme}\n        />\n      )}\n    </ContentWrapper>\n  );\n}\n\nfunction EvaluatedValuePopup(props: Props) {\n  const [contentHovered, setContentHovered] = useState(false);\n  const [timeoutId, setTimeoutId] = useState(0);\n  const [position, setPosition] = useState(undefined);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const [placement, offset]: [Placement, string] = useMemo(() => {\n    const placement: Placement = \"left-start\";\n    let offset = \"0, 15\";\n    if (!wrapperRef.current) return [placement, \"0, 0\"];\n    if (props.popperPlacement) return [props.popperPlacement, \"0, 0\"];\n    const { left, right } = wrapperRef.current.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const halfViewportWidth = viewportWidth / 2;\n    // TODO: Remove this temporary fix\n    if (left < halfViewportWidth) {\n      if (right < halfViewportWidth) {\n        offset = \"0, 5\";\n      } else {\n        // If the target spans from left half to the right half and more that 3 quarters of the view port, show the popper on the right without overlap\n        if (right < halfViewportWidth + halfViewportWidth / 2) {\n          offset = \"0, 5\";\n        } else {\n          offset = \"0, -290\";\n        }\n      }\n    } else {\n      // If the target is on the right half of the screen, show the popper on the left with offset eg. property pane\n      offset = \"0, 15\";\n    }\n    return [placement, offset];\n  }, [wrapperRef.current, props.popperPlacement]);\n\n  return (\n    <Wrapper ref={wrapperRef}>\n      <Popper\n        customParent={document.body}\n        editorRef={props?.editorRef}\n        isDraggable\n        isDragging={isDragging}\n        isOpen={props.isOpen || contentHovered || isDragging}\n        modifiers={{\n          ...modifiers,\n          offset: {\n            enabled: true,\n            offset,\n          },\n        }}\n        placement={placement}\n        position={position}\n        setIsDragging={setIsDragging}\n        setPosition={setPosition}\n        targetNode={wrapperRef.current || undefined}\n        zIndex={props.popperZIndex || Layers.evaluationPopper}\n      >\n        <PopoverContent\n          dataTreePath={props.dataTreePath}\n          editorRef={props?.editorRef}\n          entity={props.entity}\n          errors={props.errors}\n          evaluatedPopUpLabel={props?.evaluatedPopUpLabel}\n          evaluatedValue={props.evaluatedValue}\n          expected={props.expected}\n          hasError={props.hasError}\n          hideEvaluatedValue={props.hideEvaluatedValue}\n          onMouseEnter={() => {\n            clearTimeout(timeoutId);\n            setContentHovered(true);\n          }}\n          onMouseLeave={() => {\n            const id = setTimeout(() => setContentHovered(false), 500);\n            setTimeoutId(id);\n          }}\n          preparedStatementViewer={\n            props.evaluationSubstitutionType\n              ? props.evaluationSubstitutionType ===\n                EvaluationSubstitutionType.PARAMETER\n              : false\n          }\n          theme={props.theme}\n          useValidationMessage={props.useValidationMessage}\n        />\n      </Popper>\n\n      {props.children}\n    </Wrapper>\n  );\n}\n\nexport default EvaluatedValuePopup;\n","import type { Datasource } from \"entities/Datasource\";\nimport type { MouseEventHandler } from \"react\";\nimport React, { useCallback } from \"react\";\nimport type { CommandsCompletion } from \"utils/autocomplete/CodemirrorTernService\";\nimport ReactDOM from \"react-dom\";\nimport type { SlashCommandPayload } from \"entities/Action\";\nimport { PluginType, SlashCommand } from \"entities/Action\";\nimport { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport { EntityIcon, JsFileIconV2 } from \"pages/Editor/Explorer/ExplorerIcons\";\nimport { getAssetUrl } from \"@appsmith/utils/airgapHelpers\";\nimport type { FeatureFlags } from \"@appsmith/entities/FeatureFlag\";\nimport { Button, Icon } from \"design-system\";\nimport { APPSMITH_AI } from \"@appsmith/components/editorComponents/GPT/trigger\";\nimport { DatasourceCreateEntryPoints } from \"constants/Datasource\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport BetaCard from \"../BetaCard\";\nimport type { NavigationData } from \"selectors/navigationSelectors\";\nimport type { AIEditorContext } from \"@appsmith/components/editorComponents/GPT\";\nimport type { EntityTypeValue } from \"@appsmith/entities/DataTree/types\";\nimport PerformanceTracker, {\n  PerformanceTransactionName,\n} from \"utils/PerformanceTracker\";\nimport history, { NavigationMethod } from \"utils/history\";\nimport type { Plugin } from \"api/PluginApi\";\nimport { EDIT, createMessage } from \"@appsmith/constants/messages\";\nimport { getShowHintOptions } from \"./commandsHelper\";\n\nexport enum Shortcuts {\n  PLUS = \"PLUS\",\n  BINDING = \"BINDING\",\n  FUNCTION = \"FUNCTION\",\n  ASK_AI = \"ASK_AI\",\n  SHOW_MORE = \"SHOW_MORE\",\n}\n\nconst filteredCommands: CommandsCompletion[] = [];\nconst NO_OF_QUERIES_TO_SHOW_BY_DEFAULT = 5;\n\nexport const getShowMoreLabel = (suggestions: CommandsCompletion[]) => {\n  return (\n    \"Load \" + (suggestions.length - NO_OF_QUERIES_TO_SHOW_BY_DEFAULT) + \" more\"\n  );\n};\n\nexport function matchingCommands(\n  list: CommandsCompletion[],\n  searchText: string,\n) {\n  return list.filter((action) => {\n    return (\n      action.displayText &&\n      action.displayText.toLowerCase().indexOf(searchText.toLowerCase()) > -1\n    );\n  });\n}\n\nexport const showMoreCommandOption = (\n  displayText: string,\n  editor: CodeMirror.Editor,\n  focusEditor: (focusOnLine?: number, chOffset?: number) => void,\n  suggestions: CommandsCompletion[],\n  searchText: string = \"\",\n): CommandsCompletion => ({\n  text: \"\",\n  displayText: displayText,\n  className: \"CodeMirror-commands show-more-option\",\n  data: {},\n  shortcut: Shortcuts.SHOW_MORE,\n  render: (element: HTMLElement, self: any, data: any) => {\n    ReactDOM.render(\n      <ShowMoreCommand\n        editor={editor}\n        focusEditor={focusEditor}\n        icon={iconsByType[data.shortcut as Shortcuts]}\n        name={data.displayText}\n        searchText={searchText}\n        suggestions={suggestions}\n      />,\n      element,\n    );\n  },\n});\n\nexport const commandsHeader = (\n  displayText: string,\n  text = \"\",\n  separator = true,\n): CommandsCompletion => ({\n  text: text,\n  displayText: displayText,\n  className: `CodeMirror-command-header ${separator ? \"separator\" : \"\"}`,\n  data: {},\n  isHeader: true,\n  shortcut: \"\",\n});\n\nexport const generateCreateNewCommand = ({\n  action,\n  description,\n  displayText,\n  isBeta,\n  shortcut,\n  text,\n  triggerCompletionsPostPick,\n}: any): CommandsCompletion => ({\n  text,\n  displayText: displayText,\n  data: {},\n  className: \"CodeMirror-commands\",\n  shortcut,\n  action,\n  triggerCompletionsPostPick,\n  render: (element: HTMLElement, self: any, data: any) => {\n    ReactDOM.render(\n      <Command\n        desc={description}\n        icon={iconsByType[data.shortcut as Shortcuts]}\n        isBeta={isBeta}\n        name={data.displayText}\n      />,\n      element,\n    );\n  },\n});\n\nexport const iconsByType = {\n  [Shortcuts.BINDING]: <Icon name=\"binding-new\" size=\"md\" />,\n  [Shortcuts.PLUS]: (\n    <Icon className=\"add-datasource-icon\" name=\"add-box-line\" size=\"md\" />\n  ),\n  [Shortcuts.FUNCTION]: (\n    <Icon className=\"snippet-icon\" name=\"snippet\" size=\"md\" />\n  ),\n  [Shortcuts.ASK_AI]: <Icon className=\"magic\" name=\"magic-line\" size=\"md\" />,\n  [Shortcuts.SHOW_MORE]: (\n    <Icon className=\"show-more-icon\" name=\"more-horizontal-control\" size=\"md\" />\n  ),\n};\n\nexport function ShowMoreCommand(props: {\n  icon: any;\n  name: string;\n  editor: CodeMirror.Editor;\n  focusEditor: (focusOnLine?: number, chOffset?: number) => void;\n  suggestions: CommandsCompletion[];\n  searchText: string;\n}) {\n  const handleShowMoreClick = (event: any) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    const suggestionsMatchingSearchText = matchingCommands(\n      props.suggestions,\n      props.searchText,\n    );\n    const showMoreLabel = getShowMoreLabel(suggestionsMatchingSearchText);\n    const loadMoreOptionIndex = filteredCommands.findIndex(\n      (element) => element.displayText === showMoreLabel,\n    );\n    if (loadMoreOptionIndex !== -1) {\n      const suggestionList = matchingCommands(\n        props.suggestions.slice(\n          NO_OF_QUERIES_TO_SHOW_BY_DEFAULT,\n          props.suggestions.length,\n        ),\n        props.searchText,\n      ).slice(0, props.suggestions.length);\n      filteredCommands.splice(loadMoreOptionIndex, 1, ...suggestionList);\n    }\n\n    // Modify the list\n    props.editor.showHint(\n      getShowHintOptions(\n        filteredCommands,\n        props.editor,\n        props.focusEditor,\n        props.searchText,\n      ),\n    );\n  };\n  return (\n    <div\n      className=\"command-container relative cursor-pointer w-full\"\n      onClick={(e) => {\n        handleShowMoreClick(e);\n      }}\n    >\n      <div className=\"command flex w-full\">\n        <div className=\"self-center shrink-0\">{props.icon}</div>\n        <div className=\"flex grow\">\n          <div className=\"flex flex-col gap-1 grow w-full\">\n            <div className=\"whitespace-nowrap flex flex-row items-center gap-2 text-[color:var(--ads-v2\\-colors-content-label-default-fg)] relative\">\n              <span className=\"flex items-center overflow-hidden overflow-ellipsis slash-command-hint-text\">\n                {props.name}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function Command(props: {\n  icon: any;\n  name: string;\n  desc?: string;\n  isBeta?: boolean;\n  url?: string;\n  eventParams?: Record<string, string | boolean>;\n}) {\n  const switchToAction: MouseEventHandler<HTMLElement> = useCallback(\n    (event) => {\n      event.stopPropagation();\n      if (!props.url) return;\n      PerformanceTracker.startTracking(PerformanceTransactionName.OPEN_ACTION, {\n        url: props.url,\n      });\n      history.push(props.url, { invokedBy: NavigationMethod.SlashCommandHint });\n      AnalyticsUtil.logEvent(\"EDIT_ACTION_CLICK\", props.eventParams || {});\n    },\n    [props.url, props.eventParams],\n  );\n\n  return (\n    <div className=\"command-container relative cursor-pointer w-full\">\n      <div className=\"command flex w-full\">\n        <div className=\"self-center shrink-0\">{props.icon}</div>\n        <div className=\"flex grow\">\n          <div className=\"flex flex-col gap-1 grow w-full\">\n            <div className=\"whitespace-nowrap flex flex-row items-center gap-2 text-[color:var(--ads-v2\\-colors-content-label-default-fg)] relative\">\n              <span className=\"flex items-center overflow-hidden overflow-ellipsis slash-command-hint-text\">\n                {props.name}\n              </span>\n              {props.isBeta && <BetaCard />}\n            </div>\n            {props.desc ? (\n              <div className=\"command-desc\">{props.desc}</div>\n            ) : null}\n          </div>\n          {props.url ? (\n            <Button\n              className=\"hidden group-hover:flex items-center self-center h-full px-2 text-xs !absolute command-suggestion-edit right-0 top-0\"\n              kind=\"tertiary\"\n              onClick={switchToAction}\n              size=\"sm\"\n            >\n              {createMessage(EDIT)}\n            </Button>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const generateQuickCommands = (\n  entitiesForSuggestions: NavigationData[],\n  currentEntityType: EntityTypeValue,\n  searchText: string,\n  {\n    aiContext,\n    datasources,\n    enableAIAssistance,\n    executeCommand,\n    pluginIdToPlugin,\n  }: {\n    aiContext: AIEditorContext;\n    datasources: Datasource[];\n    executeCommand: (payload: SlashCommandPayload) => void;\n    pluginIdToPlugin: Record<string, Plugin>;\n    recentEntities: string[];\n    featureFlags: FeatureFlags;\n    enableAIAssistance: boolean;\n  },\n  editor: CodeMirror.Editor,\n  focusEditor: (focusOnLine?: number, chOffset?: number) => void,\n) => {\n  filteredCommands.splice(0, filteredCommands.length);\n  const newBinding: CommandsCompletion = generateCreateNewCommand({\n    text: \"{{}}\",\n    displayText: \"Add a binding\",\n    shortcut: Shortcuts.BINDING,\n    triggerCompletionsPostPick: true,\n  });\n  const newIntegration: CommandsCompletion = generateCreateNewCommand({\n    text: \"\",\n    displayText: \"New datasource\",\n    action: () => {\n      executeCommand({\n        actionType: SlashCommand.NEW_INTEGRATION,\n        args: {},\n      });\n      // Event for datasource creation click\n      const entryPoint = DatasourceCreateEntryPoints.CODE_EDITOR_SLASH_COMMAND;\n      AnalyticsUtil.logEvent(\"NAVIGATE_TO_CREATE_NEW_DATASOURCE_PAGE\", {\n        entryPoint,\n      });\n    },\n    shortcut: Shortcuts.PLUS,\n  });\n\n  const suggestions = entitiesForSuggestions.map((suggestion) => {\n    const name = suggestion.name;\n    return {\n      text:\n        suggestion.type === ENTITY_TYPE.ACTION\n          ? `{{${name}.data}}`\n          : suggestion.type === ENTITY_TYPE.JSACTION\n            ? `{{${name}.}}`\n            : `{{${name}}}`,\n      displayText: `${name}`,\n      className: \"CodeMirror-commands group relative Codemirror-commands-apis\",\n      data: suggestion,\n      triggerCompletionsPostPick: suggestion.type !== ENTITY_TYPE.ACTION,\n      render: (element: HTMLElement, _: unknown, data: CommandsCompletion) => {\n        let icon = null;\n        const completionData = data.data as NavigationData;\n        const plugin = pluginIdToPlugin[completionData.pluginId || \"\"];\n        if (completionData.type === ENTITY_TYPE.JSACTION) {\n          icon = JsFileIconV2(16, 16);\n        } else if (plugin?.iconLocation) {\n          icon = (\n            <EntityIcon height=\"16px\" width=\"16px\">\n              <img src={getAssetUrl(plugin.iconLocation)} />\n            </EntityIcon>\n          );\n        }\n        ReactDOM.render(\n          <Command\n            eventParams={{\n              actionId: suggestion.id,\n              datasourceId: suggestion.datasourceId || \"\",\n              pluginName: suggestion.pluginName || \"\",\n              actionType: plugin?.type === PluginType.DB ? \"Query\" : \"API\",\n              isMock: !!suggestion?.isMock,\n              from: NavigationMethod.SlashCommandHint,\n            }}\n            icon={icon}\n            name={data.displayText as string}\n            url={suggestion.url}\n          />,\n          element,\n        );\n      },\n    };\n  });\n  const datasourceCommands = datasources.map((action) => {\n    return {\n      text: \"\",\n      displayText: `${action.name}`,\n      className: \"CodeMirror-commands\",\n      data: action,\n      action: (callback?: (completion: string) => void) =>\n        executeCommand({\n          actionType: SlashCommand.NEW_QUERY,\n          args: { datasource: action },\n          callback,\n        }),\n      render: (element: HTMLElement, self: any, data: CommandsCompletion) => {\n        const completionData = data.data as Datasource;\n        const icon = (\n          <EntityIcon height=\"16px\" width=\"16px\">\n            <img\n              src={getAssetUrl(\n                pluginIdToPlugin[completionData.pluginId].iconLocation,\n              )}\n            />\n          </EntityIcon>\n        );\n        ReactDOM.render(\n          <Command icon={icon} name={`New ${data.displayText} query`} />,\n          element,\n        );\n      },\n    };\n  });\n  const commonCommands: CommandsCompletion[] = [];\n\n  if (enableAIAssistance) {\n    const askGPT: CommandsCompletion = generateCreateNewCommand({\n      text: \"\",\n      displayText: APPSMITH_AI,\n      shortcut: Shortcuts.ASK_AI,\n      triggerCompletionsPostPick: true,\n      isBeta: true,\n      action: () => {\n        executeCommand({\n          actionType: SlashCommand.ASK_AI,\n          args: aiContext,\n        });\n      },\n    });\n    commonCommands.unshift(askGPT);\n  }\n\n  if (currentEntityType !== ENTITY_TYPE.JSACTION) {\n    // New binding command is not applicable in JS Objects\n    commonCommands.push(newBinding);\n  }\n\n  // Filter common commands based on search text\n  const commonCommandsMatchingSearchText = matchingCommands(\n    commonCommands,\n    searchText,\n  ).slice(0, NO_OF_QUERIES_TO_SHOW_BY_DEFAULT);\n\n  filteredCommands.push(...commonCommandsMatchingSearchText);\n\n  if (currentEntityType !== ENTITY_TYPE.JSACTION) {\n    // Binding suggestions and create query commands are not applicable in JS Objects\n\n    // Get top 5 matching suggestions\n    const suggestionsMatchingSearchText = matchingCommands(\n      suggestions,\n      searchText,\n    );\n\n    const limitedSuggestions = suggestionsMatchingSearchText.slice(\n      0,\n      NO_OF_QUERIES_TO_SHOW_BY_DEFAULT,\n    );\n\n    const loadMoreCommand = showMoreCommandOption(\n      getShowMoreLabel(suggestionsMatchingSearchText),\n      editor,\n      focusEditor,\n      suggestions,\n      searchText,\n    );\n\n    if (suggestionsMatchingSearchText.length) {\n      // Add header only if there are suggestions\n      filteredCommands.push(\n        commandsHeader(\"Bind data\", \"\", filteredCommands.length > 0),\n      );\n      filteredCommands.push(...limitedSuggestions);\n      if (\n        suggestionsMatchingSearchText.length > NO_OF_QUERIES_TO_SHOW_BY_DEFAULT\n      ) {\n        filteredCommands.push(loadMoreCommand);\n      }\n    }\n\n    if (currentEntityType === ENTITY_TYPE.WIDGET) {\n      const createNewCommands: CommandsCompletion[] = [];\n      createNewCommands.push(...datasourceCommands);\n\n      // Get top 3 matching create new commands\n      const createNewCommandsMatchingSearchText = matchingCommands(\n        createNewCommands,\n        searchText,\n      ).slice(0, 3);\n\n      // Check if new integration command matches search text\n      createNewCommandsMatchingSearchText.push(\n        ...matchingCommands([newIntegration], searchText),\n      );\n\n      if (createNewCommandsMatchingSearchText.length) {\n        // Add header only if there are create new commands\n        filteredCommands.push(\n          commandsHeader(\"Create a query\", \"\", filteredCommands.length > 0),\n        );\n        filteredCommands.push(...createNewCommandsMatchingSearchText);\n      }\n    }\n  }\n\n  return filteredCommands;\n};\n","import CodeMirror from \"codemirror\";\nimport type {\n  FieldEntityInformation,\n  HintHelper,\n} from \"components/editorComponents/CodeEditor/EditorConfig\";\nimport type { CommandsCompletion } from \"utils/autocomplete/CodemirrorTernService\";\nimport { generateQuickCommands } from \"./generateQuickCommands\";\nimport type { Datasource } from \"entities/Datasource\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport log from \"loglevel\";\nimport { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport {\n  checkIfCursorInsideBinding,\n  shouldShowSlashCommandMenu,\n} from \"components/editorComponents/CodeEditor/codeEditorUtils\";\nimport type { SlashCommandPayload } from \"entities/Action\";\nimport type { FeatureFlags } from \"@appsmith/entities/FeatureFlag\";\nimport type {\n  EntityNavigationData,\n  NavigationData,\n} from \"selectors/navigationSelectors\";\nimport { getAIContext } from \"@appsmith/components/editorComponents/GPT/trigger\";\nimport type { Plugin } from \"api/PluginApi\";\n\nexport const getShowHintOptions = (\n  list: CommandsCompletion[],\n  editor: CodeMirror.Editor,\n  focusEditor: (focusOnLine?: number, chOffset?: number) => void,\n  searchText: string = \"\",\n) => {\n  let currentSelection: CommandsCompletion = {\n    data: {},\n    text: \"\",\n    shortcut: \"\",\n    displayText: \"\",\n  };\n  const cursor = editor.getCursor();\n  return {\n    hint: () => {\n      const hints = {\n        list,\n        from: {\n          ch: cursor.ch - searchText.length - 1,\n          line: cursor.line,\n        },\n        to: editor.getCursor(),\n        selectedHint: list[0]?.isHeader ? 1 : 0,\n      };\n      function handleSelection(selected: CommandsCompletion) {\n        currentSelection = selected;\n      }\n      function handlePick(selected: CommandsCompletion) {\n        if (selected.action && typeof selected.action === \"function\") {\n          const callback = (completion: string) => {\n            editor.replaceRange(completion, cursor);\n          };\n          selected.action(callback);\n        }\n\n        // Focus on the editor if the selected command has text\n        if (selected.text) {\n          focusEditor(editor.getCursor().line, 2);\n        }\n\n        selected.triggerCompletionsPostPick &&\n          CodeMirror.signal(editor, \"postPick\", selected.displayText);\n\n        try {\n          const { data, ...rest } = selected;\n          const { name, type } = data as NavigationData;\n          AnalyticsUtil.logEvent(\"SLASH_COMMAND\", {\n            ...rest,\n            type,\n            name,\n          });\n        } catch (e) {\n          log.debug(e, \"Error logging slash command\");\n        }\n        CodeMirror.off(hints, \"pick\", handlePick);\n        CodeMirror.off(hints, \"select\", handleSelection);\n      }\n      CodeMirror.on(hints, \"pick\", handlePick);\n      CodeMirror.on(hints, \"select\", handleSelection);\n      return hints;\n    },\n    extraKeys: {\n      Up: (cm: CodeMirror.Editor, handle: any) => {\n        handle.moveFocus(-1);\n        if (currentSelection.isHeader === true) {\n          handle.moveFocus(-1);\n        }\n      },\n      Down: (cm: CodeMirror.Editor, handle: any) => {\n        handle.moveFocus(1);\n        if (currentSelection.isHeader === true) {\n          handle.moveFocus(1);\n        }\n      },\n    },\n    completeSingle: false,\n  };\n};\n\nexport const slashCommandHintHelper: HintHelper = (\n  _,\n  entitiesForNavigation: EntityNavigationData,\n) => {\n  const entitiesForSuggestions: NavigationData[] = Object.values(\n    entitiesForNavigation || {},\n  );\n  return {\n    showHint: (\n      editor: CodeMirror.Editor,\n      entityInfo: FieldEntityInformation,\n      {\n        datasources,\n        enableAIAssistance,\n        executeCommand,\n        featureFlags,\n        focusEditor,\n        pluginIdToPlugin,\n        recentEntities,\n      }: {\n        datasources: Datasource[];\n        executeCommand: (payload: SlashCommandPayload) => void;\n        pluginIdToPlugin: Record<string, Plugin>;\n        recentEntities: string[];\n        entityId: string;\n        featureFlags: FeatureFlags;\n        enableAIAssistance: boolean;\n        focusEditor: (focusOnLine?: number, chOffset?: number) => void;\n      },\n    ): boolean => {\n      // @ts-expect-error: Types are not available\n      editor.closeHint();\n      const { entityType, propertyPath, widgetType } = entityInfo;\n      const currentEntityType = entityType || ENTITY_TYPE.ACTION;\n      const filteredEntitiesForSuggestions = entitiesForSuggestions.filter(\n        (entity) => {\n          return entity.type !== currentEntityType;\n        },\n      );\n      const showSlashCommandMenu = shouldShowSlashCommandMenu(\n        widgetType,\n        propertyPath,\n      );\n      const cursorBetweenBinding = checkIfCursorInsideBinding(editor);\n      const cursorPosition = editor.getCursor();\n      const currentLineValue = editor.getLine(cursorPosition.line);\n      const slashIndex = currentLineValue.lastIndexOf(\"/\");\n      const shouldShowBinding =\n        showSlashCommandMenu || (!cursorBetweenBinding && slashIndex > -1);\n      const searchText = currentLineValue.substring(slashIndex + 1);\n\n      if (!shouldShowBinding) return false;\n\n      const aiContext = getAIContext({\n        currentLineValue,\n        cursorPosition,\n        editor,\n        slashIndex,\n        entityType,\n      });\n\n      if (!aiContext) return false;\n\n      const list = generateQuickCommands(\n        filteredEntitiesForSuggestions,\n        currentEntityType,\n        searchText,\n        {\n          aiContext,\n          datasources,\n          executeCommand,\n          pluginIdToPlugin,\n          recentEntities,\n          featureFlags,\n          enableAIAssistance,\n        },\n        editor,\n        focusEditor,\n      );\n      editor.showHint(\n        getShowHintOptions(list, editor, focusEditor, searchText),\n      );\n      return true;\n    },\n    fireOnFocus: true,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { setDebuggerSelectedTab, showDebugger } from \"actions/debuggerActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAppMode } from \"@appsmith/selectors/applicationSelectors\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport { getTypographyByKey } from \"design-system-old\";\nimport type { Message } from \"entities/AppsmithConsole\";\nimport ContextualMenu from \"./ContextualMenu\";\nimport { DEBUGGER_TAB_KEYS } from \"./helpers\";\nimport type { FieldEntityInformation } from \"../CodeEditor/EditorConfig\";\nimport { Button } from \"design-system\";\n\nconst EVDebugButton = styled(Button)`\n  ${getTypographyByKey(\"btnSmall\")};\n  display: flex;\n  width: fit-content;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  cursor: pointer;\n  margin-top: 6px;\n`;\n\nexport function EvaluatedValueDebugButton(props: {\n  error: Message;\n  entity?: FieldEntityInformation;\n}) {\n  return (\n    <Wrapper>\n      <ContextualMenu\n        enableTooltip={false}\n        entity={props.entity}\n        error={props.error}\n      >\n        <EVDebugButton endIcon=\"down-arrow\" kind=\"error\" size=\"sm\">\n          Debug\n        </EVDebugButton>\n      </ContextualMenu>\n    </Wrapper>\n  );\n}\n\nconst StyledButton = styled(Button)`\n  && {\n    width: fit-content;\n    margin-top: 4px;\n    text-transform: none;\n    ${getTypographyByKey(\"p2\")}\n  }\n`;\n\ninterface DebugCTAProps {\n  className?: string;\n  // For Analytics\n  source?: string;\n}\n\nfunction DebugCTA(props: DebugCTAProps) {\n  const dispatch = useDispatch();\n  const appMode = useSelector(getAppMode);\n\n  if (appMode === \"PUBLISHED\") return null;\n\n  const onClick = () => {\n    props.source &&\n      AnalyticsUtil.logEvent(\"OPEN_DEBUGGER\", {\n        source: props.source,\n      });\n    dispatch(showDebugger(true));\n    dispatch(setDebuggerSelectedTab(DEBUGGER_TAB_KEYS.ERROR_TAB));\n  };\n\n  return <DebugButton className={props.className} onClick={onClick} />;\n}\n\ninterface DebugButtonProps {\n  className?: string;\n  onClick: () => void;\n}\n\nexport function DebugButton(props: DebugButtonProps) {\n  return (\n    <StyledButton\n      className={props.className}\n      kind=\"error\"\n      onClick={props.onClick}\n      size=\"sm\"\n      startIcon=\"bug-line\"\n    >\n      Debug\n    </StyledButton>\n  );\n}\n\nexport default DebugCTA;\n","import type { AppState } from \"@appsmith/reducers\";\nimport { Icon } from \"design-system\";\nimport type { Placement, PopperOptions } from \"popper.js\";\nimport PopperJS from \"popper.js\";\nimport React, { useEffect, useMemo, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { getThemeDetails, ThemeMode } from \"selectors/themeSelectors\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { generateReactKey } from \"utils/generators\";\nimport { draggableElement } from \"./utils\";\n\nexport interface PopperProps {\n  boundaryParent?: Element | PopperJS.Boundary;\n  parentElement?: Element | null;\n  zIndex: number;\n  isOpen: boolean;\n  borderRadius?: string;\n  themeMode?: ThemeMode;\n  targetNode?: Element;\n  children: JSX.Element | null;\n  renderDragBlock?: JSX.Element;\n  renderDragBlockPositions?: {\n    left?: string;\n    top?: string;\n    zIndex?: string;\n    position?: string;\n  };\n  style?: React.CSSProperties;\n  placement: Placement;\n  modifiers?: Partial<PopperOptions[\"modifiers\"]>;\n  isDraggable?: boolean;\n  disablePopperEvents?: boolean;\n  cypressSelectorDragHandle?: string;\n  portalContainer?: Element;\n  position?: {\n    top: number;\n    left: number;\n  };\n  onPositionChange?: (position: { top: number; left: number }) => void;\n  setPosition?: (e: any) => void;\n  setIsDragging?: (e: any) => void;\n  isDragging?: boolean;\n  customParent?: Element | undefined;\n  editorRef?: React.RefObject<HTMLDivElement>;\n  // DraggableNode?: any;\n}\n\nconst PopperWrapper = styled.div<{ zIndex: number; borderRadius?: string }>`\n  z-index: ${(props) => props.zIndex};\n  position: absolute;\n  border-radius: ${(props) => props.borderRadius || \"0\"};\n  box-shadow: 0 6px 20px 0px rgba(0, 0, 0, 0.15);\n\n  &&&:hover .drag-handle-block {\n    display: flex;\n  }\n`;\n\nconst DragHandleBlock = styled.div`\n  cursor: grab;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 43px;\n  height: 28px;\n  z-index: 3;\n  background-color: var(--ads-v2-color-bg);\n  border-radius: var(--ads-v2-border-radius);\n  position: relative;\n  top: -15px;\n  pointer-events: auto;\n\n  :hover {\n    background-color: var(--ads-v2-color-bg-subtle);\n  }\n`;\n\ninterface PopperDragHandleProps {\n  dragFn?: (val: boolean) => void;\n}\n\n/* eslint-disable react/display-name */\nexport default (props: PopperProps) => {\n  const contentRef = useRef<HTMLDivElement>(null);\n  const popperIdRef = useRef(generateReactKey());\n  const popperId = popperIdRef.current;\n\n  const onPositionChangeFn = (e: any) => {\n    if (contentRef.current && !!props.setPosition) {\n      contentRef.current.style.transform = \"unset\";\n      contentRef.current.style.top = e.top + \"px\";\n      contentRef.current.style.left = e.left + \"px\";\n\n      props.setPosition(e);\n\n      // add focus back to codemirror component.\n      if (\n        props?.editorRef &&\n        props?.editorRef?.current &&\n        props?.editorRef?.current?.children[1] &&\n        !!(props?.editorRef?.current?.children[1] as any)?.CodeMirror\n      )\n        (props?.editorRef?.current?.children[1] as any)?.CodeMirror.focus();\n    }\n  };\n\n  const {\n    boundaryParent = \"viewport\",\n    cypressSelectorDragHandle,\n    disablePopperEvents = false,\n    isDraggable = false,\n    onPositionChange = onPositionChangeFn,\n    position,\n    renderDragBlock,\n    renderDragBlockPositions,\n    themeMode = props.themeMode || ThemeMode.LIGHT,\n  } = props;\n\n  // Memoizing to avoid rerender of draggable icon.\n  // What is the cost of memoizing?\n  const popperTheme = useMemo(\n    () => getThemeDetails({} as AppState, themeMode),\n    [themeMode],\n  );\n\n  const PopperDragHandle = (props: PopperDragHandleProps) => {\n    return (\n      <DragHandleBlock\n        className=\"drag-handle-block\"\n        onMouseEnter={(e) => {\n          e.stopPropagation();\n          if (props?.dragFn) {\n            props.dragFn(true);\n          }\n        }}\n        onMouseLeave={(e) => {\n          e.stopPropagation();\n          if (props?.dragFn) {\n            props.dragFn(false);\n          }\n        }}\n      >\n        <Icon name=\"drag-handle\" size=\"lg\" />\n      </DragHandleBlock>\n    );\n  };\n\n  useEffect(() => {\n    const parentElement =\n      props?.customParent ||\n      (props?.targetNode && props.targetNode?.parentElement);\n\n    if (\n      parentElement &&\n      parentElement.parentElement &&\n      props.targetNode &&\n      props.isOpen\n    ) {\n      // TODO: To further optimize this, we can go through the popper API\n      // and figure out a way to keep an app instance level popper instance\n      // which we can update to have different references when called here.\n      // However, the performance benefit gained by such an optimization\n      // remains to be discovered.\n      const _popper = new PopperJS(\n        props.targetNode,\n        contentRef.current as unknown as Element,\n        {\n          ...(isDraggable && disablePopperEvents\n            ? {}\n            : { placement: props.placement }),\n          onCreate: (popperData) => {\n            const elementRef: any = popperData.instance.popper;\n            if (isDraggable && position) {\n              const initPositon =\n                position || elementRef.getBoundingClientRect();\n              elementRef.style.transform = \"unset\";\n              elementRef.style.top = initPositon.top + \"px\";\n              elementRef.style.left = initPositon.left + \"px\";\n            }\n          },\n          modifiers: {\n            keepTogether: {\n              enabled: false,\n            },\n            arrow: {\n              enabled: false,\n            },\n            preventOverflow: {\n              enabled: true,\n              /*\n                Prevent the FilterPane from overflowing the canvas when the\n                table widget is on the very top of the canvas.\n              */\n              boundariesElement: boundaryParent,\n            },\n            ...props.modifiers,\n          },\n        },\n      );\n      if (isDraggable) {\n        disablePopperEvents && _popper.disableEventListeners();\n        draggableElement(\n          `${popperId}-popper`,\n          _popper.popper,\n          onPositionChange,\n          parentElement,\n          position,\n          renderDragBlockPositions,\n          () =>\n            !!renderDragBlock ? (\n              renderDragBlock\n            ) : (\n              <ThemeProvider theme={popperTheme}>\n                <PopperDragHandle dragFn={props.setIsDragging} />\n              </ThemeProvider>\n            ),\n          cypressSelectorDragHandle,\n        );\n      }\n\n      return () => {\n        _popper.destroy();\n      };\n    }\n  }, [\n    props.targetNode,\n    props.isOpen,\n    JSON.stringify(props.modifiers),\n    props.placement,\n    disablePopperEvents,\n  ]);\n  return createPortal(\n    props.isOpen && (\n      <PopperWrapper\n        borderRadius={props.borderRadius}\n        ref={contentRef}\n        style={props.style || {}}\n        zIndex={props.zIndex}\n      >\n        {props.children}\n      </PopperWrapper>\n    ),\n    props.portalContainer ? props.portalContainer : document.body,\n  );\n};\n","import type { EntityTypeValue } from \"@appsmith/entities/DataTree/types\";\nimport type {\n  EntityNavigationData,\n  NavigationData,\n} from \"selectors/navigationSelectors\";\n\nexport const createNavData = (general: {\n  name: string;\n  id: string;\n  type: EntityTypeValue;\n  isfunction?: boolean;\n  children: EntityNavigationData;\n  key?: string;\n  url: string | undefined;\n  pluginName?: string;\n  pluginId?: string;\n  datasourceId?: string;\n  isMock?: boolean;\n  actionType?: string;\n  widgetType?: string;\n}): NavigationData => {\n  return {\n    name: general.name,\n    id: general.id,\n    type: general.type,\n    isfunction: general.isfunction,\n    children: general.children,\n    key: general.key,\n    url: general.url,\n    navigable: !!general.url,\n    pluginName: general.pluginName,\n    datasourceId: general.datasourceId,\n    isMock: general.isMock,\n    actionType: general.actionType,\n    pluginId: general.pluginId,\n    widgetType: general.widgetType,\n  };\n};\n","import type { EntityTypeValue } from \"@appsmith/entities/DataTree/types\";\nimport { ACTION_TYPE, JSACTION_TYPE } from \"@appsmith/entities/DataTree/types\";\nimport type { DataTree } from \"entities/DataTree/dataTreeTypes\";\nimport { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport { createSelector } from \"reselect\";\nimport {\n  getCurrentActions,\n  getDatasources,\n  getJSCollections,\n  getModuleInstanceEntities,\n  getModuleInstances,\n  getPlugins,\n} from \"@appsmith/selectors/entitiesSelector\";\nimport { getWidgets } from \"sagas/selectors\";\nimport { getCurrentPageId } from \"selectors/editorSelectors\";\nimport { getActionConfig } from \"pages/Editor/Explorer/Actions/helpers\";\nimport { jsCollectionIdURL, widgetURL } from \"@appsmith/RouteBuilder\";\nimport { getDataTree } from \"selectors/dataTreeSelectors\";\nimport { createNavData } from \"utils/NavigationSelector/common\";\nimport { getWidgetChildrenNavData } from \"utils/NavigationSelector/WidgetChildren\";\nimport { getJsChildrenNavData } from \"utils/NavigationSelector/JsChildren\";\nimport {\n  getEntityNameAndPropertyPath,\n  isJSAction,\n} from \"@appsmith/workers/Evaluation/evaluationUtils\";\nimport type { AppState } from \"@appsmith/reducers\";\nimport { PluginType } from \"entities/Action\";\nimport type { StoredDatasource } from \"entities/Action\";\nimport type { Datasource } from \"entities/Datasource\";\nimport { getModuleInstanceNavigationData } from \"@appsmith/utils/moduleInstanceNavigationData\";\n\nexport interface NavigationData {\n  name: string;\n  id: string;\n  type: EntityTypeValue;\n  isfunction?: boolean;\n  url: string | undefined;\n  navigable: boolean;\n  children: EntityNavigationData;\n  key?: string;\n  pluginName?: string;\n  pluginId?: string;\n  isMock?: boolean;\n  datasourceId?: string;\n  actionType?: string;\n  widgetType?: string;\n  value?: boolean | string;\n}\nexport type EntityNavigationData = Record<string, NavigationData>;\n\nexport const getModulesData = createSelector(\n  getModuleInstances,\n  getModuleInstanceEntities,\n  (moduleInstances, moduleInstanceEntities) => {\n    return {\n      moduleInstances,\n      moduleInstanceEntities,\n    };\n  },\n);\n\nexport const getEntitiesForNavigation = createSelector(\n  getCurrentActions,\n  getPlugins,\n  getJSCollections,\n  getWidgets,\n  getCurrentPageId,\n  getDataTree,\n  getDatasources,\n  getModulesData,\n  (_: any, entityName: string | undefined) => entityName,\n  (\n    actions,\n    plugins,\n    jsActions,\n    widgets,\n    pageId,\n    dataTree: DataTree,\n    datasources: Datasource[],\n    modulesData,\n    entityName: string | undefined,\n  ) => {\n    // data tree retriggers this\n    jsActions = jsActions.filter((a) => a.config.pageId === pageId);\n    const navigationData: EntityNavigationData = {};\n    if (!dataTree) return navigationData;\n\n    actions.forEach((action) => {\n      const plugin = plugins.find(\n        (plugin) => plugin.id === action.config.pluginId,\n      );\n      const datasourceId = (action.config?.datasource as StoredDatasource)?.id;\n      const datasource = datasources.find(\n        (datasource) => datasource.id === datasourceId,\n      );\n      const config = getActionConfig(action.config.pluginType);\n      if (!config) return;\n      navigationData[action.config.name] = createNavData({\n        id: action.config.id,\n        name: action.config.name,\n        type: ENTITY_TYPE.ACTION,\n        url: config.getURL(\n          pageId,\n          action.config.id,\n          action.config.pluginType,\n          plugin,\n        ),\n        children: {},\n        // Adding below data as it is required for analytical events\n        pluginName: plugin?.name,\n        pluginId: plugin?.id,\n        datasourceId: datasource?.id,\n        isMock: datasource?.isMock,\n        actionType:\n          action.config.pluginType === PluginType.DB ? \"Query\" : \"API\",\n      });\n    });\n\n    jsActions.forEach((jsAction) => {\n      // dataTree for null check\n      const result = getJsChildrenNavData(jsAction, pageId, dataTree);\n      navigationData[jsAction.config.name] = createNavData({\n        id: jsAction.config.id,\n        name: jsAction.config.name,\n        type: ENTITY_TYPE.JSACTION,\n        url: jsCollectionIdURL({ pageId, collectionId: jsAction.config.id }),\n        children: result?.childNavData || {},\n      });\n    });\n\n    Object.values(widgets).forEach((widget) => {\n      // dataTree to get entityDefinitions, for url (can use getWidgetByName?)\n      const result = getWidgetChildrenNavData(\n        widget.widgetName,\n        widget.type,\n        dataTree,\n        pageId,\n      );\n      navigationData[widget.widgetName] = createNavData({\n        id: widget.widgetId,\n        name: widget.widgetName,\n        type: ENTITY_TYPE.WIDGET,\n        url: widgetURL({ pageId, selectedWidgets: [widget.widgetId] }),\n        children: result?.childNavData || {},\n        widgetType: widget.type,\n      });\n    });\n    let moduleInstanceNavigationData: EntityNavigationData = {};\n    if (!!modulesData.moduleInstances) {\n      moduleInstanceNavigationData = getModuleInstanceNavigationData(\n        modulesData.moduleInstances,\n        modulesData.moduleInstanceEntities,\n      );\n    }\n\n    if (\n      entityName &&\n      isJSAction(dataTree[entityName]) &&\n      entityName in navigationData\n    ) {\n      return {\n        ...navigationData,\n        ...moduleInstanceNavigationData,\n        this: navigationData[entityName],\n      };\n    }\n    return {\n      ...navigationData,\n      ...moduleInstanceNavigationData,\n    };\n  },\n);\nexport const getPathNavigationUrl = createSelector(\n  [\n    (state: AppState, entityName: string) =>\n      getEntitiesForNavigation(state, entityName),\n    (_, __, fullPath: string | undefined) => fullPath,\n  ],\n  (entitiesForNavigation, fullPath) => {\n    if (!fullPath) return undefined;\n    const { entityName, propertyPath } = getEntityNameAndPropertyPath(fullPath);\n    const navigationData = entitiesForNavigation[entityName];\n    if (!navigationData) return undefined;\n    switch (navigationData.type) {\n      case JSACTION_TYPE: {\n        const jsPropertyNavigationData = navigationData.children[propertyPath];\n        return jsPropertyNavigationData.url;\n      }\n\n      case ACTION_TYPE:\n        {\n          return navigationData.url;\n        }\n        break;\n      default:\n        return undefined;\n    }\n  },\n);\n","import type { JSActionEntity } from \"@appsmith/entities/DataTree/types\";\nimport type { DataTree } from \"entities/DataTree/dataTreeTypes\";\nimport { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport { keyBy } from \"lodash\";\nimport type { JSCollectionData } from \"@appsmith/reducers/entityReducers/jsActionsReducer\";\nimport { jsCollectionIdURL } from \"@appsmith/RouteBuilder\";\nimport type {\n  EntityNavigationData,\n  NavigationData,\n} from \"selectors/navigationSelectors\";\nimport { createNavData } from \"./common\";\n\nexport const getJsChildrenNavData = (\n  jsAction: JSCollectionData,\n  pageId: string,\n  dataTree: DataTree,\n) => {\n  let childNavData: EntityNavigationData = {};\n\n  const dataTreeAction = dataTree[jsAction.config.name] as JSActionEntity;\n  const jsActionVariables = jsAction.config.variables || [];\n  if (dataTreeAction) {\n    let children: NavigationData[] = jsAction.config.actions.map((jsChild) => {\n      return createNavData({\n        id: `${jsAction.config.name}.${jsChild.name}`,\n        name: `${jsAction.config.name}.${jsChild.name}`,\n        type: ENTITY_TYPE.JSACTION,\n        isfunction: true, // use this to identify function\n        url: jsCollectionIdURL({\n          pageId,\n          collectionId: jsAction.config.id,\n          functionName: jsChild.name,\n        }),\n        children: {},\n        key: jsChild.name,\n      });\n    });\n\n    const variableChildren: NavigationData[] = jsActionVariables.map(\n      (jsChild) => {\n        return createNavData({\n          id: `${jsAction.config.name}.${jsChild.name}`,\n          name: `${jsAction.config.name}.${jsChild.name}`,\n          type: ENTITY_TYPE.JSACTION,\n          isfunction: false,\n          url: jsCollectionIdURL({\n            pageId,\n            collectionId: jsAction.config.id,\n            functionName: jsChild.name,\n          }),\n          children: {},\n          key: jsChild.name,\n        });\n      },\n    );\n\n    children = children.concat(variableChildren);\n\n    childNavData = keyBy(children, (data) => data.key) as Record<\n      string,\n      NavigationData\n    >;\n\n    return { childNavData };\n  }\n};\n","import type { WidgetEntity } from \"@appsmith/entities/DataTree/types\";\nimport type { DataTree } from \"entities/DataTree/dataTreeTypes\";\nimport { ENTITY_TYPE } from \"entities/DataTree/dataTreeFactory\";\nimport { builderURL } from \"@appsmith/RouteBuilder\";\nimport type { EntityNavigationData } from \"selectors/navigationSelectors\";\nimport { createNavData } from \"./common\";\n\nexport const getWidgetChildrenNavData = (\n  widgetName: string,\n  widgetType: string,\n  dataTree: DataTree,\n  pageId: string,\n) => {\n  const dataTreeWidget: WidgetEntity = dataTree[widgetName] as WidgetEntity;\n  if (widgetType === \"FORM_WIDGET\") {\n    const children: EntityNavigationData = {};\n    const formChildren: EntityNavigationData = {};\n    if (dataTreeWidget) {\n      Object.keys(dataTreeWidget.data || {}).forEach((childWidgetName) => {\n        const childWidgetId = (dataTree[childWidgetName] as WidgetEntity)\n          .widgetId;\n        formChildren[childWidgetName] = createNavData({\n          id: `${widgetName}.data.${childWidgetName}`,\n          name: childWidgetName,\n          type: ENTITY_TYPE.WIDGET,\n          url: builderURL({ pageId, hash: childWidgetId }),\n          children: {},\n        });\n      });\n    }\n\n    return { childNavData: children };\n  }\n};\n","import type { ModuleInstance } from \"@appsmith/constants/ModuleInstanceConstants\";\nimport type { EntityNavigationData } from \"selectors/navigationSelectors\";\n\nexport const getModuleInstanceNavigationData = (\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  moduleInstances: Record<string, ModuleInstance>,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  moduleInstanceEntities: unknown,\n): EntityNavigationData => {\n  return {};\n};\n"],"names":["modifiers","offset","enabled","preventOverflow","boundariesElement","padding","Wrapper","styled","_templateObject","_taggedTemplateLiteral","THEME","ContentWrapper","_templateObject2","props","theme","evaluatedValuePopup","width","height","CopyIconWrapper","Button","_templateObject3","CurrentValueWrapper","_templateObject4","CodeWrapper","_templateObject5","TypeText","_templateObject6","padded","addBorder","ErrorText","_templateObject7","spaces","StyledIcon","Icon","_templateObject8","StyledTitle","_templateObject9","StyledTitleName","_templateObject10","AsyncFunctionErrorView","_templateObject11","CollapseToggle","isOpen","_jsx","className","name","PreparedStatementViewerContainer","_templateObject12","Classes","PreparedStatementParameter","_templateObject13","PreparedStatementViewer","_props$evaluatedValue","evaluatedValue","parameters","value","Sentry","level","Severity","extra","stringSegments","split","paramsWithTooltips","_toConsumableArray","matchAll","map","matches","param","Tooltip","content","concat","trigger","children","segment","index","_jsxs","CurrentValueViewer","_useState","useState","_useState2","_slicedToArray","openEvaluatedValue","setOpenEvaluatedValue","ControlledCurrentValueViewer","_objectSpread","memo","collapseStringsAfterLength","onCopyContentText","codeWrapperRef","React","colorTheme","ref","undefined","_isObject","Array","isArray","preparedStatementViewer","reactJsonProps","EditorTheme","enableClipboard","displayObjectSize","displayDataTypes","style","fontSize","collapsed","shouldCollapse","field","ReactJson","src","toString","_Fragment","hideLabel","onClick","Collapse","hasOwnProperty","isIconButton","kind","arguments","length","stringifiedContent","_isString","JSON","stringify","copy","toast","copyContent","size","startIcon","prevProps","nextProps","equal","PopoverContent","_props$expected","_props$entity","_props$entity2","error","typeTextRef","dispatch","useDispatch","popupContext","useSelector","state","getEvaluatedPopupState","dataTreePath","_useState3","type","_useState4","openExpectedDataType","setOpenExpectedDataType","_useState5","expected","openExampleTextByDefault","example","_useState6","openExpectedExample","setOpenExpectedExample","_useState7","_useState8","errors","hasError","onMouseEnter","onMouseLeave","entityName","getEntityNameAndPropertyPath","errorWithSource","find","_ref","rootcause","errorNavigationUrl","_errorWithSource$kind","getPathNavigationUrl","useEffect","setEvalPopupState","entity","evaluatedPopUpLabel","message","getErrorMessage","errorMessage","Link","showDebugger","setDebuggerSelectedTab","DEBUGGER_TAB_KEYS","modText","target","to","EvaluatedValueDebugButton","errorType","UNDEFINED_VALIDATION","hideEvaluatedValue","_useState9","_useState10","contentHovered","setContentHovered","_useState11","_useState12","timeoutId","setTimeoutId","_useState13","_useState14","position","setPosition","_useState15","_useState16","isDragging","setIsDragging","wrapperRef","useRef","_useMemo","useMemo","placement","current","popperPlacement","_wrapperRef$current$g","getBoundingClientRect","left","right","halfViewportWidth","window","innerWidth","_useMemo2","Popper","customParent","document","body","editorRef","isDraggable","targetNode","zIndex","popperZIndex","Layers","clearTimeout","id","setTimeout","evaluationSubstitutionType","EvaluationSubstitutionType","useValidationMessage","Shortcuts","filteredCommands","getShowMoreLabel","suggestions","matchingCommands","list","searchText","filter","action","displayText","toLowerCase","indexOf","commandsHeader","text","data","isHeader","shortcut","generateCreateNewCommand","description","isBeta","triggerCompletionsPostPick","render","element","self","ReactDOM","Command","desc","icon","iconsByType","_defineProperty","BINDING","PLUS","FUNCTION","ASK_AI","SHOW_MORE","ShowMoreCommand","e","event","stopPropagation","preventDefault","suggestionsMatchingSearchText","showMoreLabel","loadMoreOptionIndex","findIndex","suggestionList","slice","splice","apply","editor","showHint","getShowHintOptions","focusEditor","handleShowMoreClick","switchToAction","useCallback","url","PerformanceTracker","PerformanceTransactionName","history","invokedBy","NavigationMethod","AnalyticsUtil","eventParams","BetaCard","createMessage","EDIT","generateQuickCommands","entitiesForSuggestions","currentEntityType","_ref2","aiContext","datasources","enableAIAssistance","executeCommand","pluginIdToPlugin","newBinding","newIntegration","actionType","SlashCommand","args","entryPoint","DatasourceCreateEntryPoints","suggestion","ENTITY_TYPE","_","completionData","plugin","pluginId","JsFileIconV2","iconLocation","EntityIcon","getAssetUrl","actionId","datasourceId","pluginName","PluginType","isMock","from","datasourceCommands","callback","datasource","commonCommands","askGPT","APPSMITH_AI","unshift","push","commonCommandsMatchingSearchText","limitedSuggestions","loadMoreCommand","showMoreCommandOption","createNewCommands","createNewCommandsMatchingSearchText","currentSelection","cursor","getCursor","hint","_list$","hints","ch","line","selectedHint","handleSelection","selected","CodeMirror","handlePick","completion","replaceRange","rest","_objectWithoutProperties","_excluded","log","extraKeys","Up","cm","handle","moveFocus","Down","completeSingle","slashCommandHintHelper","entitiesForNavigation","Object","values","entityInfo","featureFlags","recentEntities","closeHint","entityType","propertyPath","widgetType","filteredEntitiesForSuggestions","showSlashCommandMenu","shouldShowSlashCommandMenu","cursorBetweenBinding","checkIfCursorInsideBinding","cursorPosition","currentLineValue","getLine","slashIndex","lastIndexOf","shouldShowBinding","substring","getAIContext","fireOnFocus","EVDebugButton","getTypographyByKey","ContextualMenu","enableTooltip","endIcon","StyledButton","DebugButton","PopperWrapper","borderRadius","DragHandleBlock","contentRef","popperId","generateReactKey","_props$boundaryParent","boundaryParent","cypressSelectorDragHandle","_props$disablePopperE","disablePopperEvents","_props$isDraggable","_props$onPositionChan","onPositionChange","_props$editorRef","_props$editorRef2","_props$editorRef2$cur","_props$editorRef3","_props$editorRef3$cur","_props$editorRef3$cur2","_props$editorRef4","_props$editorRef4$cur","_props$editorRef4$cur2","transform","top","focus","renderDragBlock","renderDragBlockPositions","_props$themeMode","themeMode","ThemeMode","popperTheme","getThemeDetails","PopperDragHandle","dragFn","_props$targetNode","parentElement","_popper","PopperJS","onCreate","popperData","elementRef","instance","popper","initPositon","keepTogether","arrow","disableEventListeners","draggableElement","ThemeProvider","destroy","createPortal","portalContainer","createNavData","general","isfunction","key","navigable","getModulesData","createSelector","getModuleInstances","getModuleInstanceEntities","moduleInstances","moduleInstanceEntities","getEntitiesForNavigation","getCurrentActions","getPlugins","getJSCollections","getWidgets","getCurrentPageId","getDataTree","getDatasources","actions","plugins","jsActions","widgets","pageId","dataTree","modulesData","a","config","navigationData","forEach","_action$config","_action$config$dataso","getActionConfig","pluginType","getURL","jsAction","result","dataTreeAction","jsActionVariables","variables","jsChild","jsCollectionIdURL","collectionId","functionName","variableChildren","childNavData","_keyBy","getJsChildrenNavData","widget","widgetName","dataTreeWidget","formChildren","keys","childWidgetName","childWidgetId","widgetId","builderURL","hash","getWidgetChildrenNavData","widgetURL","selectedWidgets","moduleInstanceNavigationData","isJSAction","this","__","fullPath","_getEntityNameAndProp","JSACTION_TYPE","ACTION_TYPE"],"sourceRoot":""}