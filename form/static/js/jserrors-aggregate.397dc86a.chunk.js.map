{"version":3,"file":"static/js/jserrors-aggregate.397dc86a.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/canonical-function-name.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/format-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/common/url/canonicalize-url.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/compute-stack-trace.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/string-hash-code.js","../node_modules/@newrelic/browser-agent/dist/esm/features/jserrors/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry,\n        opts\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst canonicalFunctionNameRe = /([a-z0-9]+)$/i;\n\n/**\n * Given a function name string, extracts only an alphanumeric segment at the end of the string (if one exists).\n * This is useful for stack traces, where functions might not be named (e.g., anonymous, computed).\n *\n * @param {string} functionNameString - The original function name string.\n * @returns {string|undefined} The canonical function name, or undefined if the input is falsy or no alphanumeric segments are found.\n */\nexport function canonicalFunctionName(functionNameString) {\n  if (!functionNameString) return;\n  const match = functionNameString.match(canonicalFunctionNameRe);\n  if (match) return match[1];\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nvar stripNewlinesRegex = /^\\n+|\\n+$/g;\nvar MAX_STACK_TRACE_LENGTH = 65530;\nexport function formatStackTrace(stackLines) {\n  return truncateStackLines(stackLines).replace(stripNewlinesRegex, '');\n}\n\n// takes array of stack lines and returns string with top 50 and buttom 50 lines\nfunction truncateStackLines(stackLines) {\n  var stackString;\n  if (stackLines.length > 100) {\n    var truncatedLines = stackLines.length - 100;\n    stackString = stackLines.slice(0, 50).join('\\n');\n    stackString += '\\n< ...truncated ' + truncatedLines + ' lines... >\\n';\n    stackString += stackLines.slice(-50).join('\\n');\n  } else {\n    stackString = stackLines.join('\\n');\n  }\n  return stackString;\n}\n\n// truncates stack string to limit what is sent to backend\nexport function truncateSize(stackString) {\n  return stackString.length > MAX_STACK_TRACE_LENGTH ? stackString.substr(0, MAX_STACK_TRACE_LENGTH) : stackString;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { initialLocation } from '../constants/runtime';\nimport { cleanURL } from './clean-url';\n\n/**\n * Converts a URL to its basic form without a query string or fragment. If the resulting URL is the same as the\n * loader's origin URL, returns '<inline>'.\n * @param {string} url - The URL to be canonicalized.\n * @param {string} loaderOriginUrl - The origin URL of the agent loader, used for inline detection.\n * @returns {string} The canonicalized URL, or '<inline>' if the URL matches the loader origin URL.\n */\nexport function canonicalizeUrl(url) {\n  if (typeof url !== 'string') return '';\n  const cleanedUrl = cleanURL(url);\n  const cleanedGlobalScopeUrl = cleanURL(initialLocation);\n\n  // If the URL matches the origin URL of the loader, we assume it originated within an inline script.\n  if (cleanedUrl === cleanedGlobalScopeUrl) {\n    return '<inline>';\n  } else {\n    return cleanedUrl;\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable no-useless-escape */\n\n// computeStackTrace: cross-browser stack traces in JavaScript\n//\n// Syntax:\n//   s = computeStackTrace(exception) // consider using TraceKit.report instead\n// Returns:\n//   s.name              - exception name\n//   s.message           - exception message\n//   s.stack[i].url      - JavaScript or HTML file URL\n//   s.stack[i].func     - function name, or empty for anonymous functions\n//   s.stack[i].line     - line number, if known\n//   s.stack[i].column   - column number, if known\n//   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n//   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n//\n// Supports:\n//   - Firefox:  full stack trace with line numbers and unreliable column\n//               number on top frame\n//   - Chrome:   full stack trace with line and column numbers\n//   - Safari:   line and column number for the topmost stacktrace element\n//               only\n//   - IE:       no line numbers whatsoever\n\n// Contents of Exception in various browsers.\n//\n// SAFARI:\n// ex.message = Can't find variable: qq\n// ex.line = 59\n// ex.sourceId = 580238192\n// ex.sourceURL = http://...\n// ex.expressionBeginOffset = 96\n// ex.expressionCaretOffset = 98\n// ex.expressionEndOffset = 98\n// ex.name = ReferenceError\n//\n// FIREFOX:\n// ex.message = qq is not defined\n// ex.fileName = http://...\n// ex.lineNumber = 59\n// ex.stack = ...stack trace... (see the example below)\n// ex.name = ReferenceError\n//\n// CHROME:\n// ex.message = qq is not defined\n// ex.name = ReferenceError\n// ex.type = not_defined\n// ex.arguments = ['aa']\n// ex.stack = ...stack trace...\n//\n// INTERNET EXPLORER:\n// ex.message = ...\n// ex.name = ReferenceError\nimport { formatStackTrace } from './format-stack-trace';\nimport { canonicalizeUrl } from '../../../common/url/canonicalize-url';\nvar debug = false;\nvar classNameRegex = /function (.+?)\\s*\\(/;\nvar chrome = /^\\s*at (?:((?:\\[object object\\])?(?:[^(]*\\([^)]*\\))*[^()]*(?: \\[as \\S+\\])?) )?\\(?((?:file|http|https|chrome-extension):.*?)?:(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nvar gecko = /^\\s*(?:(\\S*|global code)(?:\\(.*?\\))?@)?((?:file|http|https|chrome|safari-extension).*?):(\\d+)(?::(\\d+))?\\s*$/i;\nvar chromeEval = /^\\s*at .+ \\(eval at \\S+ \\((?:(?:file|http|https):[^)]+)?\\)(?:, [^:]*:\\d+:\\d+)?\\)$/i;\nvar ieEval = /^\\s*at Function code \\(Function code:\\d+:\\d+\\)\\s*/i;\n\n/**\n * Represents an error with a stack trace.\n * @typedef {Object} StackInfo\n * @property {string} name - The name of the error (e.g. 'TypeError').\n * @property {string} message - The error message.\n * @property {string} stackString - The stack trace as a string.\n * @property {Array<Object>} frames - An array of frames in the stack trace.\n * @property {string} frames.url - The URL of the file containing the code for the frame.\n * @property {string} frames.func - The name of the function associated with the frame.\n * @property {number} frames.line - The line number of the code in the frame.\n */\n\n/**\n * Attempts to compute a stack trace for the given exception.\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackInfo} A stack trace object containing information about the frames on the stack.\n */\nexport function computeStackTrace(ex) {\n  var stack = null;\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceBySourceAndLine(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  try {\n    stack = computeStackTraceWithMessageOnly(ex);\n    if (stack) {\n      return stack;\n    }\n  } catch (e) {\n    if (debug) {\n      throw e;\n    }\n  }\n  return {\n    mode: 'failed',\n    stackString: '',\n    frames: []\n  };\n}\n\n/**\n * Computes stack trace information from the stack property. Chrome and Gecko use this property.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @return {?Object.<string, *>} Stack trace information.\n */\nfunction computeStackTraceFromStackProp(ex) {\n  if (!ex.stack) {\n    return null;\n  }\n  var errorInfo = ex.stack.split('\\n').reduce(parseStackProp, {\n    frames: [],\n    stackLines: [],\n    wrapperSeen: false\n  });\n  if (!errorInfo.frames.length) return null;\n  return {\n    mode: 'stack',\n    name: ex.name || getClassName(ex),\n    message: ex.message,\n    stackString: formatStackTrace(errorInfo.stackLines),\n    frames: errorInfo.frames\n  };\n}\n\n/**\n * Parses a line from a JavaScript error stack trace and adds it to the given `info` object.\n * Ignores all stack entries thrown from one of our wrapper functions.\n *\n * @param {object} info - The `info` object to add the parsed line to.\n * @param {string} line - The line to parse.\n * @returns {object} The `info` object with the parsed line added.\n */\nfunction parseStackProp(info, line) {\n  let element = getStackElement(line);\n\n  // This catches lines that aren't frames (like the first line stating the error).\n  if (!element) {\n    info.stackLines.push(line);\n    return info;\n  }\n\n  // Once we've seen a wrapper, ignore all subsequent stack entries.\n  if (isNrWrapper(element.func)) info.wrapperSeen = true;\n  if (!info.wrapperSeen) {\n    // Query strings and fragments should be removed, and URLs matching the loader's origin should be \"<inline>\".\n    let canonicalUrl = canonicalizeUrl(element.url);\n    if (canonicalUrl !== element.url) {\n      line = line.replace(element.url, canonicalUrl);\n      element.url = canonicalUrl;\n    }\n    info.stackLines.push(line);\n    info.frames.push(element);\n  }\n  return info;\n}\n\n/**\n * Parses a line from a JavaScript error stack trace to extract information about a stack trace element, such as the\n * URL, function name, line number, and column number.\n *\n * @param {string} line - A single line from a JavaScript error stack trace.\n * @returns {object} An object containing information about the stack trace element, including the URL, function\n *     name, line number, and column number (if available).\n */\nfunction getStackElement(line) {\n  var parts = line.match(gecko);\n  if (!parts) parts = line.match(chrome);\n  if (parts) {\n    return {\n      url: parts[2],\n      func: parts[1] !== 'Anonymous function' && parts[1] !== 'global code' && parts[1] || null,\n      line: +parts[3],\n      column: parts[4] ? +parts[4] : null\n    };\n  }\n  if (line.match(chromeEval) || line.match(ieEval) || line === 'anonymous') {\n    return {\n      func: 'evaluated code'\n    };\n  }\n}\n\n/**\n * Computes a stack trace object from an error object, by extracting the source and line number from the error object,\n * and using them to create a single stack frame.\n *\n * @param {Error} ex - The error object to compute the stack trace for.\n * @returns {Object|null} - An object representing the computed stack trace, or null if the\n * input error object does not contain a line number.\n */\nfunction computeStackTraceBySourceAndLine(ex) {\n  if (!('line' in ex)) return null;\n  var className = ex.name || getClassName(ex);\n\n  // Safari does not provide a URL for errors in eval'd code\n  if (!ex.sourceURL) {\n    return {\n      mode: 'sourceline',\n      name: className,\n      message: ex.message,\n      stackString: className + ': ' + ex.message + '\\n    in evaluated code',\n      frames: [{\n        func: 'evaluated code'\n      }]\n    };\n  }\n\n  // Remove any query string and fragment\n  var canonicalUrl = canonicalizeUrl(ex.sourceURL);\n  var stackString = className + ': ' + ex.message + '\\n    at ' + canonicalUrl;\n  if (ex.line) {\n    stackString += ':' + ex.line;\n    if (ex.column) {\n      stackString += ':' + ex.column;\n    }\n  }\n  return {\n    mode: 'sourceline',\n    name: className,\n    message: ex.message,\n    stackString,\n    frames: [{\n      url: canonicalUrl,\n      line: ex.line,\n      column: ex.column\n    }]\n  };\n}\n\n/**\n * For exceptions with no stack and only a message, derives a stack trace by extracting the class name and message.\n *\n * @param {Error} ex - The exception for which to compute the stack trace.\n * @returns {StackTrace} A stack trace object containing the name and message of the exception.\n */\nfunction computeStackTraceWithMessageOnly(ex) {\n  var className = ex.name || getClassName(ex);\n  if (!className) return null;\n  return {\n    mode: 'nameonly',\n    name: className,\n    message: ex.message,\n    stackString: className + ': ' + ex.message,\n    frames: []\n  };\n}\n\n/**\n * Attempts to extract the name of the constructor function (the class) of the given object.\n *\n * @param {Object} obj - The object for which to extract the constructor function name.\n * @returns {string} The name of the constructor function, or 'unknown' if the name cannot be determined.\n */\nfunction getClassName(obj) {\n  var results = classNameRegex.exec(String(obj.constructor));\n  return results && results.length > 1 ? results[1] : 'unknown';\n}\n\n/**\n * Checks whether the given function name is a New Relic wrapper function.\n *\n * @param {string} functionName - The name of the function to check.\n * @returns {boolean} True if the function name includes the string 'nrWrapper', false otherwise.\n */\nfunction isNrWrapper(functionName) {\n  return functionName && functionName.indexOf('nrWrapper') >= 0;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function stringHashCode(string) {\n  var hash = 0;\n  var charVal;\n  if (!string || !string.length) return hash;\n  for (var i = 0; i < string.length; i++) {\n    charVal = string.charCodeAt(i);\n    hash = (hash << 5) - hash + charVal;\n    hash = hash | 0; // Convert to 32bit integer\n  }\n  return hash;\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { canonicalFunctionName } from './canonical-function-name';\nimport { computeStackTrace } from './compute-stack-trace';\nimport { stringHashCode } from './string-hash-code';\nimport { truncateSize } from './format-stack-trace';\nimport { registerHandler as register } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { stringify } from '../../../common/util/stringify';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { mapOwn } from '../../../common/util/map-own';\nimport { getInfo, getConfigurationValue, getRuntime } from '../../../common/config/config';\nimport { globalScope } from '../../../common/constants/runtime';\nimport { FEATURE_NAME } from '../constants';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { getNREUMInitializedAgent } from '../../../common/window/nreum';\nimport { deregisterDrain } from '../../../common/drain/drain';\nimport { now } from '../../../common/timing/now';\n\n/**\n * @typedef {import('./compute-stack-trace.js').StackInfo} StackInfo\n */\n\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    var _this;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    _this = this;\n    this.stackReported = {};\n    this.observedAt = {};\n    this.pageviewReported = {};\n    this.bufferedErrorsUnderSpa = {};\n    this.currentBody = undefined;\n    this.errorOnPage = false;\n\n    // this will need to change to match whatever ee we use in the instrument\n    this.ee.on('interactionDone', (interaction, wasSaved) => this.onInteractionDone(interaction, wasSaved));\n    register('err', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    register('ierr', function () {\n      return _this.storeError(...arguments);\n    }, this.featureName, this.ee);\n    register('softNavFlush', (interactionId, wasFinished, softNavAttrs) => this.onSoftNavNotification(interactionId, wasFinished, softNavAttrs), this.featureName, this.ee); // when an ixn is done or cancelled\n\n    const harvestTimeSeconds = getConfigurationValue(this.agentIdentifier, 'jserrors.harvestTimeSeconds') || 10;\n\n    // 0 == off, 1 == on\n    this.waitForFlags(['err']).then(_ref => {\n      let [errFlag] = _ref;\n      if (errFlag) {\n        const scheduler = new HarvestScheduler('jserrors', {\n          onFinished: function () {\n            return _this.onHarvestFinished(...arguments);\n          }\n        }, this);\n        scheduler.harvest.on('jserrors', function () {\n          return _this.onHarvestStarted(...arguments);\n        });\n        scheduler.startTimer(harvestTimeSeconds);\n        this.drain();\n      } else {\n        this.blocked = true; // if rum response determines that customer lacks entitlements for spa endpoint, this feature shouldn't harvest\n        deregisterDrain(this.agentIdentifier, this.featureName);\n      }\n    });\n  }\n  onHarvestStarted(options) {\n    // this gets rid of dependency in AJAX module\n    var body = this.aggregator.take(['err', 'ierr', 'xhr']);\n    if (options.retry) {\n      this.currentBody = body;\n    }\n    var payload = {\n      body,\n      qs: {}\n    };\n    var releaseIds = stringify(getRuntime(this.agentIdentifier).releaseIds);\n    if (releaseIds !== '{}') {\n      payload.qs.ri = releaseIds;\n    }\n    if (body && body.err && body.err.length && !this.errorOnPage) {\n      payload.qs.pve = '1';\n      this.errorOnPage = true;\n    }\n    return payload;\n  }\n  onHarvestFinished(result) {\n    if (result.retry && this.currentBody) {\n      mapOwn(this.currentBody, (key, value) => {\n        for (var i = 0; i < value.length; i++) {\n          var bucket = value[i];\n          var name = this.getBucketName(key, bucket.params, bucket.custom);\n          this.aggregator.merge(key, name, bucket.metrics, bucket.params, bucket.custom);\n        }\n      });\n      this.currentBody = null;\n    }\n  }\n  nameHash(params) {\n    return stringHashCode(\"\".concat(params.exceptionClass, \"_\").concat(params.message, \"_\").concat(params.stack_trace || params.browser_stack_hash));\n  }\n  getBucketName(objType, params, customParams) {\n    if (objType === 'xhr') {\n      return stringHashCode(stringify(params)) + ':' + stringHashCode(stringify(customParams));\n    }\n    return this.nameHash(params) + ':' + stringHashCode(stringify(customParams));\n  }\n\n  /**\n   * Builds a standardized stack trace string from the frames in the given `stackInfo` object, with each frame separated\n   * by a newline character. Lines take the form `<functionName>@<url>:<lineNumber>`.\n   *\n   * @param {StackInfo} stackInfo - An object specifying a stack string and individual frames.\n   * @returns {string} A canonical stack string built from the URLs and function names in the given `stackInfo` object.\n   */\n  buildCanonicalStackString(stackInfo) {\n    var canonicalStackString = '';\n    for (var i = 0; i < stackInfo.frames.length; i++) {\n      var frame = stackInfo.frames[i];\n      var func = canonicalFunctionName(frame.func);\n      if (canonicalStackString) canonicalStackString += '\\n';\n      if (func) canonicalStackString += func + '@';\n      if (typeof frame.url === 'string') canonicalStackString += frame.url;\n      if (frame.line) canonicalStackString += ':' + frame.line;\n    }\n    return canonicalStackString;\n  }\n  storeError(err, time, internal, customAttributes) {\n    // are we in an interaction\n    time = time || now();\n    const agentRuntime = getRuntime(this.agentIdentifier);\n    let filterOutput;\n    if (!internal && agentRuntime.onerror) {\n      filterOutput = agentRuntime.onerror(err);\n      if (filterOutput && !(typeof filterOutput.group === 'string' && filterOutput.group.length)) {\n        // All truthy values mean don't report (store) the error, per backwards-compatible usage,\n        // - EXCEPT if a fingerprinting label is returned, via an object with key of 'group' and value of non-empty string\n        return;\n      }\n      // Again as with previous usage, all falsey values would include the error.\n    }\n    var stackInfo = computeStackTrace(err);\n    var canonicalStackString = this.buildCanonicalStackString(stackInfo);\n    const params = {\n      stackHash: stringHashCode(canonicalStackString),\n      exceptionClass: stackInfo.name,\n      request_uri: globalScope?.location.pathname\n    };\n    if (stackInfo.message) params.message = '' + stackInfo.message;\n    // Notice if filterOutput isn't false|undefined OR our specified object, this func would've returned already (so it's unnecessary to req-check group).\n    // Do not modify the name ('errorGroup') of params without DEM approval!\n    if (filterOutput?.group) params.errorGroup = filterOutput.group;\n\n    /**\n     * The bucketHash is different from the params.stackHash because the params.stackHash is based on the canonicalized\n     * stack trace and is used downstream in NR1 to attempt to group the same errors across different browsers. However,\n     * the canonical stack trace excludes items like the column number increasing the hit-rate of different errors potentially\n     * bucketing and ultimately resulting in the loss of data in NR1.\n     */\n    var bucketHash = stringHashCode(\"\".concat(stackInfo.name, \"_\").concat(stackInfo.message, \"_\").concat(stackInfo.stackString));\n    if (!this.stackReported[bucketHash]) {\n      this.stackReported[bucketHash] = true;\n      params.stack_trace = truncateSize(stackInfo.stackString);\n      this.observedAt[bucketHash] = agentRuntime.timeKeeper.convertRelativeTimestamp(time);\n    } else {\n      params.browser_stack_hash = stringHashCode(stackInfo.stackString);\n    }\n    params.releaseIds = stringify(agentRuntime.releaseIds);\n\n    // When debugging stack canonicalization/hashing, uncomment these lines for\n    // more output in the test logs\n    // params.origStack = err.stack\n    // params.canonicalStack = canonicalStack\n\n    if (!this.pageviewReported[bucketHash]) {\n      params.pageview = 1;\n      this.pageviewReported[bucketHash] = true;\n    }\n    if (agentRuntime?.session?.state?.sessionReplayMode) params.hasReplay = true;\n    params.firstOccurrenceTimestamp = this.observedAt[bucketHash];\n    params.timestamp = this.observedAt[bucketHash];\n    var type = internal ? 'ierr' : 'err';\n    var newMetrics = {\n      time\n    };\n\n    // Trace sends the error in its payload, and both trace & replay simply listens for any error to occur.\n    const jsErrorEvent = [type, bucketHash, params, newMetrics, customAttributes];\n    handle('errorAgg', jsErrorEvent, undefined, FEATURE_NAMES.sessionTrace, this.ee);\n    handle('errorAgg', jsErrorEvent, undefined, FEATURE_NAMES.sessionReplay, this.ee);\n    // still send EE events for other features such as above, but stop this one from aggregating internal data\n    if (this.blocked) return;\n    const softNavInUse = Boolean(getNREUMInitializedAgent(this.agentIdentifier)?.features[FEATURE_NAMES.softNav]);\n    // Note: the following are subject to potential race cond wherein if the other feature aren't fully initialized, it'll be treated as there being no associated interaction.\n    // They each will also tack on their respective properties to the params object as part of the decision flow.\n    if (softNavInUse) handle('jserror', [params, time], undefined, FEATURE_NAMES.softNav, this.ee);else handle('errorAgg', jsErrorEvent, undefined, FEATURE_NAMES.spa, this.ee);\n    if (params.browserInteractionId && !params._softNavFinished) {\n      // hold onto the error until the in-progress interaction is done, eithered saved or discarded\n      this.bufferedErrorsUnderSpa[params.browserInteractionId] ??= [];\n      this.bufferedErrorsUnderSpa[params.browserInteractionId].push(jsErrorEvent);\n    } else if (params._interactionId != null) {\n      // same as above, except tailored for the way old spa does it\n      this.bufferedErrorsUnderSpa[params._interactionId] = this.bufferedErrorsUnderSpa[params._interactionId] || [];\n      this.bufferedErrorsUnderSpa[params._interactionId].push(jsErrorEvent);\n    } else {\n      // Either there is no interaction (then all these params properties will be undefined) OR there's a related soft navigation that's already completed.\n      // The old spa does not look up completed interactions at all, so there's no need to consider it.\n      this.#storeJserrorForHarvest(jsErrorEvent, params.browserInteractionId !== undefined, params._softNavAttributes);\n    }\n  }\n  #storeJserrorForHarvest(errorInfoArr, softNavOccurredFinished) {\n    let softNavCustomAttrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let [type, bucketHash, params, newMetrics, localAttrs] = errorInfoArr;\n    const allCustomAttrs = {};\n    if (softNavOccurredFinished) {\n      Object.entries(softNavCustomAttrs).forEach(_ref2 => {\n        let [k, v] = _ref2;\n        return setCustom(k, v);\n      }); // when an ixn finishes, it'll include stuff in jsAttributes + attrs specific to the ixn\n      bucketHash += params.browserInteractionId;\n      delete params._softNavAttributes; // cleanup temp properties from synchronous evaluation; this is harmless when async from soft nav (properties DNE)\n      delete params._softNavFinished;\n    } else {\n      // interaction was cancelled -> error should not be associated OR there was no interaction\n      Object.entries(getInfo(this.agentIdentifier).jsAttributes).forEach(_ref3 => {\n        let [k, v] = _ref3;\n        return setCustom(k, v);\n      });\n      delete params.browserInteractionId;\n    }\n    if (localAttrs) Object.entries(localAttrs).forEach(_ref4 => {\n      let [k, v] = _ref4;\n      return setCustom(k, v);\n    }); // local custom attrs are applied in either case with the highest precedence\n\n    const jsAttributesHash = stringHashCode(stringify(allCustomAttrs));\n    const aggregateHash = bucketHash + ':' + jsAttributesHash;\n    this.aggregator.store(type, aggregateHash, params, newMetrics, allCustomAttrs);\n    function setCustom(key, val) {\n      allCustomAttrs[key] = val && typeof val === 'object' ? stringify(val) : val;\n    }\n  }\n\n  // TO-DO: Remove this function when old spa is taken out. #storeJserrorForHarvest handles the work with the softnav feature.\n  onInteractionDone(interaction, wasSaved) {\n    if (!this.bufferedErrorsUnderSpa[interaction.id] || this.blocked) return;\n    this.bufferedErrorsUnderSpa[interaction.id].forEach(item => {\n      var allCustomAttrs = {};\n      const localCustomAttrs = item[4];\n      mapOwn(interaction.root.attrs.custom, setCustom); // tack on custom attrs from the interaction\n      mapOwn(localCustomAttrs, setCustom);\n      var params = item[2];\n      if (wasSaved) {\n        params.browserInteractionId = interaction.root.attrs.id;\n        if (params._interactionNodeId) params.parentNodeId = params._interactionNodeId.toString();\n      }\n      delete params._interactionId;\n      delete params._interactionNodeId;\n      var hash = wasSaved ? item[1] + interaction.root.attrs.id : item[1];\n      var jsAttributesHash = stringHashCode(stringify(allCustomAttrs));\n      var aggregateHash = hash + ':' + jsAttributesHash;\n      this.aggregator.store(item[0], aggregateHash, params, item[3], allCustomAttrs);\n      function setCustom(key, val) {\n        allCustomAttrs[key] = val && typeof val === 'object' ? stringify(val) : val;\n      }\n    });\n    delete this.bufferedErrorsUnderSpa[interaction.id];\n  }\n  onSoftNavNotification(interactionId, wasFinished, softNavAttrs) {\n    if (this.blocked) return;\n    this.bufferedErrorsUnderSpa[interactionId]?.forEach(jsErrorEvent => this.#storeJserrorForHarvest(jsErrorEvent, wasFinished, softNavAttrs) // this should not modify the re-used softNavAttrs contents\n    );\n    delete this.bufferedErrorsUnderSpa[interactionId]; // wipe the list of jserrors so they aren't duplicated by another call to the same id\n  }\n}"],"names":["HarvestScheduler","_SharedContext","endpoint","opts","parent","_this$sharedContext","_this","_classCallCheck","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","_assertThisInitialized","ee","on","SESSION_EVENTS","runHarvest","forceNoRetry","_inherits","_createClass","key","value","this","onUnload","interval","initialDelay","scheduleHarvest","permanently","arguments","length","undefined","clearTimeout","delay","_this2","setTimeout","_this3","submitMethod","payload","cbRanAfterSend","result","retry","onHarvestFinished","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","push","apply","_toConsumableArray","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","SharedContext","isWorkerScope","globalScope","origClose","_step","_iterator","_createForOfIteratorHelper","s","n","done","task","err","e","f","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","canonicalFunctionNameRe","canonicalFunctionName","functionNameString","match","stripNewlinesRegex","formatStackTrace","stackLines","stackString","truncatedLines","slice","join","truncateStackLines","replace","canonicalizeUrl","url","cleanedUrl","cleanURL","initialLocation","debug","classNameRegex","chrome","gecko","chromeEval","ieEval","computeStackTrace","ex","stack","errorInfo","split","reduce","parseStackProp","frames","wrapperSeen","mode","name","getClassName","message","computeStackTraceFromStackProp","className","sourceURL","func","canonicalUrl","line","column","computeStackTraceBySourceAndLine","computeStackTraceWithMessageOnly","info","functionName","element","parts","getStackElement","indexOf","obj","results","exec","String","constructor","stringHashCode","string","hash","i","charCodeAt","_storeJserrorForHarvest","WeakSet","Aggregate","_AggregateBase","agentIdentifier","aggregator","FEATURE_NAME","_classPrivateMethodInitSpec","stackReported","observedAt","pageviewReported","bufferedErrorsUnderSpa","currentBody","errorOnPage","interaction","wasSaved","onInteractionDone","register","storeError","featureName","_this4","interactionId","wasFinished","softNavAttrs","onSoftNavNotification","harvestTimeSeconds","getConfigurationValue","waitForFlags","then","_ref","_slicedToArray","scheduler","_this5","_this6","onHarvestStarted","startTimer","drain","blocked","deregisterDrain","options","body","take","qs","releaseIds","stringify","getRuntime","ri","pve","_this7","mapOwn","bucket","getBucketName","params","custom","merge","metrics","concat","exceptionClass","stack_trace","browser_stack_hash","objType","customParams","nameHash","stackInfo","canonicalStackString","frame","time","internal","customAttributes","_filterOutput","_agentRuntime$session","_getNREUMInitializedA","now","filterOutput","agentRuntime","onerror","group","stackHash","buildCanonicalStackString","request_uri","errorGroup","bucketHash","substr","timeKeeper","convertRelativeTimestamp","pageview","session","state","sessionReplayMode","hasReplay","firstOccurrenceTimestamp","timestamp","_this$bufferedErrorsU","_params$browserIntera","_this$bufferedErrorsU2","jsErrorEvent","handle","FEATURE_NAMES","Boolean","getNREUMInitializedAgent","features","browserInteractionId","_softNavFinished","_interactionId","_classPrivateMethodGet","_storeJserrorForHarvest2","_softNavAttributes","_this8","id","item","allCustomAttrs","localCustomAttrs","root","attrs","setCustom","_interactionNodeId","parentNodeId","aggregateHash","val","store","_this$bufferedErrorsU3","_this9","AggregateBase","errorInfoArr","softNavOccurredFinished","softNavCustomAttrs","_errorInfoArr","type","newMetrics","localAttrs","entries","_ref2","_ref6","getInfo","jsAttributes","_ref3","_ref7","_ref4","_ref8","_defineProperty"],"sourceRoot":""}