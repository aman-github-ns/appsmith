{"version":3,"file":"static/js/basic-spa-aggregate.3c51bd39.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/harvest/harvest-scheduler.js","../node_modules/@newrelic/browser-agent/dist/esm/common/serialize/bel-serializer.js","../node_modules/@newrelic/browser-agent/dist/esm/common/timing/nav-timing.js","../node_modules/@newrelic/browser-agent/dist/esm/common/unload/eol.js","../node_modules/@newrelic/browser-agent/dist/esm/common/util/invoke.js","../node_modules/@newrelic/browser-agent/dist/esm/common/vitals/time-to-first-byte.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/constants.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/aggregate/bel-node.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/aggregate/ajax-node.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/aggregate/interaction.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/aggregate/initial-page-load-interaction.js","../node_modules/@newrelic/browser-agent/dist/esm/features/soft_navigations/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as submitData from '../util/submit-data';\nimport { SharedContext } from '../context/shared-context';\nimport { Harvest } from './harvest';\nimport { subscribeToEOL } from '../unload/eol';\nimport { SESSION_EVENTS } from '../session/constants';\n\n/**\n * Periodically invokes harvest calls and handles retries\n */\nexport class HarvestScheduler extends SharedContext {\n  /**\n     * Create a HarvestScheduler\n     * @param {string} endpoint - The base BAM endpoint name -- ex. 'events'\n     * @param {object} opts - The options used to configure the HarvestScheduler\n     * @param {Function} opts.onFinished - The callback to be fired when a harvest has finished\n     * @param {Function} opts.getPayload - A callback which can be triggered to return a payload for harvesting\n     * @param {number} opts.retryDelay - The number of seconds to wait before retrying after a network failure\n     * @param {boolean} opts.raw - Use a prefabricated payload shape as the harvest payload without the need for formatting\n     * @param {string} opts.customUrl - A custom url that falls outside of the shape of the standard BAM harvester url pattern.  Will use directly instead of concatenating various pieces\n     * @param {*} parent - The parent object, whose state can be passed into SharedContext\n     */\n  constructor(endpoint, opts, parent) {\n    super(parent); // gets any allowed properties from the parent and stores them in `sharedContext`\n    this.endpoint = endpoint;\n    this.opts = opts || {};\n    this.started = false;\n    this.timeoutHandle = null;\n    this.aborted = false; // this controls the per-interval and final harvests for the scheduler (currently per feature specific!)\n\n    this.harvest = new Harvest(this.sharedContext);\n\n    // unload if EOL mechanism fires\n    subscribeToEOL(this.unload.bind(this));\n\n    /* Flush all buffered data if session resets and give up retries. This should be synchronous to ensure that the correct `session` value is sent.\n      Since session-reset generates a new session ID and the ID is grabbed at send-time, any delays or retries would cause the payload to be sent under\n      the wrong session ID. */\n    this.sharedContext?.ee.on(SESSION_EVENTS.RESET, () => this.runHarvest({\n      forceNoRetry: true\n    }));\n  }\n\n  /**\n   * This function is only meant for the last outgoing harvest cycle of a page. It trickles down to using sendBeacon, which should not be used\n   * to send payloads while the page is still active, due to limitations on how much data can be buffered in the API at any one time.\n   */\n  unload() {\n    if (this.aborted) return;\n    // If opts.onUnload is defined, these are special actions to execute before attempting to send the final payload.\n    if (this.opts.onUnload) this.opts.onUnload();\n    this.runHarvest({\n      unload: true\n    });\n  }\n  startTimer(interval, initialDelay) {\n    this.interval = interval;\n    this.started = true;\n    this.scheduleHarvest(initialDelay != null ? initialDelay : this.interval);\n  }\n  stopTimer() {\n    let permanently = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.aborted = permanently; // stopping permanently is same as aborting, but this function also cleans up the setTimeout loop\n    this.started = false;\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  }\n  scheduleHarvest(delay, opts) {\n    if (this.timeoutHandle) return;\n    if (delay == null) {\n      delay = this.interval;\n    }\n    this.timeoutHandle = setTimeout(() => {\n      this.timeoutHandle = null;\n      this.runHarvest(opts);\n    }, delay * 1000);\n  }\n  runHarvest(opts) {\n    if (this.aborted) return;\n\n    /**\n     * This is executed immediately after harvest sends the data via XHR, or if there's nothing to send. Note that this excludes on unloading / sendBeacon.\n     * @param {Object} result\n     */\n    const cbRanAfterSend = result => {\n      if (opts?.forceNoRetry) result.retry = false; // discard unsent data rather than re-queuing for next harvest attempt\n      this.onHarvestFinished(opts, result);\n    };\n    let harvests = [];\n    let submitMethod;\n    let payload;\n    if (this.opts.getPayload) {\n      // Ajax & PVT & SR features provide a callback function to get data for harvesting\n      submitMethod = submitData.getSubmitMethod({\n        isFinalHarvest: opts?.unload\n      });\n      if (!submitMethod) return false;\n      const retry = !opts?.unload && submitMethod === submitData.xhr;\n      payload = this.opts.getPayload({\n        retry,\n        opts\n      });\n      if (!payload) {\n        if (this.started) {\n          this.scheduleHarvest();\n        }\n        return;\n      }\n      payload = Object.prototype.toString.call(payload) === '[object Array]' ? payload : [payload];\n      harvests.push(...payload);\n    }\n\n    /** sendX is used for features that do not supply a preformatted payload via \"getPayload\" */\n    let send = args => this.harvest.sendX(args);\n    if (harvests.length) {\n      /** _send is the underlying method for sending in the harvest, if sending raw we can bypass the other helpers completely which format the payloads */\n      if (this.opts.raw) send = args => this.harvest._send(args);\n      /** send is used to formated the payloads from \"getPayload\" and obfuscate before sending */else send = args => this.harvest.send(args);\n    } else {\n      // force it to run at least once in sendX mode\n      harvests.push(undefined);\n    }\n    harvests.forEach(payload => {\n      send({\n        endpoint: this.endpoint,\n        payload,\n        opts,\n        submitMethod,\n        cbFinished: cbRanAfterSend,\n        customUrl: this.opts.customUrl,\n        raw: this.opts.raw\n      });\n    });\n    if (this.started) {\n      this.scheduleHarvest();\n    }\n  }\n  onHarvestFinished(opts, result) {\n    if (this.opts.onFinished) {\n      this.opts.onFinished(result);\n    }\n    if (result.sent && result.retry) {\n      const delay = result.delay || this.opts.retryDelay;\n      // reschedule next harvest if should be delayed longer\n      if (this.started && delay) {\n        clearTimeout(this.timeoutHandle);\n        this.timeoutHandle = null;\n        this.scheduleHarvest(delay, opts);\n      } else if (!this.started && delay) {\n        // if not running on a timer, schedule a single retry\n        this.scheduleHarvest(delay, opts);\n      }\n    }\n  }\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mapOwn } from '../util/map-own';\nimport { stringify } from '../util/stringify';\nimport { Obfuscator } from '../util/obfuscate';\nvar hasOwnProp = Object.prototype.hasOwnProperty;\nvar MAX_ATTRIBUTES = 64;\nexport function nullable(val, fn, comma) {\n  return val || val === 0 || val === '' ? fn(val) + (comma ? ',' : '') : '!';\n}\nexport function numeric(n, noDefault) {\n  if (noDefault) {\n    return Math.floor(n).toString(36);\n  }\n  return n === undefined || n === 0 ? '' : Math.floor(n).toString(36);\n}\nexport function getAddStringContext(agentIdentifier) {\n  // eslint-disable-next-line\n  var stringTable = Object.hasOwnProperty('create') ? Object.create(null) : {};\n  var stringTableIdx = 0;\n  return addString;\n  function addString(str) {\n    if (typeof str === 'undefined' || str === '') return '';\n    var obfuscator = new Obfuscator({\n      agentIdentifier\n    });\n    str = String(str);\n    if (obfuscator.shouldObfuscate()) str = obfuscator.obfuscateString(str);\n    if (hasOwnProp.call(stringTable, str)) {\n      return numeric(stringTable[str], true);\n    } else {\n      stringTable[str] = stringTableIdx++;\n      return quoteString(str);\n    }\n  }\n}\nexport function addCustomAttributes(attrs, addString) {\n  var attrParts = [];\n  mapOwn(attrs, function (key, val) {\n    if (attrParts.length >= MAX_ATTRIBUTES) return;\n    var type = 5;\n    var serializedValue;\n    // add key to string table first\n    key = addString(key);\n    switch (typeof val) {\n      case 'object':\n        if (val) {\n          // serialize objects to strings\n          serializedValue = addString(stringify(val));\n        } else {\n          // null attribute type\n          type = 9;\n        }\n        break;\n      case 'number':\n        type = 6;\n        // make sure numbers contain a `.` so they are parsed as doubles\n        serializedValue = val % 1 ? val : val + '.';\n        break;\n      case 'boolean':\n        type = val ? 7 : 8;\n        break;\n      case 'undefined':\n        // we treat undefined as a null attribute (since dirac does not have a concept of undefined)\n        type = 9;\n        break;\n      default:\n        serializedValue = addString(val);\n    }\n    attrParts.push([type, key + (serializedValue ? ',' + serializedValue : '')]);\n  });\n  return attrParts;\n}\nvar escapable = /([,\\\\;])/g;\nfunction quoteString(str) {\n  return \"'\" + str.replace(escapable, '\\\\$1');\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// We don't use JSON.stringify directly on the performance timing data for these reasons:\n// * Chrome has extra data in the performance object that we don't want to send all the time (wasteful)\n// * Firefox fails to stringify the native object due to - http://code.google.com/p/v8/issues/detail?id=1223\n// * The variable names are long and wasteful to transmit\n\n// Add Performance Timing values to the given object.\n// * Values are written relative to an offset to reduce their length (i.e. number of characters).\n// * The offset is sent with the data\n// * 0's are not included unless the value is a 'relative zero'\n//\n\nvar START = 'Start';\nvar END = 'End';\nvar UNLOAD_EVENT = 'unloadEvent';\nvar REDIRECT = 'redirect';\nvar DOMAIN_LOOKUP = 'domainLookup';\nvar ONNECT = 'onnect';\nvar REQUEST = 'request';\nvar RESPONSE = 'response';\nvar LOAD_EVENT = 'loadEvent';\nvar DOM_CONTENT_LOAD_EVENT = 'domContentLoadedEvent';\nexport const navTimingValues = [];\nfunction getPntType(type) {\n  if (typeof type === 'number') return type;\n  const types = {\n    navigate: undefined,\n    reload: 1,\n    back_forward: 2,\n    prerender: 3\n  };\n  return types[type];\n}\nexport function addPT(offset, pt) {\n  let v = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let isL1Api = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!pt) return;\n  v.of = offset;\n  handleValue(v.of, v, 'n', true);\n  handleValue(pt[UNLOAD_EVENT + START], v, 'u', isL1Api);\n  handleValue(pt[REDIRECT + START], v, 'r', isL1Api);\n  handleValue(pt[UNLOAD_EVENT + END], v, 'ue', isL1Api);\n  handleValue(pt[REDIRECT + END], v, 're', isL1Api);\n  handleValue(pt['fetch' + START], v, 'f', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + START], v, 'dn', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + END], v, 'dne', isL1Api);\n  handleValue(pt['c' + ONNECT + START], v, 'c', isL1Api);\n  handleValue(pt['secureC' + ONNECT + 'ion' + START], v, 's', isL1Api);\n  handleValue(pt['c' + ONNECT + END], v, 'ce', isL1Api);\n  handleValue(pt[REQUEST + START], v, 'rq', isL1Api);\n  handleValue(pt[RESPONSE + START], v, 'rp', isL1Api);\n  handleValue(pt[RESPONSE + END], v, 'rpe', isL1Api);\n  handleValue(pt.domLoading, v, 'dl', isL1Api);\n  handleValue(pt.domInteractive, v, 'di', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + START], v, 'ds', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + END], v, 'de', isL1Api);\n  handleValue(pt.domComplete, v, 'dc', isL1Api);\n  handleValue(pt[LOAD_EVENT + START], v, 'l', isL1Api);\n  handleValue(pt[LOAD_EVENT + END], v, 'le', isL1Api);\n  return v;\n}\n\n// Add Performance Navigation values to the given object\nexport function addPN(pn, v) {\n  handleValue(getPntType(pn.type), v, 'ty');\n  handleValue(pn.redirectCount, v, 'rc');\n  return v;\n}\n\n/**\n * By side effect, this modifies 'obj' with a mapping of the 'prop' provided to a 'value', and invalid values are not added.\n * On the other hand, the local navTimingValues array gets the value appended if valid and 'undefined' appended if invalid, regardless.\n */\nfunction handleValue(value, obj, prop, isOldApi) {\n  /*\n  For L2 Timing API, the value will already be a relative-to-previous-document DOMHighResTimeStamp.\n  For L1 (deprecated) Timing, the value is an UNIX epoch timestamp, which we will convert to a relative time using our offset.\n  PNT.type is reported as undefined, 1, 2, etc -- note that zero-value properties will be recorded as 'undefined', however DEM interprets undefined \"types\" as \"navigate\"\n  */\n  if (typeof value === 'number' && value > 0) {\n    // note that zero-value properties will be recorded as 'undefined'\n    if (isOldApi) {\n      const offset = obj?.of > 0 ? obj.of : 0; // expect an epoch timestamp, if called by addPT\n      value = Math.max(value - offset, 0);\n    }\n    value = Math.round(value);\n    obj[prop] = value;\n    navTimingValues.push(value);\n  } else navTimingValues.push(undefined);\n}","/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { windowAddEventListener } from '../event-listener/event-listener-opts';\nimport { globalScope, isWorkerScope, isBrowserScope } from '../constants/runtime';\nimport { subscribeToVisibilityChange } from '../window/page-visibility';\nif (isWorkerScope) {\n  globalScope.cleanupTasks = []; // create new list on WorkerGlobalScope to track funcs to run before exiting thread\n\n  const origClose = globalScope.close;\n  globalScope.close = () => {\n    // on worker's EoL signal, execute all \"listeners\", e.g. final harvests\n    for (let task of globalScope.cleanupTasks) {\n      task();\n    }\n    origClose();\n  };\n}\n\n/**\n * Subscribes a provided callback to the time/event when the agent should treat it as end-of-life.\n * This is used, for example, to submit a final harvest and send all remaining data on best-effort.\n * @param {function} cb - func to run before or during the last reliable event or time of an env's life span\n */\nexport function subscribeToEOL(cb) {\n  if (isBrowserScope) {\n    subscribeToVisibilityChange(cb, true); // when user switches tab or hides window, esp. mobile scenario\n    windowAddEventListener('pagehide', cb); // when user navigates away, and because safari iOS v14.4- doesn't fully support vis change\n    // --this ought to be removed once support for version below 14.5 phases out\n  } else if (isWorkerScope) {\n    globalScope.cleanupTasks.push(cb); // close() should run these tasks before quitting thread\n  }\n  // By default (for other env), this fn has no effect.\n}","/**\n * Reduce the invocation of the supplied function so that it is only invoked\n * once within a given timeout.\n *\n * If `wait` is `0`, the function will be invoked during the next tick.\n * If `options.leading` is false or not provided, the function will be invoked\n * N milliseconds after the last invocation of the returned function where\n * N is the `timeout` value.\n * If `options.leading` is true, the function will be invoked immediately upon\n * the first invocation of the returned function and not again for N milliseconds\n * where N is the `timeout` value.\n * @param {function} func Function whose invocation should be limited so it is only invoked\n * once within a given timeout period.\n * @param {number} timeout Time in milliseconds that the function should only be invoked\n * once within.\n * @param {object} options Debounce options\n * @param {boolean} options.leading Forces the function to be invoked on the first\n * invocation of the returned function instead of N milliseconds after the last\n * invocation.\n * @returns {function} A wrapping function that will ensure the provided function\n * is invoked only once within the given timeout.\n */\nexport function debounce(func) {\n  var _this = this;\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const leading = options?.leading || false;\n  let timer;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (leading && timer === undefined) {\n      func.apply(_this, args);\n      timer = setTimeout(() => {\n        timer = clearTimeout(timer);\n      }, timeout);\n    }\n    if (!leading) {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        func.apply(_this, args);\n      }, timeout);\n    }\n  };\n}\n\n/**\n * Reduce the invocation of the supplied function so that it is only invoked\n * once.\n * @param {function} func Function whose invocation should be limited so it is only invoked\n * once.\n * @returns {function} A wrapping function that will ensure the provided function\n * is invoked only once.\n */\nexport function single(func) {\n  var _this2 = this;\n  let called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      func.apply(_this2, args);\n    }\n  };\n}","import { globalScope, isBrowserScope, isiOS, offset } from '../constants/runtime';\nimport { VITAL_NAMES } from './constants';\nimport { VitalMetric } from './vital-metric';\nimport { onTTFB } from 'web-vitals/attribution';\nexport const timeToFirstByte = new VitalMetric(VITAL_NAMES.TIME_TO_FIRST_BYTE);\nif (isBrowserScope && typeof PerformanceNavigationTiming !== 'undefined' && !isiOS) {\n  onTTFB(_ref => {\n    let {\n      value,\n      attribution\n    } = _ref;\n    if (timeToFirstByte.isValid) return;\n    timeToFirstByte.update({\n      value,\n      attrs: {\n        navigationEntry: attribution.navigationEntry\n      }\n    });\n  });\n} else {\n  if (!timeToFirstByte.isValid) {\n    const entry = {};\n    // convert real timestamps to relative timestamps to match web-vitals behavior\n    for (let key in globalScope?.performance?.timing || {}) entry[key] = Math.max(globalScope?.performance?.timing[key] - offset, 0);\n\n    // ttfb is equiv to document's responseStart property in timing API --> https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart\n    timeToFirstByte.update({\n      value: entry.responseStart,\n      attrs: {\n        navigationEntry: entry\n      }\n    });\n  }\n}","import { FEATURE_NAMES } from '../../loaders/features/features';\nexport const INTERACTION_TRIGGERS = ['click',\n// e.g. user clicks link or the page back/forward buttons\n'keydown',\n// e.g. user presses left and right arrow key to switch between displayed photo gallery\n'submit' // e.g. user clicks submit butotn or presses enter while editing a form field\n];\nexport const API_TRIGGER_NAME = 'api';\nexport const FEATURE_NAME = FEATURE_NAMES.softNav;\nexport const INTERACTION_TYPE = {\n  INITIAL_PAGE_LOAD: '',\n  ROUTE_CHANGE: 1,\n  UNSPECIFIED: 2\n};\nexport const NODE_TYPE = {\n  INTERACTION: 1,\n  AJAX: 2,\n  CUSTOM_END: 3,\n  CUSTOM_TRACER: 4\n};\nexport const INTERACTION_STATUS = {\n  IP: 'in progress',\n  FIN: 'finished',\n  CAN: 'cancelled'\n};","import { now } from '../../../common/timing/now';\nlet nodesSeen = 0;\nexport class BelNode {\n  belType;\n  /** List of other BelNode derivatives. Each children should be of a subclass that implements its own 'serialize' function. */\n  children = [];\n  start = now();\n  end;\n  callbackEnd = 0;\n  callbackDuration = 0;\n  nodeId = ++nodesSeen;\n  constructor(agentIdentifier) {\n    if (!agentIdentifier) throw new Error('Interaction is missing core attributes');\n    this.agentIdentifier = agentIdentifier;\n  }\n  addChild(child) {\n    this.children.push(child);\n  }\n\n  /** Virtual fn for stringifying an instance. */\n  serialize() {}\n}","import { addCustomAttributes, getAddStringContext, nullable, numeric } from '../../../common/serialize/bel-serializer';\nimport { NODE_TYPE } from '../constants';\nimport { BelNode } from './bel-node';\nexport class AjaxNode extends BelNode {\n  constructor(agentIdentifier, ajaxEvent) {\n    super(agentIdentifier);\n    this.belType = NODE_TYPE.AJAX;\n    this.method = ajaxEvent.method;\n    this.status = ajaxEvent.status;\n    this.domain = ajaxEvent.domain;\n    this.path = ajaxEvent.path;\n    this.txSize = ajaxEvent.requestSize;\n    this.rxSize = ajaxEvent.responseSize;\n    this.requestedWith = ajaxEvent.type === 'fetch' ? 1 : ''; // 'xhr' and 'beacon' types get the empty string\n    this.spanId = ajaxEvent.spanId;\n    this.traceId = ajaxEvent.traceId;\n    this.spanTimestamp = ajaxEvent.spanTimestamp;\n    this.gql = ajaxEvent.gql;\n    this.start = ajaxEvent.startTime;\n    this.end = ajaxEvent.endTime;\n  }\n  serialize(parentStartTimestamp) {\n    const addString = getAddStringContext(this.agentIdentifier);\n    const nodeList = [];\n\n    // IMPORTANT: The order in which addString is called matters and correlates to the order in which string shows up in the harvest payload. Do not re-order the following code.\n    const fields = [numeric(this.belType), 0,\n    // this will be overwritten below with number of attached nodes\n    numeric(this.start - parentStartTimestamp),\n    // start relative to parent start (if part of first node in payload) or first parent start\n    numeric(this.end - this.start),\n    // end is relative to start\n    numeric(this.callbackEnd), numeric(this.callbackDuration), addString(this.method), numeric(this.status), addString(this.domain), addString(this.path), numeric(this.txSize), numeric(this.rxSize), this.requestedWith, addString(this.nodeId), nullable(this.spanId, addString, true) + nullable(this.traceId, addString, true) + nullable(this.spanTimestamp, numeric)];\n    let allAttachedNodes = [];\n    if (typeof this.gql === 'object') allAttachedNodes = addCustomAttributes(this.gql, addString);\n    this.children.forEach(node => allAttachedNodes.push(node.serialize())); // no children is expected under ajax nodes at this time\n\n    fields[1] = numeric(allAttachedNodes.length);\n    nodeList.push(fields);\n    if (allAttachedNodes.length) nodeList.push(allAttachedNodes.join(';'));\n    return nodeList.join(';');\n  }\n}","import { getInfo } from '../../../common/config/config';\nimport { globalScope, initialLocation } from '../../../common/constants/runtime';\nimport { generateUuid } from '../../../common/ids/unique-id';\nimport { addCustomAttributes, getAddStringContext, nullable, numeric } from '../../../common/serialize/bel-serializer';\nimport { cleanURL } from '../../../common/url/clean-url';\nimport { NODE_TYPE, INTERACTION_STATUS, INTERACTION_TYPE, API_TRIGGER_NAME } from '../constants';\nimport { BelNode } from './bel-node';\n\n/**\n * link https://github.com/newrelic/nr-querypack/blob/main/schemas/bel/7.qpschema\n **/\nexport class Interaction extends BelNode {\n  id = generateUuid(); // unique id that is serialized and used to link interactions with errors\n  initialPageURL = initialLocation;\n  oldURL = '' + globalScope?.location;\n  newURL = '' + globalScope?.location;\n  customName;\n  customAttributes = {};\n  customDataByApi = {};\n  queueTime; // only used by initialPageLoad interactions\n  appTime; // only used by initialPageLoad interactions\n  newRoute;\n  /** Internal state of this interaction: in-progress, finished, or cancelled. */\n  status = INTERACTION_STATUS.IP;\n  domTimestamp = 0;\n  historyTimestamp = 0;\n  createdByApi = false;\n  keepOpenUntilEndApi = false;\n  onDone = [];\n  cancellationTimer;\n  constructor(agentIdentifier, uiEvent, uiEventTimestamp, currentRouteKnown) {\n    super(agentIdentifier);\n    this.belType = NODE_TYPE.INTERACTION;\n    this.trigger = uiEvent;\n    this.start = uiEventTimestamp;\n    this.oldRoute = currentRouteKnown;\n    this.eventSubscription = new Map([['finished', []], ['cancelled', []]]);\n    this.forceSave = this.forceIgnore = false;\n    if (this.trigger === API_TRIGGER_NAME) this.createdByApi = true;\n  }\n  updateDom(timestamp) {\n    this.domTimestamp = timestamp || performance.now(); // default timestamp should be precise for accurate isActiveDuring calculations\n  }\n  updateHistory(timestamp, newUrl) {\n    this.newURL = newUrl || '' + globalScope?.location;\n    this.historyTimestamp = timestamp || performance.now();\n  }\n  seenHistoryAndDomChange() {\n    return this.historyTimestamp > 0 && this.domTimestamp > this.historyTimestamp; // URL must change before DOM does\n  }\n  on(event, cb) {\n    if (!this.eventSubscription.has(event)) throw new Error('Cannot subscribe to non pre-defined events.');\n    if (typeof cb !== 'function') throw new Error('Must supply function as callback.');\n    this.eventSubscription.get(event).push(cb);\n  }\n  done(customEndTime) {\n    // User could've mark this interaction--regardless UI or api started--as \"don't close until .end() is called on it\". Only .end provides a timestamp; the default flows do not.\n    if (this.keepOpenUntilEndApi && customEndTime === undefined) return false;\n    this.onDone.forEach(apiProvidedCb => apiProvidedCb(this.customDataByApi)); // this interaction's .save or .ignore can still be set by these user provided callbacks for example\n\n    if (this.forceIgnore) this.#cancel(); // .ignore() always has precedence over save actions\n    else if (this.seenHistoryAndDomChange()) this.#finish(customEndTime); // then this should've already finished while it was the interactionInProgress, with a natural end time\n    else if (this.forceSave) this.#finish(customEndTime || performance.now()); // a manually saved ixn (did not fulfill conditions) must have a specified end time, if one wasn't provided\n    else this.#cancel();\n    return true;\n  }\n  #finish() {\n    let customEndTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (this.status !== INTERACTION_STATUS.IP) return; // disallow this call if the ixn is already done aka not in-progress\n    clearTimeout(this.cancellationTimer);\n    this.end = Math.max(this.domTimestamp, this.historyTimestamp, customEndTime);\n    this.customAttributes = {\n      ...getInfo(this.agentIdentifier).jsAttributes,\n      ...this.customAttributes\n    }; // attrs specific to this interaction should have precedence over the general custom attrs\n    this.status = INTERACTION_STATUS.FIN;\n\n    // Run all the callbacks awaiting this interaction to finish.\n    const callbacks = this.eventSubscription.get('finished');\n    callbacks.forEach(fn => fn());\n  }\n  #cancel() {\n    if (this.status !== INTERACTION_STATUS.IP) return; // disallow this call if the ixn is already done aka not in-progress\n    clearTimeout(this.cancellationTimer);\n    this.status = INTERACTION_STATUS.CAN;\n\n    // Run all the callbacks listening to this interaction's potential cancellation.\n    const callbacks = this.eventSubscription.get('cancelled');\n    callbacks.forEach(fn => fn());\n  }\n\n  /**\n   * Given a timestamp, determine if it falls within this interaction's span, i.e. if this was the active interaction during that time.\n   * For in-progress interactions, this only compares the time with the start of span. Cancelled interactions are not considered active at all.\n   * @param {DOMHighResTimeStamp} timestamp\n   * @returns True or false boolean.\n   */\n  isActiveDuring(timestamp) {\n    if (this.status === INTERACTION_STATUS.IP) return this.start <= timestamp;\n    return this.status === INTERACTION_STATUS.FIN && this.start <= timestamp && this.end >= timestamp;\n  }\n\n  // Following are virtual properties overridden by a subclass:\n  get firstPaint() {}\n  get firstContentfulPaint() {}\n  get navTiming() {}\n  serialize(firstStartTimeOfPayload) {\n    const addString = getAddStringContext(this.agentIdentifier);\n    const nodeList = [];\n    let ixnType;\n    if (this.trigger === 'initialPageLoad') ixnType = INTERACTION_TYPE.INITIAL_PAGE_LOAD;else if (this.newURL !== this.oldURL) ixnType = INTERACTION_TYPE.ROUTE_CHANGE;else ixnType = INTERACTION_TYPE.UNSPECIFIED;\n\n    // IMPORTANT: The order in which addString is called matters and correlates to the order in which string shows up in the harvest payload. Do not re-order the following code.\n    const fields = [numeric(this.belType), 0,\n    // this will be overwritten below with number of attached nodes\n    numeric(Math.floor(this.start - firstStartTimeOfPayload)),\n    // relative to first node\n    numeric(Math.floor(this.end - this.start)),\n    // end -- relative to start\n    numeric(this.callbackEnd),\n    // cbEnd -- relative to start; not used by BrowserInteraction events\n    numeric(this.callbackDuration),\n    // not relative\n    addString(this.trigger), addString(cleanURL(this.initialPageURL, true)), addString(cleanURL(this.oldURL, true)), addString(cleanURL(this.newURL, true)), addString(this.customName), ixnType, nullable(this.queueTime, numeric, true) + nullable(this.appTime, numeric, true) + nullable(this.oldRoute, addString, true) + nullable(this.newRoute, addString, true) + addString(this.id), addString(this.nodeId), nullable(this.firstPaint, numeric, true) + nullable(this.firstContentfulPaint, numeric)];\n    const allAttachedNodes = addCustomAttributes(this.customAttributes || {}, addString); // start with all custom attributes\n    if (getInfo(this.agentIdentifier).atts) allAttachedNodes.push('a,' + addString(getInfo(this.agentIdentifier).atts)); // add apm provided attributes\n    /* Querypack encoder+decoder quirkiness:\n       - If first ixn node of payload is being processed, we use this node's start to offset. (firstStartTime should be 0--or undefined.)\n       - Else for subsequent ixn nodes, we use the first ixn node's start to offset. */\n    this.children.forEach(node => allAttachedNodes.push(node.serialize(firstStartTimeOfPayload || this.start))); // recursively add the serialized string of every child of this (ixn) bel node\n\n    fields[1] = numeric(allAttachedNodes.length);\n    nodeList.push(fields);\n    if (allAttachedNodes.length) nodeList.push(allAttachedNodes.join(';'));\n    if (this.navTiming) nodeList.push(this.navTiming);else nodeList.push('');\n    // nodeList = [<fields array>, <serialized string of all attributes and children>, <serialized nav timing info> || '']\n\n    return nodeList.join(';');\n  }\n}","import { navTimingValues } from '../../../common/timing/nav-timing';\nimport { Interaction } from './interaction';\nimport { numeric } from '../../../common/serialize/bel-serializer';\nimport { firstPaint } from '../../../common/vitals/first-paint';\nimport { firstContentfulPaint } from '../../../common/vitals/first-contentful-paint';\nimport { getInfo } from '../../../common/config/config';\nexport class InitialPageLoadInteraction extends Interaction {\n  constructor(agentIdentifier) {\n    super(agentIdentifier, 'initialPageLoad', 0, null);\n    const agentInfo = getInfo(agentIdentifier);\n    this.queueTime = agentInfo.queueTime;\n    this.appTime = agentInfo.applicationTime;\n  }\n  get firstPaint() {\n    return firstPaint.current.value;\n  }\n  get firstContentfulPaint() {\n    return firstContentfulPaint.current.value;\n  }\n\n  /**\n   * Build the navTiming node. This assumes the navTimingValues array in nav-timing.js has already been filled with values via the PageViewEvent feature having\n   * executed the addPT function first and foremost.\n   */\n  get navTiming() {\n    if (!navTimingValues.length) return;\n    /*\n    1. we initialize the seperator to ',' (seperates the nodeType id from the first value)\n    2. we initialize the navTiming node to 'b' (the nodeType id)\n    3. if the value is present, we add the seperator followed by the value;\n       otherwise:\n        - we add null seperator ('!') to the navTimingNode\n        - we set the seperator to an empty string since we already wrote it above\n      the reason for writing the null seperator instead of setting the seperator\n      is to ensure we still write it if the null is the last navTiming value.\n    */\n    let seperator = ',';\n    let navTimingNode = 'b';\n    let prev = 0;\n\n    // Get all navTiming values except offset aka timeOrigin since we just consider that (this.start) 0.\n    // These are the latter 20 of the 21 timings appended by addPT:\n    navTimingValues.slice(1, 21).forEach(v => {\n      if (v !== undefined) {\n        navTimingNode += seperator + numeric(v - prev);\n        seperator = ',';\n        prev = v;\n      } else {\n        navTimingNode += seperator + '!';\n        seperator = '';\n      }\n    });\n    return navTimingNode;\n  }\n}","import { getConfigurationValue } from '../../../common/config/config';\nimport { deregisterDrain } from '../../../common/drain/drain';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { registerHandler } from '../../../common/event-emitter/register-handler';\nimport { HarvestScheduler } from '../../../common/harvest/harvest-scheduler';\nimport { single } from '../../../common/util/invoke';\nimport { timeToFirstByte } from '../../../common/vitals/time-to-first-byte';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { SUPPORTABILITY_METRIC_CHANNEL } from '../../metrics/constants';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { API_TRIGGER_NAME, FEATURE_NAME, INTERACTION_STATUS } from '../constants';\nimport { AjaxNode } from './ajax-node';\nimport { InitialPageLoadInteraction } from './initial-page-load-interaction';\nimport { Interaction } from './interaction';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentIdentifier, aggregator, _ref) {\n    let {\n      domObserver\n    } = _ref;\n    super(agentIdentifier, aggregator, FEATURE_NAME);\n    const harvestTimeSeconds = getConfigurationValue(agentIdentifier, 'soft_navigations.harvestTimeSeconds') || 10;\n    this.interactionsToHarvest = [];\n    this.interactionsAwaitingRetry = [];\n    this.domObserver = domObserver;\n    this.initialPageLoadInteraction = new InitialPageLoadInteraction(agentIdentifier);\n    timeToFirstByte.subscribe(_ref2 => {\n      let {\n        attrs\n      } = _ref2;\n      const loadEventTime = attrs.navigationEntry.loadEventEnd;\n      this.initialPageLoadInteraction.forceSave = true;\n      this.initialPageLoadInteraction.done(loadEventTime);\n      this.interactionsToHarvest.push(this.initialPageLoadInteraction);\n      this.initialPageLoadInteraction = null;\n      // Report metric on the initial page load time\n      handle(SUPPORTABILITY_METRIC_CHANNEL, ['SoftNav/Interaction/InitialPageLoad/Duration/Ms', Math.round(loadEventTime)], undefined, FEATURE_NAMES.metrics, this.ee);\n    });\n    this.latestRouteSetByApi = null;\n    this.interactionInProgress = null; // aside from the \"page load\" interaction, there can only ever be 1 ongoing at a time\n\n    this.blocked = false;\n    this.waitForFlags(['spa']).then(_ref3 => {\n      let [spaOn] = _ref3;\n      if (spaOn) {\n        this.drain();\n        const scheduler = new HarvestScheduler('events', {\n          onFinished: this.onHarvestFinished.bind(this),\n          retryDelay: harvestTimeSeconds,\n          onUnload: () => this.interactionInProgress?.done() // return any held ajax or jserr events so they can be sent with EoL harvest\n        }, {\n          agentIdentifier,\n          ee: this.ee\n        });\n        scheduler.harvest.on('events', this.onHarvestStarted.bind(this));\n        scheduler.startTimer(harvestTimeSeconds, 0);\n      } else {\n        this.blocked = true; // if rum response determines that customer lacks entitlements for spa endpoint, this feature shouldn't harvest\n        deregisterDrain(this.agentIdentifier, this.featureName);\n      }\n    });\n\n    // By default, a complete UI driven interaction requires event -> URL change -> DOM mod in that exact order.\n    registerHandler('newUIEvent', event => this.startUIInteraction(event.type, event.timeStamp, event.target), this.featureName, this.ee);\n    registerHandler('newURL', (timestamp, url) => this.interactionInProgress?.updateHistory(timestamp, url), this.featureName, this.ee);\n    registerHandler('newDom', timestamp => {\n      this.interactionInProgress?.updateDom(timestamp);\n      if (this.interactionInProgress?.seenHistoryAndDomChange()) this.interactionInProgress.done();\n    }, this.featureName, this.ee);\n    this.#registerApiHandlers();\n    registerHandler('ajax', this.#handleAjaxEvent.bind(this), this.featureName, this.ee);\n    registerHandler('jserror', this.#handleJserror.bind(this), this.featureName, this.ee);\n  }\n  onHarvestStarted(options) {\n    if (this.interactionsToHarvest.length === 0 || this.blocked) return;\n    // The payload depacker takes the first ixn of a payload (if there are multiple ixns) and positively offset the subsequent ixns timestamps by that amount.\n    // In order to accurately portray the real start & end times of the 2nd & onward ixns, we hence need to negatively offset their start timestamps with that of the 1st ixn.\n    let firstIxnStartTime = 0; // the very 1st ixn does not require any offsetting\n    const serializedIxnList = [];\n    for (const interaction of this.interactionsToHarvest) {\n      serializedIxnList.push(interaction.serialize(firstIxnStartTime));\n      if (!firstIxnStartTime) firstIxnStartTime = Math.floor(interaction.start);\n    }\n    const payload = \"bel.7;\".concat(serializedIxnList.join(';'));\n    if (options.retry) this.interactionsAwaitingRetry.push(...this.interactionsToHarvest);\n    this.interactionsToHarvest = [];\n    return {\n      body: {\n        e: payload\n      }\n    };\n  }\n  onHarvestFinished(result) {\n    if (result.sent && result.retry && this.interactionsAwaitingRetry.length > 0) {\n      this.interactionsToHarvest = [...this.interactionsAwaitingRetry, ...this.interactionsToHarvest];\n      this.interactionsAwaitingRetry = [];\n    }\n  }\n  startUIInteraction(eventName, startedAt, sourceElem) {\n    // this is throttled by instrumentation so that it isn't excessively called\n    if (this.interactionInProgress?.createdByApi) return; // api-started interactions cannot be disrupted aka cancelled by UI events (and the vice versa applies as well)\n    if (this.interactionInProgress?.done() === false) return;\n    this.interactionInProgress = new Interaction(this.agentIdentifier, eventName, startedAt, this.latestRouteSetByApi);\n    if (eventName === 'click') {\n      const sourceElemText = getActionText(sourceElem);\n      if (sourceElemText) this.interactionInProgress.customAttributes.actionText = sourceElemText;\n    }\n    this.interactionInProgress.cancellationTimer = setTimeout(() => {\n      this.interactionInProgress.done();\n      // Report metric on frequency of cancellation due to timeout for UI ixn\n      handle(SUPPORTABILITY_METRIC_CHANNEL, ['SoftNav/Interaction/TimeOut'], undefined, FEATURE_NAMES.metrics, this.ee);\n    }, 30000); // UI ixn are disregarded after 30 seconds if it's not completed by then\n    this.setClosureHandlers();\n  }\n  setClosureHandlers() {\n    this.interactionInProgress.on('finished', () => {\n      const ref = this.interactionInProgress;\n      this.interactionsToHarvest.push(this.interactionInProgress);\n      this.interactionInProgress = null;\n      this.domObserver.disconnect(); // can stop observing whenever our interaction logic completes a cycle\n\n      // Report metric on the ixn duration\n      handle(SUPPORTABILITY_METRIC_CHANNEL, [\"SoftNav/Interaction/\".concat(ref.newURL !== ref.oldURL ? 'RouteChange' : 'Custom', \"/Duration/Ms\"), Math.round(ref.end - ref.start)], undefined, FEATURE_NAMES.metrics, this.ee);\n    });\n    this.interactionInProgress.on('cancelled', () => {\n      this.interactionInProgress = null;\n      this.domObserver.disconnect();\n    });\n  }\n\n  /**\n   * Find the active interaction (current or past) for a given timestamp. Note that historic lookups mostly only go as far back as the last harvest for this feature.\n   * Also, the caller should check the status of the interaction returned if found via {@link Interaction.status}, if that's pertinent.\n   * TIP: Cancelled (status) interactions are NOT returned!\n   * IMPORTANT: Finished interactions are in queue for next harvest! It's highly recommended that consumer logic be synchronous for safe reference.\n   * @param {DOMHighResTimeStamp} timestamp\n   * @returns An {@link Interaction} or undefined, if no active interaction was found.\n   */\n  getInteractionFor(timestamp) {\n    /* In the sole case wherein there can be two \"interactions\" overlapping (initialPageLoad + regular route-change),\n      the regular interaction should get precedence in being assigned the \"active\" interaction in regards to our one-at-a-time model.\n    */\n    if (this.interactionInProgress?.isActiveDuring(timestamp)) return this.interactionInProgress;\n    let saveIxn;\n    for (let idx = this.interactionsToHarvest.length - 1; idx >= 0; idx--) {\n      // reverse search for the latest completed interaction for efficiency\n      const finishedInteraction = this.interactionsToHarvest[idx];\n      if (finishedInteraction.isActiveDuring(timestamp)) {\n        if (finishedInteraction.trigger !== 'initialPageLoad') return finishedInteraction;\n        // It's possible that a complete interaction occurs before page is fully loaded, so we need to consider if a route-change ixn may have overlapped this iPL\n        else saveIxn = finishedInteraction;\n      }\n    }\n    if (saveIxn) return saveIxn; // if an iPL was determined to be active and no route-change was found active for the same time, then iPL is deemed the one\n    if (this.initialPageLoadInteraction?.isActiveDuring(timestamp)) return this.initialPageLoadInteraction; // lowest precedence and also only if it's still in-progress\n    // Time must be when no interaction is happening, so return undefined.\n  }\n\n  /**\n   * Handles or redirect ajax event based on the interaction, if any, that it's tied to.\n   * @param {Object} event see Ajax feature's storeXhr function for object definition\n   */\n  #handleAjaxEvent(event) {\n    const associatedInteraction = this.getInteractionFor(event.startTime);\n    if (!associatedInteraction) {\n      // no interaction was happening when this ajax started, so give it back to Ajax feature for processing\n      handle('returnAjax', [event], undefined, FEATURE_NAMES.ajax, this.ee);\n    } else {\n      if (associatedInteraction.status === INTERACTION_STATUS.FIN) processAjax(this.agentIdentifier, event, associatedInteraction); // tack ajax onto the ixn object awaiting harvest\n      else {\n        // same thing as above, just at a later time -- if the interaction in progress is cancelled, just send the event back to ajax feat unmodified\n        associatedInteraction.on('finished', () => processAjax(this.agentIdentifier, event, associatedInteraction));\n        associatedInteraction.on('cancelled', () => handle('returnAjax', [event], undefined, FEATURE_NAMES.ajax, this.ee));\n      }\n    }\n    function processAjax(agentId, event, parentInteraction) {\n      const newNode = new AjaxNode(agentId, event);\n      parentInteraction.addChild(newNode);\n    }\n  }\n\n  /**\n   * Decorate the passed-in params obj with properties relating to any associated interaction at the time of the timestamp.\n   * @param {Object} params reference to the local var instance in Jserrors feature's storeError\n   * @param {DOMHighResTimeStamp} timestamp time the jserror occurred\n   */\n  #handleJserror(params, timestamp) {\n    const associatedInteraction = this.getInteractionFor(timestamp);\n    if (!associatedInteraction) return; // do not need to decorate this jserror params\n\n    // Whether the interaction is in-progress or already finished, the id will let jserror buffer it under its index, until it gets the next step instruction.\n    params.browserInteractionId = associatedInteraction.id;\n    if (associatedInteraction.status === INTERACTION_STATUS.FIN) {\n      // This information cannot be relayed back via handle() that flushes buffered errs because this is being called by a jserror's handle() per se and before the err is buffered.\n      params._softNavFinished = true; // instead, signal that this err can be processed right away without needing to be buffered aka wait for an in-progress ixn\n      params._softNavAttributes = associatedInteraction.customAttributes;\n    } else {\n      // These callbacks may be added multiple times for an ixn, but just a single run will deal with all jserrors associated with the interaction.\n      // As such, be cautious not to use the params object since that's tied to one specific jserror and won't affect the rest of them.\n      associatedInteraction.on('finished', single(() => handle('softNavFlush', [associatedInteraction.id, true, associatedInteraction.customAttributes], undefined, FEATURE_NAMES.jserrors, this.ee)));\n      associatedInteraction.on('cancelled', single(() => handle('softNavFlush', [associatedInteraction.id, false, undefined], undefined, FEATURE_NAMES.jserrors, this.ee))); // don't take custom attrs from cancelled ixns\n    }\n  }\n  #registerApiHandlers() {\n    const INTERACTION_API = 'api-ixn-';\n    const thisClass = this;\n    registerHandler(INTERACTION_API + 'get', function (time) {\n      let {\n        waitForEnd\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // In here, 'this' refers to the EventContext specific to per InteractionHandle instance spawned by each .interaction() api call.\n      // Each api call aka IH instance would therefore retain a reference to either the in-progress interaction *at the time of the call* OR a new api-started interaction.\n      this.associatedInteraction = thisClass.getInteractionFor(time);\n      if (!this.associatedInteraction) {\n        // This new api-driven interaction will be the target of any subsequent .interaction() call, until it is closed by EITHER .end() OR the regular seenHistoryAndDomChange process.\n        this.associatedInteraction = thisClass.interactionInProgress = new Interaction(thisClass.agentIdentifier, API_TRIGGER_NAME, time, thisClass.latestRouteSetByApi);\n        thisClass.setClosureHandlers();\n      }\n      if (waitForEnd === true) this.associatedInteraction.keepOpenUntilEndApi = true;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'end', function (timeNow) {\n      this.associatedInteraction.done(timeNow);\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'save', function () {\n      this.associatedInteraction.forceSave = true;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'ignore', function () {\n      this.associatedInteraction.forceIgnore = true;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'getContext', function (time, callback) {\n      if (typeof callback !== 'function') return;\n      setTimeout(() => callback(this.associatedInteraction.customDataByApi), 0);\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'onEnd', function (time, callback) {\n      if (typeof callback !== 'function') return;\n      this.associatedInteraction.onDone.push(callback);\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'actionText', function (time, newActionText) {\n      if (newActionText) this.associatedInteraction.customAttributes.actionText = newActionText;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'setName', function (time, name, trigger) {\n      if (name) this.associatedInteraction.customName = name;\n      if (trigger) this.associatedInteraction.trigger = trigger;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'setAttribute', function (time, key, value) {\n      this.associatedInteraction.customAttributes[key] = value;\n    }, thisClass.featureName, thisClass.ee);\n    registerHandler(INTERACTION_API + 'routeName', function (time, newRouteName) {\n      // notice that this fn tampers with the ixn IP, not with the linked ixn\n      thisClass.latestRouteSetByApi = newRouteName;\n      if (thisClass.interactionInProgress) thisClass.interactionInProgress.newRoute = newRouteName;\n    }, thisClass.featureName, thisClass.ee);\n  }\n}\nfunction getActionText(elem) {\n  const tagName = elem.tagName.toLowerCase();\n  const elementsOfInterest = ['a', 'button', 'input'];\n  if (elementsOfInterest.includes(tagName)) {\n    return elem.title || elem.value || elem.innerText;\n  }\n}"],"names":["HarvestScheduler","_SharedContext","endpoint","opts","parent","_this$sharedContext","_this","_classCallCheck","started","timeoutHandle","aborted","harvest","Harvest","sharedContext","subscribeToEOL","unload","bind","_assertThisInitialized","ee","on","SESSION_EVENTS","runHarvest","forceNoRetry","_inherits","_createClass","key","value","this","onUnload","interval","initialDelay","scheduleHarvest","permanently","arguments","length","undefined","clearTimeout","delay","_this2","setTimeout","_this3","submitMethod","payload","cbRanAfterSend","result","retry","onHarvestFinished","harvests","getPayload","submitData","isFinalHarvest","Object","prototype","toString","call","push","apply","_toConsumableArray","send","args","sendX","raw","_send","forEach","cbFinished","customUrl","onFinished","sent","retryDelay","SharedContext","hasOwnProp","hasOwnProperty","MAX_ATTRIBUTES","nullable","val","fn","comma","numeric","n","noDefault","Math","floor","getAddStringContext","agentIdentifier","stringTable","create","stringTableIdx","str","obfuscator","Obfuscator","String","shouldObfuscate","obfuscateString","replace","escapable","quoteString","addCustomAttributes","attrs","addString","attrParts","mapOwn","serializedValue","type","stringify","START","END","UNLOAD_EVENT","REDIRECT","DOMAIN_LOOKUP","ONNECT","REQUEST","RESPONSE","LOAD_EVENT","DOM_CONTENT_LOAD_EVENT","navTimingValues","addPT","offset","pt","v","isL1Api","of","handleValue","domLoading","domInteractive","domComplete","addPN","pn","navigate","reload","back_forward","prerender","redirectCount","obj","prop","isOldApi","max","round","isWorkerScope","globalScope","origClose","_step","_iterator","_createForOfIteratorHelper","s","done","task","err","e","f","cb","isBrowserScope","subscribeToVisibilityChange","windowAddEventListener","debounce","func","timer","timeout","options","leading","_len","Array","_key","single","called","_len2","_key2","timeToFirstByte","VitalMetric","VITAL_NAMES","PerformanceNavigationTiming","isiOS","onTTFB","_ref","attribution","isValid","update","navigationEntry","entry","_globalScope$performa","timing","_globalScope$performa2","responseStart","FEATURE_NAME","FEATURE_NAMES","INTERACTION_TYPE","NODE_TYPE","INTERACTION_STATUS","nodesSeen","BelNode","_defineProperty","now","Error","child","children","AjaxNode","_BelNode","ajaxEvent","belType","method","status","domain","path","txSize","requestSize","rxSize","responseSize","requestedWith","spanId","traceId","spanTimestamp","gql","start","startTime","end","endTime","parentStartTimestamp","nodeList","fields","callbackEnd","callbackDuration","nodeId","allAttachedNodes","node","serialize","join","_finish","WeakSet","_cancel","Interaction","uiEvent","uiEventTimestamp","currentRouteKnown","_classPrivateMethodInitSpec","generateUuid","initialLocation","trigger","oldRoute","eventSubscription","Map","forceSave","forceIgnore","createdByApi","timestamp","domTimestamp","performance","newUrl","newURL","historyTimestamp","event","has","get","customEndTime","keepOpenUntilEndApi","onDone","apiProvidedCb","customDataByApi","_classPrivateMethodGet","_cancel2","seenHistoryAndDomChange","_finish2","firstStartTimeOfPayload","ixnType","oldURL","cleanURL","initialPageURL","customName","queueTime","appTime","newRoute","id","firstPaint","firstContentfulPaint","customAttributes","getInfo","atts","navTiming","cancellationTimer","_objectSpread","jsAttributes","InitialPageLoadInteraction","_Interaction","agentInfo","applicationTime","seperator","navTimingNode","prev","_handleAjaxEvent","_handleJserror","_registerApiHandlers","Aggregate","_AggregateBase","aggregator","domObserver","harvestTimeSeconds","getConfigurationValue","interactionsToHarvest","interactionsAwaitingRetry","initialPageLoadInteraction","_ref2","loadEventTime","loadEventEnd","handle","SUPPORTABILITY_METRIC_CHANNEL","latestRouteSetByApi","interactionInProgress","blocked","waitForFlags","then","_ref3","_slicedToArray","drain","scheduler","_this$interactionInPr","onHarvestStarted","startTimer","deregisterDrain","featureName","registerHandler","startUIInteraction","timeStamp","target","url","_this$interactionInPr2","updateHistory","_this$interactionInPr3","_this$interactionInPr4","updateDom","_registerApiHandlers2","_handleAjaxEvent2","_handleJserror2","_this$interactionsAwa","firstIxnStartTime","serializedIxnList","interaction","concat","body","eventName","startedAt","sourceElem","_this$interactionInPr5","_this$interactionInPr6","sourceElemText","elem","tagName","toLowerCase","includes","title","innerText","getActionText","actionText","setClosureHandlers","ref","disconnect","_this$interactionInPr7","_this$initialPageLoad","saveIxn","isActiveDuring","idx","finishedInteraction","AggregateBase","_this4","associatedInteraction","getInteractionFor","processAjax","agentId","parentInteraction","newNode","addChild","params","_this5","browserInteractionId","_softNavFinished","_softNavAttributes","INTERACTION_API","thisClass","time","waitForEnd","timeNow","callback","_this6","newActionText","name","newRouteName"],"sourceRoot":""}