{"version":3,"file":"static/js/9080.97a7b2d2.chunk.js","mappings":"oTAAO,IAAMA,EAA+B,CAC1CC,MAAO,QACPC,UAAW,YACXC,cAAe,gBACfC,kBAAmB,oBACnBC,sBAAuB,wBACvBC,MAAO,QACPC,OAAQ,SACRC,aAAc,eACdC,MAAO,SAGIC,EACX,wDAEWC,EACX,sDAEWC,EAAwB,CACnCC,KAAM,GACNC,SAAU,GACVC,OAAQ,CACNC,KAAM,GACNC,GAAI,GACJC,IAAK,IAEPC,iBAAkB,CAChBH,KAAM,GACNC,GAAI,GACJC,IAAK,IAEPE,MAAO,CAAC,EACRC,OAAQ,CAAC,EACTC,IAAKC,KAAKC,SACVC,iBAAiB,EACjBC,eAAgB,OAChBC,aAAc,GACdC,2BAA2B,EAC3BC,MAAO,CACLC,OAAQ,CACNC,aAAc,GACdC,gBAAiB,IAEnBC,aAAc,CACZC,gBAAiB,IAEnBC,UAAW,CACTC,aAAc,IAEhBC,WAAY,CACVC,cAAe,MAKRC,EACX,qDAEWC,EAAmC,GAAAC,OAAMF,EAAqB,kBAE9DG,EAA6B,GAAAD,OAAMF,EAAqB,YAExDI,EAA4B,GAAAF,OAAMF,EAAqB,U,mLC7DvDK,EACU,sBADVA,EAEc,0BAFdA,EAGiB,6BAHjBA,EAIkB,8BAJlBA,EAKiB,6BALjBA,EAMc,0BANdA,EAOyB,qCAPzBA,EASiB,6BATjBA,EAUkB,8BA+RxB,I,uEC3QDC,EAAeC,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mEAKvB,SAACC,GAAK,OAAKA,EAAMC,cAAc,IAC9B,SAACD,GAAK,OAAKA,EAAME,eAAe,IAC5B,SAACF,GAAK,OAAKA,EAAMG,kBAAkB,IAG7CC,EAAaP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yFAQvBO,EAAYT,EAAAA,GAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,2CAKpBS,GAA+BC,EAAAA,EAAAA,KAA/BD,2BA6PD,IAeP,GAAeE,EAAAA,EAAAA,KAfgB,SAC7BC,EACAC,GACI,IAADC,EACGC,GAAgBC,EAAAA,EAAAA,IAA4BJ,GAElD,MAAO,CACLK,aAC2B,WAAxBJ,EAASK,aACPH,GACDF,EAAS/C,YAAiD,QAAzCgD,GAAKK,EAAAA,EAAAA,IAA8BP,UAAM,IAAAE,OAAA,EAApCA,EAAsChD,YAC9DsD,EAAAA,EAAAA,GAAkCR,GAExC,GAEA,EA1QA,SAAyBX,GACvB,IAAMoB,GAASC,EAAAA,EAAAA,QAA0B,MAEzCC,EAA8BC,EAAAA,UAAe,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAE1BI,GAA0CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAlDG,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEtCG,GAA4BJ,EAAAA,EAAAA,UAAS7B,EAAMkC,QAAOC,GAAAV,EAAAA,EAAAA,GAAAQ,EAAA,GAA3CC,EAAMC,EAAA,GAAEC,EAASD,EAAA,GAElBvD,GAAQyD,EAAAA,EAAAA,UAAQ,WAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAC1B,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACgB,QADhBL,EACKtC,EAAMpB,aAAK,IAAA0D,OAAA,EAAXA,EAAazD,QAAM,IACtBG,aAAyB,QAAbuD,EAAEvC,EAAMpB,aAAK,IAAA2D,GAAc,QAAdC,EAAXD,EAAavD,oBAAY,IAAAwD,OAAd,EAAXA,EAA2BvD,gBACzCC,UAAsB,QAAbuD,EAAEzC,EAAMpB,aAAK,IAAA6D,GAAW,QAAXC,EAAXD,EAAavD,iBAAS,IAAAwD,OAAX,EAAXA,EAAwBvD,cAEvC,GAAG,CAACa,EAAMpB,SAEVgE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,SAACC,GAAyB,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EACjCC,GACU,QAAdL,EAAA3B,EAAOiC,eAAO,IAAAN,OAAA,EAAdA,EAAgBO,iBACF,QADeN,EAC7B5B,EAAOiC,eAAO,IAAAL,GAAiB,QAAjBC,EAAdD,EAAgBO,uBAAe,IAAAN,OAAjB,EAAdA,EAAiCO,aAEnC,GAAIV,EAAMW,SAAWL,EAAc,CAAC,IAADM,EAAAC,EAEnB,QAAdD,EAAAtC,EAAOiC,eAAO,IAAAK,GAAe,QAAfC,EAAdD,EAAgBJ,qBAAa,IAAAK,GAA7BA,EAA+BC,YAC7B,CACEC,KAAMlE,EACNtB,IAAKyE,EAAMgB,KAAKzF,IAChB0F,SAAS,GAEX,KAGF,IAAMC,EAAUlB,EAAMgB,KAEtB,OAAQE,EAAQH,MACd,KAAKlE,EACHqC,GAAiB,GACH,QAAdkB,EAAA9B,EAAOiC,eAAO,IAAAH,GAAe,QAAfC,EAAdD,EAAgBI,qBAAa,IAAAH,GAA7BA,EAA+BS,YAC7B,CACEC,KAAMlE,EACNxB,MAAO6B,EAAM7B,MACb8F,GAAI,CACFC,MAAOlE,EAAMkE,MACbhC,OAAQlC,EAAMkC,QAEhBiC,KAAMnE,EAAMiB,WACZrC,MAAAA,GAEF,KAIqB,aAArBoB,EAAMiB,YACe,WAArBjB,EAAMiB,YAENmD,EAAAA,GAAAA,SAAuB,0BAA2B,CAChDvG,SAAUmC,EAAMnC,SAChBoD,WAAYjB,EAAMiB,aAGtB,MACF,KAAKtB,EACHK,EAAMqE,OAAOL,EAAQF,MACrB,MACF,KAAKnE,EACHK,EAAMsE,QAAQN,EAAQF,KAAKS,UAAWP,EAAQF,KAAKU,YACnD,MACF,KAAK7E,EACH,IAOE8E,EAPIvC,EAAS8B,EAAQF,KAAK5B,OAE5B,GACuB,YAArBlC,EAAMiB,YACNiB,IACClC,EAAM0E,gBAAkBC,EAAAA,GAAAA,OACvB3E,EAAM4E,mBAAqBC,EAAAA,EAAAA,MAEf,QAAdJ,EAAArD,EAAOiC,eAAO,IAAAoB,GAAdA,EAAgBK,MAAMC,YAAY,SAAS,GAADvF,OAAK0C,EAAM,OACrDE,EAAUF,GAEZ,MACF,IAAK,8BACHlC,EAAMgF,WACJhF,EAAMgF,UAAUhB,EAAQF,KAAKD,KAAMG,EAAQF,KAAKmB,MAGxD,CACF,EAIA,OAFAC,OAAOC,iBAAiB,UAAWtC,GAAS,GAErC,kBAAMqC,OAAOE,oBAAoB,UAAWvC,GAAS,EAAO,CACrE,GAAG,CACD7C,EAAM7B,MACN6B,EAAMkE,MACNlE,EAAMkC,OACNlC,EAAM4E,iBACN5E,EAAM0E,iBAGR9B,EAAAA,EAAAA,YAAU,WACJxB,EAAOiC,SAAWjC,EAAOiC,QAAQC,eAAiBvB,GACpDX,EAAOiC,QAAQC,cAAcM,YAC3B,CACEC,KAAMlE,EACNxB,MAAO6B,EAAM7B,OAEf,IAGN,GAAG,CAAC6B,EAAM7B,SAEVyE,EAAAA,EAAAA,YAAU,WACJxB,EAAOiC,SAAWjC,EAAOiC,QAAQC,eAAiBvB,GACpDX,EAAOiC,QAAQC,cAAcM,YAC3B,CACEC,KAAMlE,EACNsE,GAAI,CACFC,MAAOlE,EAAMkE,MACbhC,OAAQA,IAGZ,IAGN,GAAG,CAAClC,EAAMkE,MAAOhC,KAEjBU,EAAAA,EAAAA,YAAU,WACJxB,EAAOiC,SAAWjC,EAAOiC,QAAQC,eAAiBvB,GACpDX,EAAOiC,QAAQC,cAAcM,YAC3B,CACEC,KAAMlE,EACNf,MAAAA,GAEF,IAGN,GAAG,CAACA,KAEJgE,EAAAA,EAAAA,YAAU,WAIL,IAADyC,EAFArF,EAAM0E,gBAAkBC,EAAAA,GAAAA,OACxB3E,EAAM4E,mBAAqBC,EAAAA,EAAAA,QAEb,QAAdQ,EAAAjE,EAAOiC,eAAO,IAAAgC,GAAdA,EAAgBP,MAAMC,YAAY,SAAS,GAADvF,OAAKQ,EAAMkC,OAAM,OAC3DE,EAAUpC,EAAMkC,QAEpB,GAAG,CACDlC,EAAM0E,cACN1E,EAAMkC,OACNd,EAAOiC,QACPrD,EAAM4E,mBAGR,IAAM9G,EAAM,8CAAA0B,OCnNd,ipCDsNoB,kFAAAA,OAIVQ,EAAMgF,UE1NhB,+zBF0N8C,GAAE,0DAAAxF,OG1NhD,wwTH6NkB,qDAAAA,OAGRQ,EAAMlC,OAAOC,KAAI,gDAAAyB,OAEfQ,EAAMlC,OAAOE,GAAE,yCAAAwB,OAEVQ,EAAMlC,OAAOG,IAAG,4CAS/B,OAJA2E,EAAAA,EAAAA,YAAU,WACRjB,GAAW,EACb,GAAG,CAAC7D,KAGFwH,EAAAA,EAAAA,MAAChF,EAAS,CACRiF,WAAWC,EAAAA,EAAAA,GAAK,CACd,eAAgB9D,IACf+D,SAAA,CAEFzF,EAAMgB,eAAgB0E,EAAAA,EAAAA,KAACtF,EAAU,CAAC,cAAY,oBAC/CsF,EAAAA,EAAAA,KAACC,EAAAA,EAAoB,CACnB5G,gBAAiBiB,EAAMjB,gBACvB6G,YAAa5F,EAAM4F,YACnB5G,aAAcgB,EAAMhB,aACpB6G,YAAa7F,EAAM6F,YACnB3G,UAAWc,EAAMd,UACjBrB,SAAUmC,EAAMnC,SAAS4H,UAEzBC,EAAAA,EAAAA,KAAC9F,EAAY,CACXM,gBAAiBgC,EACjB/B,mBACEH,EAAM0E,gBAAkBC,EAAAA,GAAAA,wBACpB3E,EAAM8F,iBAAmBC,EAAAA,GAAAA,wBACzB,EAEN9F,eAAgBD,EAAMkE,MACtBxC,QAAQ,OACRsE,OAAQ,WACNrE,GAAW,EACb,EACAsE,IAAK7E,EACL8E,QACE1F,OACI2F,EACA,gGAENrI,OAAQA,QAKlB,G","sources":["pages/Editor/CustomWidgetBuilder/constants.ts","widgets/CustomWidget/component/customWidgetscript.js","widgets/CustomWidget/component/index.tsx","widgets/CustomWidget/component/reset.css","widgets/CustomWidget/component/appsmithConsole.js","webpack://appsmith/./src/widgets/CustomWidget/component/customWidgetscript.js?7b83"],"sourcesContent":["export const CUSTOM_WIDGET_BUILDER_EVENTS = {\n  READY: \"READY\",\n  READY_ACK: \"READY_ACK\",\n  UPDATE_SRCDOC: \"UPDATE_SRCDOC\",\n  UPDATE_REFERENCES: \"UPDATE_REFERENCES\",\n  UPDATE_REFERENCES_ACK: \"UPDATE_REFERENCES_ACK\",\n  PAUSE: \"PAUSE\",\n  RESUME: \"RESUME\",\n  DISCONNECTED: \"DISCONNECTED\",\n  CLOSE: \"CLOSE\",\n};\n\nexport const LOCAL_STORAGE_KEYS_IS_REFERENCE_OPEN =\n  \"custom-widget-builder-context-state-is-reference-open\";\n\nexport const LOCAL_STORAGE_KEYS_SELECTED_LAYOUT =\n  \"custom-widget-builder-context-state-selected-layout\";\n\nexport const DEFAULT_CONTEXT_VALUE = {\n  name: \"\",\n  widgetId: \"\",\n  srcDoc: {\n    html: \"\",\n    js: \"\",\n    css: \"\",\n  },\n  uncompiledSrcDoc: {\n    html: \"\",\n    js: \"\",\n    css: \"\",\n  },\n  model: {},\n  events: {},\n  key: Math.random(),\n  isReferenceOpen: false,\n  selectedLayout: \"tabs\",\n  debuggerLogs: [],\n  showConnectionLostMessage: false,\n  theme: {\n    colors: {\n      primaryColor: \"\",\n      backgroundColor: \"\",\n    },\n    borderRadius: {\n      appBorderRadius: \"\",\n    },\n    boxShadow: {\n      appBoxShadow: \"\",\n    },\n    fontFamily: {\n      appFontFamily: \"\",\n    },\n  },\n};\n\nexport const CUSTOM_WIDGET_DOC_URL =\n  \"https://docs.appsmith.com/reference/widgets/custom\";\n\nexport const CUSTOM_WIDGET_DEFAULT_MODEL_DOC_URL = `${CUSTOM_WIDGET_DOC_URL}#default-model`;\n\nexport const CUSTOM_WIDGET_ONREADY_DOC_URL = `${CUSTOM_WIDGET_DOC_URL}#onready`;\n\nexport const CUSTOM_WIDGET_HEIGHT_DOC_URL = `${CUSTOM_WIDGET_DOC_URL}#height`;\n","// Custom widget events definition\nexport const EVENTS = {\n  CUSTOM_WIDGET_READY: \"CUSTOM_WIDGET_READY\",\n  CUSTOM_WIDGET_READY_ACK: \"CUSTOM_WIDGET_READY_ACK\",\n  CUSTOM_WIDGET_UPDATE_MODEL: \"CUSTOM_WIDGET_UPDATE_MODEL\",\n  CUSTOM_WIDGET_TRIGGER_EVENT: \"CUSTOM_WIDGET_TRIGGER_EVENT\",\n  CUSTOM_WIDGET_MODEL_CHANGE: \"CUSTOM_WIDGET_MODEL_CHANGE\",\n  CUSTOM_WIDGET_UI_CHANGE: \"CUSTOM_WIDGET_UI_CHANGE\",\n  CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK: \"CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK\",\n  CUSTOM_WIDGET_CONSOLE_EVENT: \"CUSTOM_WIDGET_CONSOLE_EVENT\",\n  CUSTOM_WIDGET_THEME_UPDATE: \"CUSTOM_WIDGET_THEME_UPDATE\",\n  CUSTOM_WIDGET_UPDATE_HEIGHT: \"CUSTOM_WIDGET_UPDATE_HEIGHT\",\n};\n\n// Function to create a communication channel to the parent\nexport const createChannelToParent = () => {\n  const onMessageMap = new Map();\n  // Function to register an event handler for a message type\n  function onMessage(type, fn) {\n    let eventHandlerList = onMessageMap.get(type);\n    if (eventHandlerList && eventHandlerList instanceof Array) {\n      eventHandlerList.push(fn);\n    } else {\n      eventHandlerList = [fn];\n      onMessageMap.set(type, eventHandlerList);\n    }\n    return () => {\n      // Function to unsubscribe an event handler\n      const index = eventHandlerList.indexOf(fn);\n      eventHandlerList.splice(index, 1);\n    };\n  }\n  // Listen for 'message' events and dispatch to registered event handlers\n  window.addEventListener(\"message\", (event) => {\n    if (event.source === window.parent) {\n      const handlerList = onMessageMap.get(event.data.type);\n      if (handlerList) {\n        handlerList.forEach((fn) => fn(event.data));\n      }\n    }\n  });\n  // Queue to hold postMessage requests\n  const postMessageQueue = [];\n  // Flag to indicate if the flush is scheduled\n  let isFlushScheduled = false;\n\n  /*\n   * Function to schedule microtask to flush postMessageQueue\n   * to ensure the order of message processed on the parent\n   */\n  const scheduleMicrotaskToflushPostMessageQueue = () => {\n    if (!isFlushScheduled) {\n      isFlushScheduled = true;\n      queueMicrotask(() => {\n        (async () => {\n          while (postMessageQueue.length > 0) {\n            const message = postMessageQueue.shift();\n            await new Promise((resolve) => {\n              const key = Math.random();\n              const unlisten = onMessage(\n                EVENTS.CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK,\n                (data) => {\n                  if (data.key === key && data.success) {\n                    unlisten();\n                    resolve();\n                  }\n                },\n              );\n\n              // Send the message to the parent\n              window.parent.postMessage(\n                Object.assign(Object.assign({}, message), { key }),\n                \"*\",\n              );\n            });\n          }\n          isFlushScheduled = false;\n        })();\n      });\n    }\n  };\n\n  return {\n    onMessageMap,\n    postMessage: (type, data) => {\n      try {\n        // Try block to catch non clonealbe data error while postmessaging\n        // throw error if the data is not cloneable\n        postMessageQueue.push({\n          type,\n          data,\n        });\n\n        scheduleMicrotaskToflushPostMessageQueue();\n      } catch (e) {\n        throw e;\n      }\n    },\n    onMessage,\n  };\n};\n\n/*\n * Function to initialize the script\n * wrapping this inside a function to make it testable\n */\nexport function main() {\n  // Create a communication channel to the parent\n  const channel = createChannelToParent();\n  /*\n   * Variables to hold the subscriber functions\n   */\n  const modelSubscribers = [];\n  const uiSubscribers = [];\n  const themeSubscribers = [];\n  /*\n   * Variables to hold ready function and state\n   */\n  let onReady;\n  let isReady = false;\n  let isReadyCalled = false;\n\n  const heightObserver = new ResizeObserver(() => {\n    const height = document.body.clientHeight;\n\n    channel.postMessage(EVENTS.CUSTOM_WIDGET_UPDATE_HEIGHT, {\n      height,\n    });\n  });\n\n  // Callback for when the READY_ACK message is received\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_READY_ACK, (event) => {\n    window.appsmith.model = event.model;\n    window.appsmith.ui = event.ui;\n    window.appsmith.theme = event.theme;\n    window.appsmith.mode = event.mode;\n    heightObserver.observe(window.document.body);\n\n    // Subscribe to model and UI changes\n    window.appsmith.onModelChange(generateAppsmithCssVariables(\"model\"));\n    window.appsmith.onUiChange(generateAppsmithCssVariables(\"ui\"));\n    window.appsmith.onThemeChange(generateAppsmithCssVariables(\"theme\"));\n\n    // Set the widget as ready\n    isReady = true;\n\n    if (!isReadyCalled && onReady) {\n      onReady();\n      isReadyCalled = true;\n    }\n  });\n  // Callback for when MODEL_CHANGE message is received\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_MODEL_CHANGE, (event) => {\n    if (event.model) {\n      const prevModel = window.appsmith.model;\n\n      window.appsmith.model = event.model;\n\n      // Notify model subscribers\n      modelSubscribers.forEach((fn) => {\n        fn(event.model, prevModel);\n      });\n    }\n  });\n  // Callback for when UI_CHANGE message is received\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_UI_CHANGE, (event) => {\n    if (event.ui) {\n      const prevUi = window.appsmith.ui;\n\n      window.appsmith.ui = event.ui;\n      // Notify UI subscribers\n      uiSubscribers.forEach((fn) => {\n        fn(event.ui, prevUi);\n      });\n    }\n  });\n\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_THEME_UPDATE, (event) => {\n    if (event.theme) {\n      const prevTheme = window.appsmith.theme;\n\n      window.appsmith.theme = event.theme;\n      // Notify theme subscribers\n      themeSubscribers.forEach((fn) => {\n        fn(event.theme, prevTheme);\n      });\n    }\n  });\n\n  if (!window.appsmith) {\n    // Define appsmith global object\n    Object.defineProperty(window, \"appsmith\", {\n      configurable: false,\n      writable: false,\n      value: {\n        mode: \"\",\n        theme: {},\n        onThemeChange: (fn) => {\n          if (typeof fn !== \"function\") {\n            throw new Error(\"onThemeChange expects a function as parameter\");\n          }\n\n          themeSubscribers.push(fn);\n          fn(window.appsmith.theme);\n\n          return () => {\n            // Unsubscribe from theme changes\n            const index = themeSubscribers.indexOf(fn);\n\n            if (index > -1) {\n              themeSubscribers.splice(index, 1);\n            }\n          };\n        },\n        onUiChange: (fn) => {\n          if (typeof fn !== \"function\") {\n            throw new Error(\"onUiChange expects a function as parameter\");\n          }\n\n          uiSubscribers.push(fn);\n          fn(window.appsmith.ui);\n          return () => {\n            // Unsubscribe from UI changes\n            const index = uiSubscribers.indexOf(fn);\n            if (index > -1) {\n              uiSubscribers.splice(index, 1);\n            }\n          };\n        },\n        onModelChange: (fn) => {\n          if (typeof fn !== \"function\") {\n            throw new Error(\"onModelChange expects a function as parameter\");\n          }\n\n          modelSubscribers.push(fn);\n          fn(window.appsmith.model);\n          return () => {\n            // Unsubscribe from model changes\n            const index = modelSubscribers.indexOf(fn);\n            if (index > -1) {\n              modelSubscribers.splice(index, 1);\n            }\n          };\n        },\n        updateModel: (obj) => {\n          if (!obj || typeof obj !== \"object\") {\n            throw new Error(\"updateModel expects an object as parameter\");\n          }\n\n          appsmith.model = Object.assign(\n            Object.assign({}, appsmith.model),\n            obj,\n          );\n\n          // Send an update model message to the parent\n          channel.postMessage(EVENTS.CUSTOM_WIDGET_UPDATE_MODEL, obj);\n        },\n        triggerEvent: (eventName, contextObj) => {\n          if (typeof eventName !== \"string\") {\n            throw new Error(\"eventName should be a string\");\n          } else if (contextObj && typeof contextObj !== \"object\") {\n            throw new Error(\"contextObj should be an object\");\n          }\n\n          // Send a trigger event message to the parent\n          channel.postMessage(EVENTS.CUSTOM_WIDGET_TRIGGER_EVENT, {\n            eventName,\n            contextObj,\n          });\n        },\n        model: {},\n        ui: {},\n        onReady: (fn) => {\n          if (typeof fn !== \"function\") {\n            throw new Error(\"onReady expects a function as parameter\");\n          }\n\n          onReady = fn;\n\n          if (isReady && !isReadyCalled && onReady) {\n            onReady();\n            isReadyCalled = true;\n          }\n        },\n      },\n    });\n  }\n\n  // Listen for the 'load' event and send READY message to the parent\n  window.addEventListener(\"load\", () => {\n    channel.postMessage(EVENTS.CUSTOM_WIDGET_READY);\n  });\n}\n\n/*\n * Function to create appsmith css variables for model and ui primitive values\n * variables get regenerated every time the model or ui changes.\n */\nexport const generateAppsmithCssVariables = (provider) => (source) => {\n  let cssTokens = document.getElementById(`appsmith-${provider}-css-tokens`);\n  if (!cssTokens) {\n    cssTokens = document.createElement(\"style\");\n    cssTokens.id = `appsmith-${provider}-css-tokens`;\n    window.document.head.appendChild(cssTokens);\n  }\n\n  const cssTokensContent = Object.keys(source).reduce((acc, key) => {\n    if (typeof source[key] === \"string\" || typeof source[key] === \"number\") {\n      return `\n    ${acc}\n    --appsmith-${provider}-${key}: ${source[key]};\n    `;\n    } else {\n      return acc;\n    }\n  }, \"\");\n  cssTokens.innerHTML = `:root {${cssTokensContent}}`;\n};\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nimport script from \"!!raw-loader!./customWidgetscript.js\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nimport appsmithConsole from \"!!raw-loader!./appsmithConsole.js\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\nimport css from \"!!raw-loader!./reset.css\";\nimport clsx from \"clsx\";\nimport type { AppThemeProperties } from \"entities/AppTheming\";\nimport WidgetStyleContainer from \"components/designSystems/appsmith/WidgetStyleContainer\";\nimport type { BoxShadow } from \"components/designSystems/appsmith/WidgetStyleContainer\";\nimport type { Color } from \"constants/Colors\";\nimport { connect } from \"react-redux\";\nimport type { AppState } from \"@appsmith/reducers\";\nimport { combinedPreviewModeSelector } from \"selectors/editorSelectors\";\nimport { getWidgetPropsForPropertyPane } from \"selectors/propertyPaneSelectors\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport { EVENTS } from \"./customWidgetscript\";\nimport { DynamicHeight } from \"utils/WidgetFeatures\";\nimport { getAppsmithConfigs } from \"@appsmith/configs\";\nimport { getIsAutoHeightWithLimitsChanging } from \"utils/hooks/autoHeightUIHooks\";\nimport { GridDefaults } from \"constants/WidgetConstants\";\nimport { LayoutSystemTypes } from \"layoutSystems/types\";\n\nconst StyledIframe = styled.iframe<{\n  componentWidth: number;\n  componentHeight: number;\n  componentMinHeight: number;\n}>`\n  width: ${(props) => props.componentWidth}px;\n  height: ${(props) => props.componentHeight}px;\n  min-height: ${(props) => props.componentMinHeight}px;\n`;\n\nconst OverlayDiv = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst { disableIframeWidgetSandbox } = getAppsmithConfigs();\n\nfunction CustomComponent(props: CustomComponentProps) {\n  const iframe = useRef<HTMLIFrameElement>(null);\n\n  const [loading, setLoading] = React.useState(true);\n\n  const [isIframeReady, setIsIframeReady] = useState(false);\n\n  const [height, setHeight] = useState(props.height);\n\n  const theme = useMemo(() => {\n    return {\n      ...props.theme?.colors,\n      borderRadius: props.theme?.borderRadius?.appBorderRadius,\n      boxShadow: props.theme?.boxShadow?.appBoxShadow,\n    };\n  }, [props.theme]);\n\n  useEffect(() => {\n    const handler = (event: MessageEvent) => {\n      const iframeWindow =\n        iframe.current?.contentWindow ||\n        iframe.current?.contentDocument?.defaultView;\n\n      if (event.source === iframeWindow) {\n        // Sending acknowledgement for all messages since we're queueing all the postmessage from iframe\n        iframe.current?.contentWindow?.postMessage(\n          {\n            type: EVENTS.CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK,\n            key: event.data.key,\n            success: true,\n          },\n          \"*\",\n        );\n\n        const message = event.data;\n\n        switch (message.type) {\n          case EVENTS.CUSTOM_WIDGET_READY:\n            setIsIframeReady(true);\n            iframe.current?.contentWindow?.postMessage(\n              {\n                type: EVENTS.CUSTOM_WIDGET_READY_ACK,\n                model: props.model,\n                ui: {\n                  width: props.width,\n                  height: props.height,\n                },\n                mode: props.renderMode,\n                theme,\n              },\n              \"*\",\n            );\n\n            if (\n              props.renderMode === \"DEPLOYED\" ||\n              props.renderMode === \"EDITOR\"\n            ) {\n              AnalyticsUtil.logEvent(\"CUSTOM_WIDGET_LOAD_INIT\", {\n                widgetId: props.widgetId,\n                renderMode: props.renderMode,\n              });\n            }\n            break;\n          case EVENTS.CUSTOM_WIDGET_UPDATE_MODEL:\n            props.update(message.data);\n            break;\n          case EVENTS.CUSTOM_WIDGET_TRIGGER_EVENT:\n            props.execute(message.data.eventName, message.data.contextObj);\n            break;\n          case EVENTS.CUSTOM_WIDGET_UPDATE_HEIGHT:\n            const height = message.data.height;\n\n            if (\n              props.renderMode !== \"BUILDER\" &&\n              height &&\n              (props.dynamicHeight !== DynamicHeight.FIXED ||\n                props.layoutSystemType === LayoutSystemTypes.AUTO)\n            ) {\n              iframe.current?.style.setProperty(\"height\", `${height}px`);\n              setHeight(height);\n            }\n            break;\n          case \"CUSTOM_WIDGET_CONSOLE_EVENT\":\n            props.onConsole &&\n              props.onConsole(message.data.type, message.data.args);\n            break;\n        }\n      }\n    };\n\n    window.addEventListener(\"message\", handler, false);\n\n    return () => window.removeEventListener(\"message\", handler, false);\n  }, [\n    props.model,\n    props.width,\n    props.height,\n    props.layoutSystemType,\n    props.dynamicHeight,\n  ]);\n\n  useEffect(() => {\n    if (iframe.current && iframe.current.contentWindow && isIframeReady) {\n      iframe.current.contentWindow.postMessage(\n        {\n          type: EVENTS.CUSTOM_WIDGET_MODEL_CHANGE,\n          model: props.model,\n        },\n        \"*\",\n      );\n    }\n  }, [props.model]);\n\n  useEffect(() => {\n    if (iframe.current && iframe.current.contentWindow && isIframeReady) {\n      iframe.current.contentWindow.postMessage(\n        {\n          type: EVENTS.CUSTOM_WIDGET_UI_CHANGE,\n          ui: {\n            width: props.width,\n            height: height,\n          },\n        },\n        \"*\",\n      );\n    }\n  }, [props.width, height]);\n\n  useEffect(() => {\n    if (iframe.current && iframe.current.contentWindow && isIframeReady) {\n      iframe.current.contentWindow.postMessage(\n        {\n          type: EVENTS.CUSTOM_WIDGET_THEME_UPDATE,\n          theme,\n        },\n        \"*\",\n      );\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    if (\n      props.dynamicHeight === DynamicHeight.FIXED &&\n      props.layoutSystemType === LayoutSystemTypes.FIXED\n    ) {\n      iframe.current?.style.setProperty(\"height\", `${props.height}px`);\n      setHeight(props.height);\n    }\n  }, [\n    props.dynamicHeight,\n    props.height,\n    iframe.current,\n    props.layoutSystemType,\n  ]);\n\n  const srcDoc = `\n    <html>\n      <head>\n        <style>${css}</style>\n      </head>\n      <body>\n        <script type=\"text/javascript\">${\n          props.onConsole ? appsmithConsole : \"\"\n        }</script>\n        <script type=\"module\">\n          ${script}\n          main();\n        </script>\n        ${props.srcDoc.html}\n        <script type=\"module\">\n          ${props.srcDoc.js}\n        </script>\n        <style>${props.srcDoc.css}</style>\n      </body>\n    </html>\n  `;\n\n  useEffect(() => {\n    setLoading(true);\n  }, [srcDoc]);\n\n  return (\n    <Container\n      className={clsx({\n        \"bp3-skeleton\": loading,\n      })}\n    >\n      {props.needsOverlay && <OverlayDiv data-testid=\"iframe-overlay\" />}\n      <WidgetStyleContainer\n        backgroundColor={props.backgroundColor}\n        borderColor={props.borderColor}\n        borderRadius={props.borderRadius}\n        borderWidth={props.borderWidth}\n        boxShadow={props.boxShadow}\n        widgetId={props.widgetId}\n      >\n        <StyledIframe\n          componentHeight={height}\n          componentMinHeight={\n            props.dynamicHeight === DynamicHeight.AUTO_HEIGHT_WITH_LIMITS\n              ? props.minDynamicHeight * GridDefaults.DEFAULT_GRID_ROW_HEIGHT\n              : 0\n          }\n          componentWidth={props.width}\n          loading=\"lazy\"\n          onLoad={() => {\n            setLoading(false);\n          }}\n          ref={iframe}\n          sandbox={\n            disableIframeWidgetSandbox\n              ? undefined\n              : \"allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-scripts\"\n          }\n          srcDoc={srcDoc}\n        />\n      </WidgetStyleContainer>\n    </Container>\n  );\n}\n\nexport interface CustomComponentProps {\n  execute: (eventName: string, contextObj: Record<string, unknown>) => void;\n  update: (data: Record<string, unknown>) => void;\n  model: Record<string, unknown>;\n  srcDoc: {\n    html: string;\n    js: string;\n    css: string;\n  };\n  width: number;\n  height: number;\n  onLoadingStateChange?: (state: string) => void;\n  needsOverlay?: boolean;\n  onConsole?: (type: string, message: string) => void;\n  renderMode: \"EDITOR\" | \"DEPLOYED\" | \"BUILDER\";\n  theme: AppThemeProperties;\n  borderColor?: Color;\n  backgroundColor?: Color;\n  borderWidth?: number;\n  borderRadius?: number;\n  boxShadow?: BoxShadow;\n  widgetId: string;\n  dynamicHeight: DynamicHeight;\n  minDynamicHeight: number;\n  layoutSystemType?: LayoutSystemTypes;\n}\n\n/**\n * TODO: Balaji soundararajan - to refactor code to move out selected widget details to platform\n */\nexport const mapStateToProps = (\n  state: AppState,\n  ownProps: CustomComponentProps,\n) => {\n  const isPreviewMode = combinedPreviewModeSelector(state);\n\n  return {\n    needsOverlay:\n      (ownProps.renderMode === \"EDITOR\" &&\n        !isPreviewMode &&\n        ownProps.widgetId !== getWidgetPropsForPropertyPane(state)?.widgetId) ||\n      getIsAutoHeightWithLimitsChanging(state),\n  };\n};\n\nexport default connect(mapStateToProps)(CustomComponent);\n","export default \"/* http://meyerweb.com/eric/tools/css/reset/ \\n   v2.0 | 20110126\\n   License: none (public domain)\\n*/\\n\\nhtml,\\nbody,\\ndiv,\\nspan,\\napplet,\\nobject,\\niframe,\\nh1,\\nh2,\\nh3,\\nh4,\\nh5,\\nh6,\\np,\\nblockquote,\\npre,\\na,\\nabbr,\\nacronym,\\naddress,\\nbig,\\ncite,\\ncode,\\ndel,\\ndfn,\\nem,\\nimg,\\nins,\\nkbd,\\nq,\\ns,\\nsamp,\\nsmall,\\nstrike,\\nstrong,\\nsub,\\nsup,\\ntt,\\nvar,\\nb,\\nu,\\ni,\\ncenter,\\ndl,\\ndt,\\ndd,\\nol,\\nul,\\nli,\\nfieldset,\\nform,\\nlabel,\\nlegend,\\ntable,\\ncaption,\\ntbody,\\ntfoot,\\nthead,\\ntr,\\nth,\\ntd,\\narticle,\\naside,\\ncanvas,\\ndetails,\\nembed,\\nfigure,\\nfigcaption,\\nfooter,\\nheader,\\nhgroup,\\nmenu,\\nnav,\\noutput,\\nruby,\\nsection,\\nsummary,\\ntime,\\nmark,\\naudio,\\nvideo {\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n}\\n/* HTML5 display-role reset for older browsers */\\narticle,\\naside,\\ndetails,\\nfigcaption,\\nfigure,\\nfooter,\\nheader,\\nhgroup,\\nmenu,\\nnav,\\nsection {\\n  display: block;\\n}\\nbody {\\n  line-height: 1;\\n}\\nol,\\nul {\\n  list-style: none;\\n}\\nblockquote,\\nq {\\n  quotes: none;\\n}\\nblockquote:before,\\nblockquote:after,\\nq:before,\\nq:after {\\n  content: \\\"\\\";\\n  content: none;\\n}\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0;\\n}\\n\";","export default \"(function (nativeConsole) {\\n  const postMessage = (method, args) => {\\n    window.parent.postMessage(\\n      {\\n        type: \\\"CUSTOM_WIDGET_CONSOLE_EVENT\\\",\\n        data: {\\n          type: method,\\n          args: args.map((d) => ({\\n            message: d,\\n          })),\\n        },\\n      },\\n      \\\"*\\\",\\n    );\\n  };\\n\\n  const createProxy = (method) =>\\n    new Proxy(nativeConsole[method], {\\n      apply(target, _this, args) {\\n        try {\\n          postMessage(method, args);\\n        } finally {\\n          return Reflect.apply(target, _this, args);\\n        }\\n      },\\n    });\\n\\n  [\\\"log\\\", \\\"warn\\\", \\\"info\\\"].forEach((method) => {\\n    nativeConsole[method] = createProxy(method);\\n  });\\n\\n  window.addEventListener(\\\"error\\\", (event) => {\\n    postMessage(\\\"error\\\", [event.message]);\\n  });\\n})(window.console);\\n\";","export default \"// Custom widget events definition\\nexport const EVENTS = {\\n  CUSTOM_WIDGET_READY: \\\"CUSTOM_WIDGET_READY\\\",\\n  CUSTOM_WIDGET_READY_ACK: \\\"CUSTOM_WIDGET_READY_ACK\\\",\\n  CUSTOM_WIDGET_UPDATE_MODEL: \\\"CUSTOM_WIDGET_UPDATE_MODEL\\\",\\n  CUSTOM_WIDGET_TRIGGER_EVENT: \\\"CUSTOM_WIDGET_TRIGGER_EVENT\\\",\\n  CUSTOM_WIDGET_MODEL_CHANGE: \\\"CUSTOM_WIDGET_MODEL_CHANGE\\\",\\n  CUSTOM_WIDGET_UI_CHANGE: \\\"CUSTOM_WIDGET_UI_CHANGE\\\",\\n  CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK: \\\"CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK\\\",\\n  CUSTOM_WIDGET_CONSOLE_EVENT: \\\"CUSTOM_WIDGET_CONSOLE_EVENT\\\",\\n  CUSTOM_WIDGET_THEME_UPDATE: \\\"CUSTOM_WIDGET_THEME_UPDATE\\\",\\n  CUSTOM_WIDGET_UPDATE_HEIGHT: \\\"CUSTOM_WIDGET_UPDATE_HEIGHT\\\",\\n};\\n\\n// Function to create a communication channel to the parent\\nexport const createChannelToParent = () => {\\n  const onMessageMap = new Map();\\n  // Function to register an event handler for a message type\\n  function onMessage(type, fn) {\\n    let eventHandlerList = onMessageMap.get(type);\\n    if (eventHandlerList && eventHandlerList instanceof Array) {\\n      eventHandlerList.push(fn);\\n    } else {\\n      eventHandlerList = [fn];\\n      onMessageMap.set(type, eventHandlerList);\\n    }\\n    return () => {\\n      // Function to unsubscribe an event handler\\n      const index = eventHandlerList.indexOf(fn);\\n      eventHandlerList.splice(index, 1);\\n    };\\n  }\\n  // Listen for 'message' events and dispatch to registered event handlers\\n  window.addEventListener(\\\"message\\\", (event) => {\\n    if (event.source === window.parent) {\\n      const handlerList = onMessageMap.get(event.data.type);\\n      if (handlerList) {\\n        handlerList.forEach((fn) => fn(event.data));\\n      }\\n    }\\n  });\\n  // Queue to hold postMessage requests\\n  const postMessageQueue = [];\\n  // Flag to indicate if the flush is scheduled\\n  let isFlushScheduled = false;\\n\\n  /*\\n   * Function to schedule microtask to flush postMessageQueue\\n   * to ensure the order of message processed on the parent\\n   */\\n  const scheduleMicrotaskToflushPostMessageQueue = () => {\\n    if (!isFlushScheduled) {\\n      isFlushScheduled = true;\\n      queueMicrotask(() => {\\n        (async () => {\\n          while (postMessageQueue.length > 0) {\\n            const message = postMessageQueue.shift();\\n            await new Promise((resolve) => {\\n              const key = Math.random();\\n              const unlisten = onMessage(\\n                EVENTS.CUSTOM_WIDGET_MESSAGE_RECEIVED_ACK,\\n                (data) => {\\n                  if (data.key === key && data.success) {\\n                    unlisten();\\n                    resolve();\\n                  }\\n                },\\n              );\\n\\n              // Send the message to the parent\\n              window.parent.postMessage(\\n                Object.assign(Object.assign({}, message), { key }),\\n                \\\"*\\\",\\n              );\\n            });\\n          }\\n          isFlushScheduled = false;\\n        })();\\n      });\\n    }\\n  };\\n\\n  return {\\n    onMessageMap,\\n    postMessage: (type, data) => {\\n      try {\\n        // Try block to catch non clonealbe data error while postmessaging\\n        // throw error if the data is not cloneable\\n        postMessageQueue.push({\\n          type,\\n          data,\\n        });\\n\\n        scheduleMicrotaskToflushPostMessageQueue();\\n      } catch (e) {\\n        throw e;\\n      }\\n    },\\n    onMessage,\\n  };\\n};\\n\\n/*\\n * Function to initialize the script\\n * wrapping this inside a function to make it testable\\n */\\nexport function main() {\\n  // Create a communication channel to the parent\\n  const channel = createChannelToParent();\\n  /*\\n   * Variables to hold the subscriber functions\\n   */\\n  const modelSubscribers = [];\\n  const uiSubscribers = [];\\n  const themeSubscribers = [];\\n  /*\\n   * Variables to hold ready function and state\\n   */\\n  let onReady;\\n  let isReady = false;\\n  let isReadyCalled = false;\\n\\n  const heightObserver = new ResizeObserver(() => {\\n    const height = document.body.clientHeight;\\n\\n    channel.postMessage(EVENTS.CUSTOM_WIDGET_UPDATE_HEIGHT, {\\n      height,\\n    });\\n  });\\n\\n  // Callback for when the READY_ACK message is received\\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_READY_ACK, (event) => {\\n    window.appsmith.model = event.model;\\n    window.appsmith.ui = event.ui;\\n    window.appsmith.theme = event.theme;\\n    window.appsmith.mode = event.mode;\\n    heightObserver.observe(window.document.body);\\n\\n    // Subscribe to model and UI changes\\n    window.appsmith.onModelChange(generateAppsmithCssVariables(\\\"model\\\"));\\n    window.appsmith.onUiChange(generateAppsmithCssVariables(\\\"ui\\\"));\\n    window.appsmith.onThemeChange(generateAppsmithCssVariables(\\\"theme\\\"));\\n\\n    // Set the widget as ready\\n    isReady = true;\\n\\n    if (!isReadyCalled && onReady) {\\n      onReady();\\n      isReadyCalled = true;\\n    }\\n  });\\n  // Callback for when MODEL_CHANGE message is received\\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_MODEL_CHANGE, (event) => {\\n    if (event.model) {\\n      const prevModel = window.appsmith.model;\\n\\n      window.appsmith.model = event.model;\\n\\n      // Notify model subscribers\\n      modelSubscribers.forEach((fn) => {\\n        fn(event.model, prevModel);\\n      });\\n    }\\n  });\\n  // Callback for when UI_CHANGE message is received\\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_UI_CHANGE, (event) => {\\n    if (event.ui) {\\n      const prevUi = window.appsmith.ui;\\n\\n      window.appsmith.ui = event.ui;\\n      // Notify UI subscribers\\n      uiSubscribers.forEach((fn) => {\\n        fn(event.ui, prevUi);\\n      });\\n    }\\n  });\\n\\n  channel.onMessage(EVENTS.CUSTOM_WIDGET_THEME_UPDATE, (event) => {\\n    if (event.theme) {\\n      const prevTheme = window.appsmith.theme;\\n\\n      window.appsmith.theme = event.theme;\\n      // Notify theme subscribers\\n      themeSubscribers.forEach((fn) => {\\n        fn(event.theme, prevTheme);\\n      });\\n    }\\n  });\\n\\n  if (!window.appsmith) {\\n    // Define appsmith global object\\n    Object.defineProperty(window, \\\"appsmith\\\", {\\n      configurable: false,\\n      writable: false,\\n      value: {\\n        mode: \\\"\\\",\\n        theme: {},\\n        onThemeChange: (fn) => {\\n          if (typeof fn !== \\\"function\\\") {\\n            throw new Error(\\\"onThemeChange expects a function as parameter\\\");\\n          }\\n\\n          themeSubscribers.push(fn);\\n          fn(window.appsmith.theme);\\n\\n          return () => {\\n            // Unsubscribe from theme changes\\n            const index = themeSubscribers.indexOf(fn);\\n\\n            if (index > -1) {\\n              themeSubscribers.splice(index, 1);\\n            }\\n          };\\n        },\\n        onUiChange: (fn) => {\\n          if (typeof fn !== \\\"function\\\") {\\n            throw new Error(\\\"onUiChange expects a function as parameter\\\");\\n          }\\n\\n          uiSubscribers.push(fn);\\n          fn(window.appsmith.ui);\\n          return () => {\\n            // Unsubscribe from UI changes\\n            const index = uiSubscribers.indexOf(fn);\\n            if (index > -1) {\\n              uiSubscribers.splice(index, 1);\\n            }\\n          };\\n        },\\n        onModelChange: (fn) => {\\n          if (typeof fn !== \\\"function\\\") {\\n            throw new Error(\\\"onModelChange expects a function as parameter\\\");\\n          }\\n\\n          modelSubscribers.push(fn);\\n          fn(window.appsmith.model);\\n          return () => {\\n            // Unsubscribe from model changes\\n            const index = modelSubscribers.indexOf(fn);\\n            if (index > -1) {\\n              modelSubscribers.splice(index, 1);\\n            }\\n          };\\n        },\\n        updateModel: (obj) => {\\n          if (!obj || typeof obj !== \\\"object\\\") {\\n            throw new Error(\\\"updateModel expects an object as parameter\\\");\\n          }\\n\\n          appsmith.model = Object.assign(\\n            Object.assign({}, appsmith.model),\\n            obj,\\n          );\\n\\n          // Send an update model message to the parent\\n          channel.postMessage(EVENTS.CUSTOM_WIDGET_UPDATE_MODEL, obj);\\n        },\\n        triggerEvent: (eventName, contextObj) => {\\n          if (typeof eventName !== \\\"string\\\") {\\n            throw new Error(\\\"eventName should be a string\\\");\\n          } else if (contextObj && typeof contextObj !== \\\"object\\\") {\\n            throw new Error(\\\"contextObj should be an object\\\");\\n          }\\n\\n          // Send a trigger event message to the parent\\n          channel.postMessage(EVENTS.CUSTOM_WIDGET_TRIGGER_EVENT, {\\n            eventName,\\n            contextObj,\\n          });\\n        },\\n        model: {},\\n        ui: {},\\n        onReady: (fn) => {\\n          if (typeof fn !== \\\"function\\\") {\\n            throw new Error(\\\"onReady expects a function as parameter\\\");\\n          }\\n\\n          onReady = fn;\\n\\n          if (isReady && !isReadyCalled && onReady) {\\n            onReady();\\n            isReadyCalled = true;\\n          }\\n        },\\n      },\\n    });\\n  }\\n\\n  // Listen for the 'load' event and send READY message to the parent\\n  window.addEventListener(\\\"load\\\", () => {\\n    channel.postMessage(EVENTS.CUSTOM_WIDGET_READY);\\n  });\\n}\\n\\n/*\\n * Function to create appsmith css variables for model and ui primitive values\\n * variables get regenerated every time the model or ui changes.\\n */\\nexport const generateAppsmithCssVariables = (provider) => (source) => {\\n  let cssTokens = document.getElementById(`appsmith-${provider}-css-tokens`);\\n  if (!cssTokens) {\\n    cssTokens = document.createElement(\\\"style\\\");\\n    cssTokens.id = `appsmith-${provider}-css-tokens`;\\n    window.document.head.appendChild(cssTokens);\\n  }\\n\\n  const cssTokensContent = Object.keys(source).reduce((acc, key) => {\\n    if (typeof source[key] === \\\"string\\\" || typeof source[key] === \\\"number\\\") {\\n      return `\\n    ${acc}\\n    --appsmith-${provider}-${key}: ${source[key]};\\n    `;\\n    } else {\\n      return acc;\\n    }\\n  }, \\\"\\\");\\n  cssTokens.innerHTML = `:root {${cssTokensContent}}`;\\n};\\n\";"],"names":["CUSTOM_WIDGET_BUILDER_EVENTS","READY","READY_ACK","UPDATE_SRCDOC","UPDATE_REFERENCES","UPDATE_REFERENCES_ACK","PAUSE","RESUME","DISCONNECTED","CLOSE","LOCAL_STORAGE_KEYS_IS_REFERENCE_OPEN","LOCAL_STORAGE_KEYS_SELECTED_LAYOUT","DEFAULT_CONTEXT_VALUE","name","widgetId","srcDoc","html","js","css","uncompiledSrcDoc","model","events","key","Math","random","isReferenceOpen","selectedLayout","debuggerLogs","showConnectionLostMessage","theme","colors","primaryColor","backgroundColor","borderRadius","appBorderRadius","boxShadow","appBoxShadow","fontFamily","appFontFamily","CUSTOM_WIDGET_DOC_URL","CUSTOM_WIDGET_DEFAULT_MODEL_DOC_URL","concat","CUSTOM_WIDGET_ONREADY_DOC_URL","CUSTOM_WIDGET_HEIGHT_DOC_URL","EVENTS","StyledIframe","styled","_templateObject","_taggedTemplateLiteral","props","componentWidth","componentHeight","componentMinHeight","OverlayDiv","_templateObject2","Container","_templateObject3","disableIframeWidgetSandbox","getAppsmithConfigs","connect","state","ownProps","_getWidgetPropsForPro","isPreviewMode","combinedPreviewModeSelector","needsOverlay","renderMode","getWidgetPropsForPropertyPane","getIsAutoHeightWithLimitsChanging","iframe","useRef","_React$useState","React","_React$useState2","_slicedToArray","loading","setLoading","_useState","useState","_useState2","isIframeReady","setIsIframeReady","_useState3","height","_useState4","setHeight","useMemo","_props$theme","_props$theme2","_props$theme2$borderR","_props$theme3","_props$theme3$boxShad","_objectSpread","useEffect","handler","event","_iframe$current","_iframe$current2","_iframe$current2$cont","_iframe$current4","_iframe$current4$cont","iframeWindow","current","contentWindow","contentDocument","defaultView","source","_iframe$current3","_iframe$current3$cont","postMessage","type","data","success","message","ui","width","mode","AnalyticsUtil","update","execute","eventName","contextObj","_iframe$current5","dynamicHeight","DynamicHeight","layoutSystemType","LayoutSystemTypes","style","setProperty","onConsole","args","window","addEventListener","removeEventListener","_iframe$current6","_jsxs","className","clsx","children","_jsx","WidgetStyleContainer","borderColor","borderWidth","minDynamicHeight","GridDefaults","onLoad","ref","sandbox","undefined"],"sourceRoot":""}