{"version":3,"file":"static/js/AppViewer.2b8ea8c2.chunk.js","mappings":"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","sources":["pages/AppViewer/BrandingBadge.tsx","pages/AppViewer/AppPage.tsx","pages/AppViewer/AppViewerPageContainer.tsx","ce/pages/AppViewer/KnowledgeBase/KBViewerFloatingButton.tsx","pages/AppViewer/index.tsx","utils/hooks/usePrevious.tsx"],"sourcesContent":["import React from \"react\";\nimport { importSvg } from \"design-system-old\";\nimport styled from \"styled-components\";\nimport { Text } from \"design-system\";\nconst AppsmithLogo = importSvg(\n  async () => import(\"assets/svg/appsmith-logo-no-pad.svg\"),\n);\n\nconst Wrapper = styled.span`\n  border-radius: var(--ads-v2-border-radius);\n  border: 1px solid var(--ads-v2-color-border);\n  background-color: var(--ads-v2-color-bg);\n\n  svg {\n    margin-top: 2px;\n  }\n`;\n\nfunction BrandingBadge() {\n  return (\n    <Wrapper className=\"flex items-center p-1 px-2 space-x-2 w-max backdrop-blur-xl backdrop-filter\">\n      <Text renderAs=\"h4\">Built on</Text>\n      <AppsmithLogo className=\"w-auto h-3\" />\n    </Wrapper>\n  );\n}\n\nexport default BrandingBadge;\n","import React, { useEffect, useMemo } from \"react\";\nimport AnalyticsUtil from \"@appsmith/utils/AnalyticsUtil\";\nimport { useDynamicAppLayout } from \"utils/hooks/useDynamicAppLayout\";\nimport type { CanvasWidgetStructure } from \"WidgetProvider/constants\";\nimport { useSelector } from \"react-redux\";\nimport { getAppMode } from \"@appsmith/selectors/applicationSelectors\";\nimport { PageView, PageViewWrapper } from \"./AppPage.styled\";\nimport { APP_MODE } from \"entities/App\";\nimport { renderAppsmithCanvas } from \"layoutSystems/CanvasFactory\";\nimport type { WidgetProps } from \"widgets/BaseWidget\";\nimport { useAppViewerSidebarProperties } from \"utils/hooks/useAppViewerSidebarProperties\";\nimport { getIsAnvilLayout } from \"layoutSystems/anvil/integrations/selectors\";\n\ninterface AppPageProps {\n  appName?: string;\n  canvasWidth: number;\n  pageId?: string;\n  pageName?: string;\n  widgetsStructure: CanvasWidgetStructure;\n}\n\nexport function AppPage(props: AppPageProps) {\n  const appMode = useSelector(getAppMode);\n  const isPublished = appMode === APP_MODE.PUBLISHED;\n  const isAnvilLayout = useSelector(getIsAnvilLayout);\n  const { hasSidebarPinned, sidebarWidth } = useAppViewerSidebarProperties();\n\n  const width: string = useMemo(() => {\n    return isAnvilLayout ? \"100%\" : `${props.canvasWidth}px`;\n  }, [isAnvilLayout, props.canvasWidth]);\n\n  useDynamicAppLayout();\n\n  useEffect(() => {\n    AnalyticsUtil.logEvent(\"PAGE_LOAD\", {\n      pageName: props.pageName,\n      pageId: props.pageId,\n      appName: props.appName,\n      mode: \"VIEW\",\n    });\n  }, [props.pageId, props.pageName]);\n\n  return (\n    <PageViewWrapper\n      hasPinnedSidebar={hasSidebarPinned}\n      isPublished={isPublished}\n      sidebarWidth={sidebarWidth}\n    >\n      <PageView data-testid=\"t--app-viewer-page\" width={width}>\n        {props.widgetsStructure.widgetId &&\n          renderAppsmithCanvas(props.widgetsStructure as WidgetProps)}\n      </PageView>\n    </PageViewWrapper>\n  );\n}\n\nexport default AppPage;\n","import React, { useMemo } from \"react\";\nimport type { RouteComponentProps } from \"react-router-dom\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getIsFetchingPage } from \"selectors/appViewSelectors\";\nimport styled from \"styled-components\";\nimport type { AppViewerRouteParams } from \"constants/routes\";\nimport { theme } from \"constants/DefaultTheme\";\nimport { Icon, NonIdealState, Spinner } from \"@blueprintjs/core\";\nimport Centered from \"components/designSystems/appsmith/CenteredWrapper\";\nimport AppPage from \"./AppPage\";\nimport { getCanvasWidth, getCurrentPageName } from \"selectors/editorSelectors\";\nimport RequestConfirmationModal from \"pages/Editor/RequestConfirmationModal\";\nimport { getCurrentApplication } from \"@appsmith/selectors/applicationSelectors\";\nimport {\n  isPermitted,\n  PERMISSION_TYPE,\n} from \"@appsmith/utils/permissionHelpers\";\nimport { builderURL } from \"@appsmith/RouteBuilder\";\nimport { getCanvasWidgetsStructure } from \"@appsmith/selectors/entitiesSelector\";\nimport equal from \"fast-deep-equal/es6\";\n\nconst Section = styled.section`\n  height: 100%;\n  width: 100%;\n  margin: 0 auto;\n  position: relative;\n  overflow-x: auto;\n  overflow-y: auto;\n`;\n\ntype AppViewerPageContainerProps = RouteComponentProps<AppViewerRouteParams>;\n\nfunction AppViewerPageContainer(props: AppViewerPageContainerProps) {\n  const currentPageName = useSelector(getCurrentPageName);\n  const widgetsStructure = useSelector(getCanvasWidgetsStructure, equal);\n  const canvasWidth = useSelector(getCanvasWidth);\n  const isFetchingPage = useSelector(getIsFetchingPage);\n  const currentApplication = useSelector(getCurrentApplication);\n  const { match } = props;\n\n  // get appsmith editr link\n  const appsmithEditorLink = useMemo(() => {\n    if (\n      currentApplication?.userPermissions &&\n      isPermitted(\n        currentApplication?.userPermissions,\n        PERMISSION_TYPE.MANAGE_APPLICATION,\n      )\n    ) {\n      return (\n        <p>\n          Please add widgets to this page in the&nbsp;\n          <Link\n            to={builderURL({\n              pageId: props.match.params.pageId as string,\n            })}\n          >\n            Appsmith Editor\n          </Link>\n        </p>\n      );\n    }\n  }, [currentApplication?.userPermissions]);\n\n  const pageNotFound = (\n    <Centered>\n      <NonIdealState\n        description={appsmithEditorLink}\n        icon={\n          <Icon\n            color={theme.colors.primaryOld}\n            icon=\"page-layout\"\n            iconSize={theme.fontSizes[9]}\n          />\n        }\n        title=\"This page seems to be blank\"\n      />\n    </Centered>\n  );\n\n  const pageLoading = (\n    <Centered>\n      <Spinner />\n    </Centered>\n  );\n\n  if (isFetchingPage) return pageLoading;\n\n  if (!(widgetsStructure.children && widgetsStructure.children.length > 0))\n    return pageNotFound;\n\n  return (\n    <Section>\n      <AppPage\n        appName={currentApplication?.name}\n        canvasWidth={canvasWidth}\n        pageId={match.params.pageId}\n        pageName={currentPageName}\n        widgetsStructure={widgetsStructure}\n      />\n      <RequestConfirmationModal />\n    </Section>\n  );\n}\n\nexport default withRouter(AppViewerPageContainer);\n","export const KBViewerFloatingButton = () => {\n  return null;\n};\n","import React, { useEffect } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport type { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router\";\nimport type { AppState } from \"@appsmith/reducers\";\nimport type {\n  AppViewerRouteParams,\n  BuilderRouteParams,\n} from \"constants/routes\";\nimport { GIT_BRANCH_QUERY_KEY } from \"constants/routes\";\nimport {\n  getIsInitialized,\n  getAppViewHeaderHeight,\n} from \"selectors/appViewSelectors\";\nimport EditorContextProvider from \"components/editorComponents/EditorContextProvider\";\nimport AppViewerPageContainer from \"./AppViewerPageContainer\";\nimport * as Sentry from \"@sentry/react\";\nimport {\n  getCurrentPageDescription,\n  getIsAutoLayout,\n  getViewModePageList,\n} from \"selectors/editorSelectors\";\nimport { getThemeDetails, ThemeMode } from \"selectors/themeSelectors\";\nimport { getSearchQuery } from \"utils/helpers\";\nimport { getSelectedAppTheme } from \"selectors/appThemingSelectors\";\nimport { useSelector } from \"react-redux\";\nimport BrandingBadge from \"./BrandingBadge\";\nimport { setAppViewHeaderHeight } from \"actions/appViewActions\";\nimport { CANVAS_SELECTOR } from \"constants/WidgetConstants\";\nimport { setupPublishedPage } from \"actions/pageActions\";\nimport usePrevious from \"utils/hooks/usePrevious\";\nimport { getIsBranchUpdated } from \"../utils\";\nimport { APP_MODE } from \"entities/App\";\nimport { initAppViewer } from \"actions/initActions\";\nimport { WidgetGlobaStyles } from \"globalStyles/WidgetGlobalStyles\";\nimport useWidgetFocus from \"utils/hooks/useWidgetFocus/useWidgetFocus\";\nimport HtmlTitle from \"./AppViewerHtmlTitle\";\nimport type { ApplicationPayload } from \"@appsmith/constants/ReduxActionConstants\";\nimport {\n  getAppThemeSettings,\n  getCurrentApplication,\n} from \"@appsmith/selectors/applicationSelectors\";\nimport { editorInitializer } from \"../../utils/editor/EditorUtils\";\nimport { widgetInitialisationSuccess } from \"../../actions/widgetActions\";\nimport type { FontFamily } from \"@design-system/theming\";\nimport {\n  ThemeProvider as WDSThemeProvider,\n  useTheme,\n} from \"@design-system/theming\";\nimport { KBViewerFloatingButton } from \"@appsmith/pages/AppViewer/KnowledgeBase/KBViewerFloatingButton\";\nimport urlBuilder from \"@appsmith/entities/URLRedirect/URLAssembly\";\nimport { getHideWatermark } from \"@appsmith/selectors/tenantSelectors\";\nimport { getIsAnvilLayout } from \"layoutSystems/anvil/integrations/selectors\";\n\nconst AppViewerBody = styled.section<{\n  hasPages: boolean;\n  headerHeight: number;\n  $contain: string;\n}>`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: flex-start;\n  height: calc(100vh - ${({ headerHeight }) => headerHeight}px);\n  --view-mode-header-height: ${({ headerHeight }) => headerHeight}px;\n  contain: ${({ $contain }) => $contain};\n`;\n\nconst AppViewerBodyContainer = styled.div<{\n  width?: string;\n  backgroundColor: string;\n}>`\n  flex: 1;\n  overflow: auto;\n  margin: 0 auto;\n  background: ${({ backgroundColor }) => backgroundColor};\n`;\n\nexport type AppViewerProps = RouteComponentProps<BuilderRouteParams>;\n\ntype Props = AppViewerProps & RouteComponentProps<AppViewerRouteParams>;\n\nconst DEFAULT_FONT_NAME = \"System Default\";\n\nfunction AppViewer(props: Props) {\n  const dispatch = useDispatch();\n  const { pathname, search } = props.location;\n  const { applicationId, pageId } = props.match.params;\n  const isInitialized = useSelector(getIsInitialized);\n  const pages = useSelector(getViewModePageList);\n  const selectedTheme = useSelector(getSelectedAppTheme);\n  const lightTheme = useSelector((state: AppState) =>\n    getThemeDetails(state, ThemeMode.LIGHT),\n  );\n  const headerHeight = useSelector(getAppViewHeaderHeight);\n  const branch = getSearchQuery(search, GIT_BRANCH_QUERY_KEY);\n  const prevValues = usePrevious({ branch, location: props.location, pageId });\n  const hideWatermark = useSelector(getHideWatermark);\n  const pageDescription = useSelector(getCurrentPageDescription);\n  const currentApplicationDetails: ApplicationPayload | undefined = useSelector(\n    getCurrentApplication,\n  );\n  const isAnvilLayout = useSelector(getIsAnvilLayout);\n  const themeSetting = useSelector(getAppThemeSettings);\n  const themeProps = {\n    borderRadius: selectedTheme.properties.borderRadius.appBorderRadius,\n    seedColor: selectedTheme.properties.colors.primaryColor,\n    fontFamily: selectedTheme.properties.fontFamily.appFont as FontFamily,\n  };\n  const wdsThemeProps = {\n    borderRadius: themeSetting.borderRadius,\n    seedColor: themeSetting.accentColor,\n    colorMode: themeSetting.colorMode.toLowerCase(),\n    fontFamily: themeSetting.fontFamily as FontFamily,\n    userSizing: themeSetting.sizing,\n    userDensity: themeSetting.density,\n    iconStyle: themeSetting.iconStyle.toLowerCase(),\n  };\n  const { theme } = useTheme(isAnvilLayout ? wdsThemeProps : themeProps);\n  const focusRef = useWidgetFocus();\n  const isAutoLayout = useSelector(getIsAutoLayout);\n\n  /**\n   * initializes the widgets factory and registers all widgets\n   */\n  useEffect(() => {\n    editorInitializer().then(() => {\n      dispatch(widgetInitialisationSuccess());\n    });\n  }, []);\n  /**\n   * initialize the app if branch, pageId or application is changed\n   */\n  useEffect(() => {\n    const prevBranch = prevValues?.branch;\n    const prevLocation = prevValues?.location;\n    const prevPageId = prevValues?.pageId;\n    let isBranchUpdated = false;\n    if (prevBranch && prevLocation) {\n      isBranchUpdated = getIsBranchUpdated(props.location, prevLocation);\n    }\n\n    const isPageIdUpdated = pageId !== prevPageId;\n\n    if (prevBranch && isBranchUpdated && (applicationId || pageId)) {\n      dispatch(\n        initAppViewer({\n          applicationId,\n          branch,\n          pageId,\n          mode: APP_MODE.PUBLISHED,\n        }),\n      );\n    } else {\n      /**\n       * First time load is handled by init sagas\n       * If we don't check for `prevPageId`: fetch page is retriggered\n       * when redirected to the default page\n       */\n      if (prevPageId && pageId && isPageIdUpdated) {\n        dispatch(setupPublishedPage(pageId, true));\n      }\n    }\n  }, [branch, pageId, applicationId, pathname]);\n\n  useEffect(() => {\n    urlBuilder.setCurrentPageId(pageId);\n\n    return () => {\n      urlBuilder.setCurrentPageId(null);\n    };\n  }, [pageId]);\n\n  useEffect(() => {\n    const header = document.querySelector(\".js-appviewer-header\");\n\n    dispatch(setAppViewHeaderHeight(header?.clientHeight || 0));\n  }, [pages.length, isInitialized]);\n\n  /**\n   * returns the font to be used for the canvas\n   */\n  const appFontFamily =\n    selectedTheme.properties.fontFamily.appFont === DEFAULT_FONT_NAME\n      ? \"inherit\"\n      : selectedTheme.properties.fontFamily.appFont;\n\n  /**\n   * loads font for canvas based on theme\n   */\n  useEffect(() => {\n    document.body.style.fontFamily = `${appFontFamily}, sans-serif`;\n\n    return function reset() {\n      document.body.style.fontFamily = \"inherit\";\n    };\n  }, [selectedTheme.properties.fontFamily.appFont]);\n\n  const renderChildren = () => {\n    return (\n      <EditorContextProvider renderMode=\"PAGE\">\n        {!isAnvilLayout && (\n          <WidgetGlobaStyles\n            fontFamily={selectedTheme.properties.fontFamily.appFont}\n            primaryColor={selectedTheme.properties.colors.primaryColor}\n          />\n        )}\n        <HtmlTitle\n          description={pageDescription}\n          name={currentApplicationDetails?.name}\n        />\n        <AppViewerBodyContainer\n          backgroundColor={\n            isAnvilLayout ? \"\" : selectedTheme.properties.colors.backgroundColor\n          }\n        >\n          <AppViewerBody\n            $contain={isAutoLayout ? \"content\" : \"strict\"}\n            className={CANVAS_SELECTOR}\n            data-testid=\"t--app-viewer-page-body\"\n            hasPages={pages.length > 1}\n            headerHeight={headerHeight}\n            ref={focusRef}\n          >\n            {isInitialized && <AppViewerPageContainer />}\n          </AppViewerBody>\n          <div className={\"fixed hidden right-8 z-3 md:flex bottom-4\"}>\n            {!hideWatermark && (\n              <a\n                className=\"hover:no-underline\"\n                href=\"https://appsmith.com\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                <BrandingBadge />\n              </a>\n            )}\n            <KBViewerFloatingButton />\n          </div>\n        </AppViewerBodyContainer>\n      </EditorContextProvider>\n    );\n  };\n\n  if (isAnvilLayout) {\n    return (\n      <WDSThemeProvider theme={theme}>{renderChildren()}</WDSThemeProvider>\n    );\n  }\n\n  return <ThemeProvider theme={lightTheme}>{renderChildren()}</ThemeProvider>;\n}\n\nexport default withRouter(Sentry.withProfiler(AppViewer));\n","import { useEffect, useRef } from \"react\";\n\n// Make sure to use this hook at the start of functional component\nconst usePrevious = <T,>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;\n"],"names":["AppsmithLogo","importSvg","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","Wrapper","styled","_templateObject","_taggedTemplateLiteral","_jsxs","className","children","_jsx","Text","renderAs","props","isPublished","useSelector","getAppMode","APP_MODE","isAnvilLayout","getIsAnvilLayout","_useAppViewerSidebarP","useAppViewerSidebarProperties","hasSidebarPinned","sidebarWidth","width","useMemo","concat","canvasWidth","useDynamicAppLayout","useEffect","AnalyticsUtil","pageName","pageId","appName","mode","PageViewWrapper","hasPinnedSidebar","PageView","widgetsStructure","widgetId","renderAppsmithCanvas","Section","withRouter","currentPageName","getCurrentPageName","getCanvasWidgetsStructure","equal","getCanvasWidth","isFetchingPage","getIsFetchingPage","currentApplication","getCurrentApplication","match","appsmithEditorLink","userPermissions","isPermitted","PERMISSION_TYPE","Link","to","builderURL","params","pageNotFound","Centered","NonIdealState","description","icon","Icon","color","theme","iconSize","title","pageLoading","Spinner","length","AppPage","name","RequestConfirmationModal","KBViewerFloatingButton","AppViewerBody","_ref","headerHeight","_ref2","_ref3","$contain","AppViewerBodyContainer","_templateObject2","_ref4","backgroundColor","Sentry","dispatch","useDispatch","_props$location","location","pathname","search","_props$match$params","applicationId","isInitialized","getIsInitialized","pages","getViewModePageList","selectedTheme","getSelectedAppTheme","lightTheme","state","getThemeDetails","ThemeMode","getAppViewHeaderHeight","branch","getSearchQuery","GIT_BRANCH_QUERY_KEY","prevValues","usePrevious","hideWatermark","getHideWatermark","pageDescription","getCurrentPageDescription","currentApplicationDetails","themeSetting","getAppThemeSettings","themeProps","borderRadius","properties","appBorderRadius","seedColor","colors","primaryColor","fontFamily","appFont","wdsThemeProps","accentColor","colorMode","toLowerCase","userSizing","sizing","userDensity","density","iconStyle","useTheme","focusRef","useWidgetFocus","isAutoLayout","getIsAutoLayout","editorInitializer","then","widgetInitialisationSuccess","prevBranch","prevLocation","prevPageId","isBranchUpdated","getIsBranchUpdated","isPageIdUpdated","initAppViewer","setupPublishedPage","urlBuilder","header","document","querySelector","setAppViewHeaderHeight","clientHeight","appFontFamily","body","style","renderChildren","EditorContextProvider","renderMode","WidgetGlobaStyles","HtmlTitle","CANVAS_SELECTOR","hasPages","ref","AppViewerPageContainer","href","rel","target","BrandingBadge","WDSThemeProvider","ThemeProvider","value","useRef","current"],"sourceRoot":""}