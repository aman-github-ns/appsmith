{"version":3,"file":"static/js/page_view_event-aggregate.390e2873.chunk.js","mappings":"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","sources":["../node_modules/@newrelic/browser-agent/dist/esm/common/timing/nav-timing.js","../node_modules/@newrelic/browser-agent/dist/esm/common/vitals/time-to-first-byte.js","../node_modules/@newrelic/browser-agent/dist/esm/features/page_view_event/aggregate/initialized-features.js","../node_modules/@newrelic/browser-agent/dist/esm/common/timing/time-keeper.js","../node_modules/@newrelic/browser-agent/dist/esm/features/page_view_event/aggregate/index.js"],"sourcesContent":["/*\n * Copyright 2020 New Relic Corporation. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// We don't use JSON.stringify directly on the performance timing data for these reasons:\n// * Chrome has extra data in the performance object that we don't want to send all the time (wasteful)\n// * Firefox fails to stringify the native object due to - http://code.google.com/p/v8/issues/detail?id=1223\n// * The variable names are long and wasteful to transmit\n\n// Add Performance Timing values to the given object.\n// * Values are written relative to an offset to reduce their length (i.e. number of characters).\n// * The offset is sent with the data\n// * 0's are not included unless the value is a 'relative zero'\n//\n\nvar START = 'Start';\nvar END = 'End';\nvar UNLOAD_EVENT = 'unloadEvent';\nvar REDIRECT = 'redirect';\nvar DOMAIN_LOOKUP = 'domainLookup';\nvar ONNECT = 'onnect';\nvar REQUEST = 'request';\nvar RESPONSE = 'response';\nvar LOAD_EVENT = 'loadEvent';\nvar DOM_CONTENT_LOAD_EVENT = 'domContentLoadedEvent';\nexport const navTimingValues = [];\nfunction getPntType(type) {\n  if (typeof type === 'number') return type;\n  const types = {\n    navigate: undefined,\n    reload: 1,\n    back_forward: 2,\n    prerender: 3\n  };\n  return types[type];\n}\nexport function addPT(offset, pt) {\n  let v = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let isL1Api = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!pt) return;\n  v.of = offset;\n  handleValue(v.of, v, 'n', true);\n  handleValue(pt[UNLOAD_EVENT + START], v, 'u', isL1Api);\n  handleValue(pt[REDIRECT + START], v, 'r', isL1Api);\n  handleValue(pt[UNLOAD_EVENT + END], v, 'ue', isL1Api);\n  handleValue(pt[REDIRECT + END], v, 're', isL1Api);\n  handleValue(pt['fetch' + START], v, 'f', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + START], v, 'dn', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + END], v, 'dne', isL1Api);\n  handleValue(pt['c' + ONNECT + START], v, 'c', isL1Api);\n  handleValue(pt['secureC' + ONNECT + 'ion' + START], v, 's', isL1Api);\n  handleValue(pt['c' + ONNECT + END], v, 'ce', isL1Api);\n  handleValue(pt[REQUEST + START], v, 'rq', isL1Api);\n  handleValue(pt[RESPONSE + START], v, 'rp', isL1Api);\n  handleValue(pt[RESPONSE + END], v, 'rpe', isL1Api);\n  handleValue(pt.domLoading, v, 'dl', isL1Api);\n  handleValue(pt.domInteractive, v, 'di', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + START], v, 'ds', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + END], v, 'de', isL1Api);\n  handleValue(pt.domComplete, v, 'dc', isL1Api);\n  handleValue(pt[LOAD_EVENT + START], v, 'l', isL1Api);\n  handleValue(pt[LOAD_EVENT + END], v, 'le', isL1Api);\n  return v;\n}\n\n// Add Performance Navigation values to the given object\nexport function addPN(pn, v) {\n  handleValue(getPntType(pn.type), v, 'ty');\n  handleValue(pn.redirectCount, v, 'rc');\n  return v;\n}\n\n/**\n * By side effect, this modifies 'obj' with a mapping of the 'prop' provided to a 'value', and invalid values are not added.\n * On the other hand, the local navTimingValues array gets the value appended if valid and 'undefined' appended if invalid, regardless.\n */\nfunction handleValue(value, obj, prop, isOldApi) {\n  /*\n  For L2 Timing API, the value will already be a relative-to-previous-document DOMHighResTimeStamp.\n  For L1 (deprecated) Timing, the value is an UNIX epoch timestamp, which we will convert to a relative time using our offset.\n  PNT.type is reported as undefined, 1, 2, etc -- note that zero-value properties will be recorded as 'undefined', however DEM interprets undefined \"types\" as \"navigate\"\n  */\n  if (typeof value === 'number' && value > 0) {\n    // note that zero-value properties will be recorded as 'undefined'\n    if (isOldApi) {\n      const offset = obj?.of > 0 ? obj.of : 0; // expect an epoch timestamp, if called by addPT\n      value = Math.max(value - offset, 0);\n    }\n    value = Math.round(value);\n    obj[prop] = value;\n    navTimingValues.push(value);\n  } else navTimingValues.push(undefined);\n}","import { globalScope, isBrowserScope, isiOS, offset } from '../constants/runtime';\nimport { VITAL_NAMES } from './constants';\nimport { VitalMetric } from './vital-metric';\nimport { onTTFB } from 'web-vitals/attribution';\nexport const timeToFirstByte = new VitalMetric(VITAL_NAMES.TIME_TO_FIRST_BYTE);\nif (isBrowserScope && typeof PerformanceNavigationTiming !== 'undefined' && !isiOS) {\n  onTTFB(_ref => {\n    let {\n      value,\n      attribution\n    } = _ref;\n    if (timeToFirstByte.isValid) return;\n    timeToFirstByte.update({\n      value,\n      attrs: {\n        navigationEntry: attribution.navigationEntry\n      }\n    });\n  });\n} else {\n  if (!timeToFirstByte.isValid) {\n    const entry = {};\n    // convert real timestamps to relative timestamps to match web-vitals behavior\n    for (let key in globalScope?.performance?.timing || {}) entry[key] = Math.max(globalScope?.performance?.timing[key] - offset, 0);\n\n    // ttfb is equiv to document's responseStart property in timing API --> https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart\n    timeToFirstByte.update({\n      value: entry.responseStart,\n      attrs: {\n        navigationEntry: entry\n      }\n    });\n  }\n}","import { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { gosNREUM } from '../../../common/window/nreum';\n\n/**\n * Get an array of flags required by downstream (NR UI) based on the features initialized in this agent\n * (aka what is running on the page).\n * @param {String} agentId - the ID of the initialized agent on the page, mapping to the one under the global 'newrelic' object\n * @returns {String[]} Up to 5 short strings corresponding to ingest mapping of features.\n */\nexport function getActivatedFeaturesFlags(agentId) {\n  const flagArr = [];\n  const newrelic = gosNREUM();\n  try {\n    Object.keys(newrelic.initializedAgents[agentId].features).forEach(featName => {\n      switch (featName) {\n        case FEATURE_NAMES.ajax:\n          flagArr.push('xhr');\n          break;\n        case FEATURE_NAMES.jserrors:\n          flagArr.push('err');\n          break;\n        case FEATURE_NAMES.pageAction:\n          flagArr.push('ins');\n          break;\n        case FEATURE_NAMES.sessionTrace:\n          flagArr.push('stn');\n          break;\n        case FEATURE_NAMES.softNav:\n        case FEATURE_NAMES.spa:\n          flagArr.push('spa');\n          break;\n      }\n    });\n  } catch (e) {}\n  return flagArr;\n}\n\n// Note: this module and the \"af\" param in src/features/page_view_event/aggregate/index.js can be removed in the future at such time\n// that it's no longer being used. For the browser agent, this is an unused flag system.","import { globalScope } from '../constants/runtime';\n\n/**\n * Class used to adjust the timestamp of harvested data to New Relic server time. This\n * is done by tracking the performance timings of the RUM call and applying a calculation\n * to the harvested data event offset time.\n */\nexport class TimeKeeper {\n  /**\n   * Represents the browser origin time.\n   * @type {number}\n   */\n  #originTime;\n\n  /**\n   * Represents the browser origin time corrected to NR server time.\n   * @type {number}\n   */\n  #correctedOriginTime;\n\n  /**\n   * Represents the difference in milliseconds between the calculated NR server time and\n   * the local time.\n   * @type {number}\n   */\n  #localTimeDiff;\n\n  /**\n   * Represents whether the timekeeper is in a state that it can accurately convert\n   * timestamps.\n   * @type {number}\n   */\n  #ready = false;\n  constructor() {\n    this.#originTime = globalScope.performance.timeOrigin || globalScope.performance.timing.navigationStart;\n  }\n  get ready() {\n    return this.#ready;\n  }\n  get originTime() {\n    return this.#originTime;\n  }\n  get correctedOriginTime() {\n    return this.#correctedOriginTime;\n  }\n\n  /**\n   * Process a rum request to calculate NR server time.\n   * @param rumRequest {XMLHttpRequest} The xhr for the rum request\n   * @param startTime {number} The start time of the RUM request\n   * @param endTime {number} The end time of the RUM request\n   */\n  processRumRequest(rumRequest, startTime, endTime) {\n    const responseDateHeader = rumRequest.getResponseHeader('Date');\n    if (!responseDateHeader) {\n      throw new Error('Missing date header on rum response.');\n    }\n    const medianRumOffset = (endTime - startTime) / 2;\n    const serverOffset = Math.floor(startTime + medianRumOffset);\n\n    // Corrected page origin time\n    this.#correctedOriginTime = Math.floor(Date.parse(responseDateHeader) - serverOffset);\n    this.#localTimeDiff = this.#originTime - this.#correctedOriginTime;\n    if (Number.isNaN(this.#correctedOriginTime)) {\n      throw new Error('Date header invalid format.');\n    }\n    this.#ready = true;\n  }\n\n  /**\n   * Converts a page origin relative time to an absolute timestamp\n   * corrected to NR server time.\n   * @param relativeTime {number} The relative time of the event in milliseconds\n   * @returns {number} Corrected unix/epoch timestamp\n   */\n  convertRelativeTimestamp(relativeTime) {\n    return this.#correctedOriginTime + relativeTime;\n  }\n\n  /**\n   * Corrects an event timestamp to NR server time.\n   * @param timestamp {number} The unix/epoch timestamp of the event with milliseconds\n   * @return {number} Corrected unix/epoch timestamp\n   */\n  correctAbsoluteTimestamp(timestamp) {\n    return Math.floor(timestamp - this.#localTimeDiff);\n  }\n}","import { globalScope, isBrowserScope } from '../../../common/constants/runtime';\nimport { addPT, addPN } from '../../../common/timing/nav-timing';\nimport { stringify } from '../../../common/util/stringify';\nimport { getInfo, getRuntime } from '../../../common/config/config';\nimport { Harvest } from '../../../common/harvest/harvest';\nimport * as CONSTANTS from '../constants';\nimport { getActivatedFeaturesFlags } from './initialized-features';\nimport { activateFeatures } from '../../../common/util/feature-flags';\nimport { warn } from '../../../common/util/console';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { firstContentfulPaint } from '../../../common/vitals/first-contentful-paint';\nimport { firstPaint } from '../../../common/vitals/first-paint';\nimport { timeToFirstByte } from '../../../common/vitals/time-to-first-byte';\nimport { drain } from '../../../common/drain/drain';\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { handle } from '../../../common/event-emitter/handle';\nimport { SUPPORTABILITY_METRIC_CHANNEL } from '../../metrics/constants';\nimport { now } from '../../../common/timing/now';\nimport { TimeKeeper } from '../../../common/timing/time-keeper';\nexport class Aggregate extends AggregateBase {\n  static featureName = CONSTANTS.FEATURE_NAME;\n  constructor(agentIdentifier, aggregator) {\n    super(agentIdentifier, aggregator, CONSTANTS.FEATURE_NAME);\n    this.timeToFirstByte = 0;\n    this.firstByteToWindowLoad = 0; // our \"frontend\" duration\n    this.firstByteToDomContent = 0; // our \"dom processing\" duration\n\n    if (isBrowserScope) {\n      timeToFirstByte.subscribe(_ref => {\n        let {\n          value,\n          attrs\n        } = _ref;\n        const navEntry = attrs.navigationEntry;\n        this.timeToFirstByte = Math.max(value, this.timeToFirstByte);\n        this.firstByteToWindowLoad = Math.max(Math.round(navEntry.loadEventEnd - this.timeToFirstByte), this.firstByteToWindowLoad); // our \"frontend\" duration\n        this.firstByteToDomContent = Math.max(Math.round(navEntry.domContentLoadedEventEnd - this.timeToFirstByte), this.firstByteToDomContent); // our \"dom processing\" duration\n\n        this.sendRum();\n      });\n    } else {\n      // worker agent build does not get TTFB values, use default 0 values\n      this.sendRum();\n    }\n  }\n  sendRum() {\n    const info = getInfo(this.agentIdentifier);\n    const agentRuntime = getRuntime(this.agentIdentifier);\n    const harvester = new Harvest(this);\n    if (!info.beacon) return;\n    if (info.queueTime) this.aggregator.store('measures', 'qt', {\n      value: info.queueTime\n    });\n    if (info.applicationTime) this.aggregator.store('measures', 'ap', {\n      value: info.applicationTime\n    });\n\n    // These 3 values should've been recorded after load and before this func runs. They are part of the minimum required for PageView events to be created.\n    // Following PR #428, which demands that all agents send RUM call, these need to be sent even outside of the main window context where PerformanceTiming\n    // or PerformanceNavigationTiming do not exists. Hence, they'll be filled in by 0s instead in, for example, worker threads that still init the PVE module.\n    this.aggregator.store('measures', 'be', {\n      value: this.timeToFirstByte\n    });\n    this.aggregator.store('measures', 'fe', {\n      value: this.firstByteToWindowLoad\n    });\n    this.aggregator.store('measures', 'dc', {\n      value: this.firstByteToDomContent\n    });\n    const queryParameters = {\n      tt: info.ttGuid,\n      us: info.user,\n      ac: info.account,\n      pr: info.product,\n      af: getActivatedFeaturesFlags(this.agentIdentifier).join(','),\n      ...Object.entries(this.aggregator.get('measures') || {}).reduce((aggregator, _ref2) => {\n        let [metricName, measure] = _ref2;\n        aggregator[metricName] = measure.params?.value;\n        return aggregator;\n      }, {}),\n      xx: info.extra,\n      ua: info.userAttributes,\n      at: info.atts\n    };\n    if (agentRuntime.session) queryParameters.fsh = Number(agentRuntime.session.isNew); // \"first session harvest\" aka RUM request or PageView event of a session\n\n    let body;\n    if (typeof info.jsAttributes === 'object' && Object.keys(info.jsAttributes).length > 0) {\n      body = {\n        ja: info.jsAttributes\n      };\n    }\n    if (globalScope.performance) {\n      if (typeof PerformanceNavigationTiming !== 'undefined') {\n        // Navigation Timing level 2 API that replaced PerformanceTiming & PerformanceNavigation\n        const navTimingEntry = globalScope?.performance?.getEntriesByType('navigation')?.[0];\n        const perf = {\n          timing: addPT(agentRuntime.offset, navTimingEntry, {}),\n          navigation: addPN(navTimingEntry, {})\n        };\n        queryParameters.perf = stringify(perf);\n      } else if (typeof PerformanceTiming !== 'undefined') {\n        // Safari pre-15 did not support level 2 timing\n        const perf = {\n          timing: addPT(agentRuntime.offset, globalScope.performance.timing, {}, true),\n          navigation: addPN(globalScope.performance.navigation, {})\n        };\n        queryParameters.perf = stringify(perf);\n      }\n    }\n    queryParameters.fp = firstPaint.current.value;\n    queryParameters.fcp = firstContentfulPaint.current.value;\n    const rumStartTime = now();\n    harvester.send({\n      endpoint: 'rum',\n      payload: {\n        qs: queryParameters,\n        body\n      },\n      opts: {\n        needResponse: true,\n        sendEmptyBody: true\n      },\n      cbFinished: _ref3 => {\n        let {\n          status,\n          responseText,\n          xhr\n        } = _ref3;\n        const rumEndTime = now();\n        if (status >= 400 || status === 0) {\n          // Adding retry logic for the rum call will be a separate change\n          this.ee.abort();\n          return;\n        }\n        try {\n          const timeKeeper = new TimeKeeper();\n          timeKeeper.processRumRequest(xhr, rumStartTime, rumEndTime);\n          if (!timeKeeper.ready) throw new Error('TimeKeeper not ready');\n          agentRuntime.timeKeeper = timeKeeper;\n        } catch (error) {\n          handle(SUPPORTABILITY_METRIC_CHANNEL, ['PVE/NRTime/Calculation/Failed'], undefined, FEATURE_NAMES.metrics, this.ee);\n          drain(this.agentIdentifier, FEATURE_NAMES.metrics, true);\n          this.ee.abort();\n          warn('Could not calculate New Relic server time. Agent shutting down.');\n          return;\n        }\n        try {\n          const {\n            app,\n            ...flags\n          } = JSON.parse(responseText);\n          agentRuntime.appMetadata = app;\n          activateFeatures(flags, this.agentIdentifier);\n          this.drain();\n        } catch (err) {\n          this.ee.abort();\n          warn('RUM call failed. Agent shutting down.', err);\n        }\n      }\n    });\n  }\n}"],"names":["START","END","UNLOAD_EVENT","REDIRECT","DOMAIN_LOOKUP","ONNECT","REQUEST","RESPONSE","LOAD_EVENT","DOM_CONTENT_LOAD_EVENT","navTimingValues","addPT","offset","pt","v","arguments","length","undefined","isL1Api","of","handleValue","domLoading","domInteractive","domComplete","addPN","pn","type","navigate","reload","back_forward","prerender","redirectCount","value","obj","prop","isOldApi","Math","max","round","push","timeToFirstByte","VitalMetric","VITAL_NAMES","isBrowserScope","PerformanceNavigationTiming","isiOS","onTTFB","_ref","attribution","isValid","update","attrs","navigationEntry","entry","key","globalScope","_globalScope$performa","timing","_globalScope$performa2","responseStart","getActivatedFeaturesFlags","agentId","flagArr","newrelic","gosNREUM","Object","keys","initializedAgents","features","forEach","featName","FEATURE_NAMES","e","_originTime","WeakMap","_correctedOriginTime","_localTimeDiff","_ready","TimeKeeper","_classCallCheck","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","this","_createClass","get","_classPrivateFieldGet","rumRequest","startTime","endTime","responseDateHeader","getResponseHeader","Error","medianRumOffset","serverOffset","floor","Date","parse","Number","isNaN","relativeTime","timestamp","Aggregate","_AggregateBase","agentIdentifier","aggregator","_this","CONSTANTS","firstByteToWindowLoad","firstByteToDomContent","navEntry","loadEventEnd","domContentLoadedEventEnd","sendRum","_inherits","_this2","info","getInfo","agentRuntime","getRuntime","harvester","Harvest","beacon","queueTime","store","applicationTime","body","queryParameters","_objectSpread","tt","ttGuid","us","user","ac","account","pr","product","af","join","entries","reduce","_ref2","_measure$params","_ref4","_slicedToArray","metricName","measure","params","xx","extra","ua","userAttributes","at","atts","session","fsh","isNew","jsAttributes","ja","navTimingEntry","getEntriesByType","perf","navigation","stringify","PerformanceTiming","fp","firstPaint","fcp","firstContentfulPaint","rumStartTime","now","send","endpoint","payload","qs","opts","needResponse","sendEmptyBody","cbFinished","_ref3","status","responseText","xhr","rumEndTime","ee","abort","timeKeeper","processRumRequest","ready","error","handle","SUPPORTABILITY_METRIC_CHANNEL","drain","warn","_JSON$parse","JSON","app","flags","_objectWithoutProperties","_excluded","appMetadata","activateFeatures","err","AggregateBase","_defineProperty"],"sourceRoot":""}