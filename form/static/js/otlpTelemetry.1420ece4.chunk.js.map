{"version":3,"file":"static/js/otlpTelemetry.1420ece4.chunk.js","mappings":"4SAUA,IAAQA,GAAaC,EAAAA,EAAAA,KAAbD,SACAE,EACNF,EADME,cAAeC,EACrBH,EADqBG,aAAcC,EACnCJ,EADmCI,eAAgBC,EACnDL,EADmDK,gBAG/CC,EAAW,IAAIC,EAAAA,EAAkB,CACrCC,SAAU,IAAIC,EAAAA,GAAQC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACrBC,EAAAA,GAAAA,aAA0CN,GAC1CM,EAAAA,GAAAA,oBAAiDT,GACjDS,EAAAA,GAAAA,gBAA6C,YAI5CC,EAAmB,IAAIC,EAAAA,EAAkB,CAC7CC,IAAI,GAADC,OAAKZ,EAAY,cACpBa,QAAS,CACP,UAAWZ,KAITa,EAAY,IAAIC,EAAAA,EACpBN,EAEA,CAEEO,aAAc,IAEdC,mBAAoB,GAEpBC,qBAAsB,IAEtBC,oBAAqB,MAInBC,EAAwB,cAIxBC,EAA+B,SAAAC,GAAA,SAAAD,IAAA,OAAAE,EAAAA,EAAAA,GAAA,KAAAF,G,EAAA,K,EAAAA,E,EAAAG,U,0GAAA,CAUlC,OAVkCC,EAAAA,EAAAA,GAAAJ,EAAAC,IAAAI,EAAAA,EAAAA,GAAAL,EAAA,EAAAM,IAAA,SAAAC,MACnC,SAAOC,EAASC,EAASC,IAEvBC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAZ,EAAAa,WAAA,eAAAC,KAAA,KAAaN,EAASC,EAASC,GAG3BD,EAAQV,KACVU,EAV2B,oBAUSA,EAAQV,UACrCU,EAAQV,GAEnB,KAACC,CAAA,CAVkC,CAASe,EAAAA,IAa9CjC,EAASkC,iBAAiBvB,GAC1BX,EAASmC,SAAS,CAChBC,eAAgB,IAAIC,EAAAA,EACpBC,WAAY,IAAIpB,KAGlBqB,EAAAA,EAAAA,GAAyB,CACvBC,iBAAkB,I","sources":["UITelemetry/auto-otel-web.js"],"sourcesContent":["import { BatchSpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport { WebTracerProvider } from \"@opentelemetry/sdk-trace-web\";\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nimport { ZoneContextManager } from \"@opentelemetry/context-zone\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-proto\";\nimport { Resource } from \"@opentelemetry/resources\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\nimport { getAppsmithConfigs } from \"@appsmith/configs\";\nimport { W3CTraceContextPropagator } from \"@opentelemetry/core\";\n\nconst { newRelic } = getAppsmithConfigs();\nconst { applicationId, otlpEndpoint, otlpLicenseKey, otlpServiceName } =\n  newRelic;\n\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: otlpServiceName,\n    [SemanticResourceAttributes.SERVICE_INSTANCE_ID]: applicationId,\n    [SemanticResourceAttributes.SERVICE_VERSION]: \"1.0.0\",\n  }),\n});\n\nconst newRelicExporter = new OTLPTraceExporter({\n  url: `${otlpEndpoint}/v1/traces`,\n  headers: {\n    \"api-key\": otlpLicenseKey,\n  },\n});\n\nconst processor = new BatchSpanProcessor(\n  newRelicExporter,\n  //Optional BatchSpanProcessor Configurations\n  {\n    // The maximum queue size. After the size is reached spans are dropped.\n    maxQueueSize: 100,\n    // The maximum batch size of every export. It must be smaller or equal to maxQueueSize.\n    maxExportBatchSize: 50,\n    // The interval between two consecutive exports\n    scheduledDelayMillis: 500,\n    // How long the export can run before it is cancelled\n    exportTimeoutMillis: 30000,\n  },\n);\n\nconst W3C_OTLP_TRACE_HEADER = \"traceparent\";\nconst CUSTOM_OTLP_TRACE_HEADER = \"traceparent-otlp\";\n//We are overriding the default header \"traceparent\" used for trace context because the browser\n// agent shares the same header's distributed tracing\nclass CustomW3CTraceContextPropagator extends W3CTraceContextPropagator {\n  inject(context, carrier, setter) {\n    // Call the original inject method to get the default traceparent header\n    super.inject(context, carrier, setter);\n\n    // Modify the carrier to use a different header\n    if (carrier[W3C_OTLP_TRACE_HEADER]) {\n      carrier[CUSTOM_OTLP_TRACE_HEADER] = carrier[W3C_OTLP_TRACE_HEADER];\n      delete carrier[W3C_OTLP_TRACE_HEADER]; // Remove the original traceparent header\n    }\n  }\n}\n\nprovider.addSpanProcessor(processor);\nprovider.register({\n  contextManager: new ZoneContextManager(),\n  propagator: new CustomW3CTraceContextPropagator(),\n});\n\nregisterInstrumentations({\n  instrumentations: [],\n});\n"],"names":["newRelic","getAppsmithConfigs","applicationId","otlpEndpoint","otlpLicenseKey","otlpServiceName","provider","WebTracerProvider","resource","Resource","_defineProperty","SemanticResourceAttributes","newRelicExporter","OTLPTraceExporter","url","concat","headers","processor","BatchSpanProcessor","maxQueueSize","maxExportBatchSize","scheduledDelayMillis","exportTimeoutMillis","W3C_OTLP_TRACE_HEADER","CustomW3CTraceContextPropagator","_W3CTraceContextPropa","_classCallCheck","arguments","_inherits","_createClass","key","value","context","carrier","setter","_get","_getPrototypeOf","prototype","call","W3CTraceContextPropagator","addSpanProcessor","register","contextManager","ZoneContextManager","propagator","registerInstrumentations","instrumentations"],"sourceRoot":""}