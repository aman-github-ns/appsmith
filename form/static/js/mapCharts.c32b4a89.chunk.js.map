{"version":3,"file":"static/js/mapCharts.c32b4a89.chunk.js","mappings":"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H,EAAAA,GAAAA,KAAgB,CACf,MAAO,CACLE,YAAa,KACbC,MAAO,eAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,mBAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,iBAET,MAAO,CACLD,YAAa,KACbC,MAAO,iBAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,eAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,sBAET,MAAO,CACLD,YAAa,KACbC,MAAO,gBAET,MAAO,CACLD,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,gBAET,MAAO,CACLD,YAAa,KACbC,MAAO,wBAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAGVH,EAAAA,GAAAA,QAAmB,CAClB,MAAO,CACLE,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,oBAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,iBAET,MAAO,CACLD,YAAa,KACbC,MAAO,eAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,oBAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,mBAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,mBAET,MAAO,CACLD,YAAa,KACbC,MAAO,oBAGT,MAAO,CACLD,YAAa,KACbC,MAAO,eAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,kBAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,0BAGVH,EAAAA,GAAAA,OAAkB,CACjB,MAAO,CACLE,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,gBAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,kBAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,4BAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,iBAET,MAAO,CACLD,YAAa,KACbC,MAAO,oCAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,qBAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,YAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,iBAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,UAET,MAAO,CACLD,YAAa,KACbC,MAAO,QAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,aAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,cAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa,KACbC,MAAO,SAET,MAAO,CACLD,YAAa,KACbC,MAAO,WAET,MAAO,CACLD,YAAa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","sources":["widgets/MapChartWidget/component/countryDetails.ts","widgets/MapChartWidget/component/utilities.ts","widgets/MapChartWidget/component/index.tsx"],"sourcesContent":["import { MapTypes } from \"widgets/MapChartWidget/constants\";\n\n/*\n * Map of country/region code to the details (short_label, full name).\n *\n * Why we need this?\n *  - We need this data to populate the label and tooltip. These values are not part of the underlying map.\n */\nexport default {\n  [MapTypes.WORLD]: {\n    AF: {\n      short_label: \"AF\",\n      label: \"Africa\",\n    },\n    AS: {\n      short_label: \"AS\",\n      label: \"Asia\",\n    },\n    AU: {\n      short_label: \"AU\",\n      label: \"Australia\",\n    },\n    EU: {\n      short_label: \"EU\",\n      label: \"Europe\",\n    },\n    NA: {\n      short_label: \"NA\",\n      label: \"North America\",\n    },\n    SA: {\n      short_label: \"SA\",\n      label: \"South America\",\n    },\n  },\n  [MapTypes.WORLD_WITH_ANTARCTICA]: {\n    AF: {\n      short_label: \"AF\",\n      label: \"Africa\",\n    },\n    AT: {\n      short_label: \"AT\",\n      label: \"Antarctica\",\n    },\n    AS: {\n      short_label: \"AS\",\n      label: \"Asia\",\n    },\n    AU: {\n      short_label: \"AU\",\n      label: \"Australia\",\n    },\n    EU: {\n      short_label: \"EU\",\n      label: \"Europe\",\n    },\n    NA: {\n      short_label: \"NA\",\n      label: \"North America\",\n    },\n    SA: {\n      short_label: \"SA\",\n      label: \"South America\",\n    },\n  },\n  [MapTypes.EUROPE]: {\n    \"001\": {\n      short_label: \"AL\",\n      label: \"Albania\",\n    },\n    \"002\": {\n      short_label: \"AD\",\n      label: \"Andorra\",\n    },\n    \"003\": {\n      short_label: \"AT\",\n      label: \"Austria\",\n    },\n    \"004\": {\n      short_label: \"BY\",\n      label: \"Belarus\",\n    },\n    \"005\": {\n      short_label: \"BE\",\n      label: \"Belgium\",\n    },\n    \"006\": {\n      short_label: \"BA\",\n      label: \"Bosnia and Herzegovina\",\n    },\n    \"007\": {\n      short_label: \"BG\",\n      label: \"Bulgaria\",\n    },\n    \"008\": {\n      short_label: \"HY\",\n      label: \"Croatia\",\n    },\n    \"044\": {\n      short_label: \"CY\",\n      label: \"Cyprus\",\n    },\n    \"009\": {\n      short_label: \"CZ\",\n      label: \"Czech Republic\",\n    },\n    \"010\": {\n      short_label: \"DK\",\n      label: \"Denmark\",\n    },\n    \"011\": {\n      short_label: \"EE\",\n      label: \"Estonia\",\n    },\n    \"012\": {\n      short_label: \"FI\",\n      label: \"Finland\",\n    },\n    \"013\": {\n      short_label: \"FR\",\n      label: \"France\",\n    },\n    \"014\": {\n      short_label: \"DE\",\n      label: \"Germany\",\n    },\n    \"015\": {\n      short_label: \"GR\",\n      label: \"Greece\",\n    },\n    \"016\": {\n      short_label: \"HU\",\n      label: \"Hungary\",\n    },\n    \"017\": {\n      short_label: \"IS\",\n      label: \"Iceland\",\n    },\n    \"018\": {\n      short_label: \"IE\",\n      label: \"Ireland\",\n    },\n    \"019\": {\n      short_label: \"IT\",\n      label: \"Italy\",\n    },\n    \"047\": {\n      short_label: \"KO\",\n      label: \"Kosovo\",\n    },\n    \"020\": {\n      short_label: \"LV\",\n      label: \"Latvia\",\n    },\n    \"021\": {\n      short_label: \"LI\",\n      label: \"Liechtenstein\",\n    },\n    \"022\": {\n      short_label: \"LT\",\n      label: \"Lithuania\",\n    },\n    \"023\": {\n      short_label: \"LU\",\n      label: \"Luxembourg\",\n    },\n    \"024\": {\n      short_label: \"MK\",\n      label: \"Macedonia\",\n    },\n    \"025\": {\n      short_label: \"MT\",\n      label: \"Malta\",\n    },\n    \"026\": {\n      short_label: \"MD\",\n      label: \"Moldova\",\n    },\n    \"027\": {\n      short_label: \"MC\",\n      label: \"Monaco\",\n    },\n    \"028\": {\n      short_label: \"MO\",\n      label: \"Montenegro\",\n    },\n    \"029\": {\n      short_label: \"NL\",\n      label: \"Netherlands\",\n    },\n    \"030\": {\n      short_label: \"NO\",\n      label: \"Norway\",\n    },\n    \"031\": {\n      short_label: \"PL\",\n      label: \"Poland\",\n    },\n    \"032\": {\n      short_label: \"PT\",\n      label: \"Portugal\",\n    },\n    \"033\": {\n      short_label: \"RO\",\n      label: \"Romania\",\n    },\n    \"046\": {\n      short_label: \"RU\",\n      label: \"Russia\",\n    },\n    \"034\": {\n      short_label: \"SM\",\n      label: \"San Marino\",\n    },\n    \"035\": {\n      short_label: \"CS\",\n      label: \"Serbia\",\n    },\n    \"036\": {\n      short_label: \"SK\",\n      label: \"Slovakia\",\n    },\n    \"037\": {\n      short_label: \"SL\",\n      label: \"Slovenia\",\n    },\n    \"038\": {\n      short_label: \"ES\",\n      label: \"Spain\",\n    },\n    \"039\": {\n      short_label: \"SE\",\n      label: \"Sweden\",\n    },\n    \"040\": {\n      short_label: \"CH\",\n      label: \"Switzerland\",\n    },\n    \"045\": {\n      short_label: \"TK\",\n      label: \"Turkey\",\n    },\n    \"041\": {\n      short_label: \"UA\",\n      label: \"Ukraine\",\n    },\n    \"042\": {\n      short_label: \"UK\",\n      label: \"United Kingdom\",\n    },\n    \"043\": {\n      short_label: \"VA\",\n      label: \"Vatican City\",\n    },\n  },\n  [MapTypes.NORTH_AMERICA]: {\n    \"001\": {\n      short_label: \"AG\",\n      label: \"Antigua and Barbuda\",\n    },\n    \"002\": {\n      short_label: \"BS\",\n      label: \"Bahamas\",\n    },\n    \"003\": {\n      short_label: \"BB\",\n      label: \"Barbados\",\n    },\n    \"004\": {\n      short_label: \"BZ\",\n      label: \"Belize\",\n    },\n    \"005\": {\n      short_label: \"CA\",\n      label: \"Canada\",\n    },\n    \"026\": {\n      short_label: \"KY\",\n      label: \"Cayman Islands\",\n    },\n    \"006\": {\n      short_label: \"CR\",\n      label: \"Costa Rica\",\n    },\n    \"007\": {\n      short_label: \"CU\",\n      label: \"Cuba\",\n    },\n    \"008\": {\n      short_label: \"DM\",\n      label: \"Dominica\",\n    },\n    \"009\": {\n      short_label: \"DO\",\n      label: \"Dominican Rep.\",\n    },\n    \"010\": {\n      short_label: \"SV\",\n      label: \"El Salvador\",\n    },\n    \"024\": {\n      short_label: \"GL\",\n      label: \"Greenland\",\n    },\n    \"011\": {\n      short_label: \"GD\",\n      label: \"Grenada\",\n    },\n    \"012\": {\n      short_label: \"GT\",\n      label: \"Guatemala\",\n    },\n    \"013\": {\n      short_label: \"HT\",\n      label: \"Haiti\",\n    },\n    \"014\": {\n      short_label: \"HN\",\n      label: \"Honduras\",\n    },\n    \"015\": {\n      short_label: \"JM\",\n      label: \"Jamaica\",\n    },\n    \"016\": {\n      short_label: \"MX\",\n      label: \"Mexico\",\n    },\n    \"017\": {\n      short_label: \"NI\",\n      label: \"Nicaragua\",\n    },\n    \"018\": {\n      short_label: \"PA\",\n      label: \"Panama\",\n    },\n    \"025\": {\n      short_label: \"PR\",\n      label: \"Puerto Rico\",\n    },\n    \"019\": {\n      short_label: \"KN\",\n      label: \"St. Kitts & Nevis\",\n    },\n    \"020\": {\n      short_label: \"LC\",\n      label: \"St. Lucia\",\n    },\n    \"021\": {\n      short_label: \"VC\",\n      label: \"St. Vincent & the Grenadines\",\n    },\n    \"022\": {\n      short_label: \"TT\",\n      label: \"Trinidad & Tobago\",\n    },\n    \"023\": {\n      short_label: \"US\",\n      label: \"United States\",\n    },\n  },\n  [MapTypes.SOURTH_AMERICA]: {\n    \"001\": {\n      short_label: \"AR\",\n      label: \"Argentina\",\n    },\n    \"002\": {\n      short_label: \"BO\",\n      label: \"Bolivia\",\n    },\n    \"003\": {\n      short_label: \"BR\",\n      label: \"Brazil\",\n    },\n    \"004\": {\n      short_label: \"CL\",\n      label: \"Chile\",\n    },\n    \"005\": {\n      short_label: \"CO\",\n      label: \"Colombia\",\n    },\n    \"006\": {\n      short_label: \"EC\",\n      label: \"Ecuador\",\n    },\n    \"007\": {\n      short_label: \"FK\",\n      label: \"Falkland Islands\",\n    },\n    \"008\": {\n      short_label: \"GF\",\n      label: \"French Guiana\",\n    },\n    \"015\": {\n      short_label: \"GI\",\n      label: \"Galapagos Islands\",\n    },\n    \"009\": {\n      short_label: \"GY\",\n      label: \"Guyana\",\n    },\n    \"010\": {\n      short_label: \"PY\",\n      label: \"Paraguay\",\n    },\n    \"011\": {\n      short_label: \"PE\",\n      label: \"Peru\",\n    },\n    \"016\": {\n      short_label: \"SG\",\n      label: \"South Georgia Island\",\n    },\n    \"012\": {\n      short_label: \"SR\",\n      label: \"Suriname\",\n    },\n    \"013\": {\n      short_label: \"UY\",\n      label: \"Uruguay\",\n    },\n    \"014\": {\n      short_label: \"VE\",\n      label: \"Venezuela\",\n    },\n  },\n  [MapTypes.ASIA]: {\n    \"001\": {\n      short_label: \"AF\",\n      label: \"Afghanistan\",\n    },\n    \"002\": {\n      short_label: \"AM\",\n      label: \"Armenia\",\n    },\n    \"003\": {\n      short_label: \"AZ\",\n      label: \"Azerbaijan\",\n    },\n    \"060\": {\n      short_label: \"BA\",\n      label: \"Bahrain\",\n    },\n    \"005\": {\n      short_label: \"BD\",\n      label: \"Bangladesh\",\n    },\n    \"006\": {\n      short_label: \"BT\",\n      label: \"Bhutan\",\n    },\n    \"007\": {\n      short_label: \"BN\",\n      label: \"Brunei\",\n    },\n    \"008\": {\n      short_label: \"MM\",\n      label: \"Burma (Myanmar)\",\n    },\n    \"009\": {\n      short_label: \"KH\",\n      label: \"Cambodia\",\n    },\n    \"010\": {\n      short_label: \"CN\",\n      label: \"China\",\n    },\n    \"012\": {\n      short_label: \"TP\",\n      label: \"East Timor\",\n    },\n    \"013\": {\n      short_label: \"GE\",\n      label: \"Georgia\",\n    },\n    \"050\": {\n      short_label: \"HK\",\n      label: \"Hong Kong\",\n    },\n    \"014\": {\n      short_label: \"IN\",\n      label: \"India\",\n    },\n    \"015\": {\n      short_label: \"ID\",\n      label: \"Indonesia\",\n    },\n    \"016\": {\n      short_label: \"IR\",\n      label: \"Iran\",\n    },\n    \"054\": {\n      short_label: \"IZ\",\n      label: \"Iraq\",\n    },\n    \"063\": {\n      short_label: \"IS\",\n      label: \"Israel\",\n    },\n    \"019\": {\n      short_label: \"JP\",\n      label: \"Japan\",\n    },\n    \"062\": {\n      short_label: \"JO\",\n      label: \"Jordan\",\n    },\n    \"021\": {\n      short_label: \"KZ\",\n      label: \"Kazakhstan\",\n    },\n    \"022\": {\n      short_label: \"KP\",\n      label: \"Korea (north)\",\n    },\n    \"023\": {\n      short_label: \"KR\",\n      label: \"Korea (south)\",\n    },\n    \"061\": {\n      short_label: \"KU\",\n      label: \"Kuwait\",\n    },\n    \"025\": {\n      short_label: \"KG\",\n      label: \"Kyrgyzstan\",\n    },\n    \"026\": {\n      short_label: \"LA\",\n      label: \"Laos\",\n    },\n    \"064\": {\n      short_label: \"LE\",\n      label: \"Lebanon\",\n    },\n    \"051\": {\n      short_label: \"MO\",\n      label: \"Macau\",\n    },\n    \"028\": {\n      short_label: \"MY\",\n      label: \"Malaysia\",\n    },\n    \"030\": {\n      short_label: \"MN\",\n      label: \"Mongolia\",\n    },\n    \"031\": {\n      short_label: \"NP\",\n      label: \"Nepal\",\n    },\n    \"057\": {\n      short_label: \"MU\",\n      label: \"Oman\",\n    },\n    \"033\": {\n      short_label: \"PK\",\n      label: \"Pakistan\",\n    },\n    \"034\": {\n      short_label: \"PH\",\n      label: \"Philippines\",\n    },\n    \"059\": {\n      short_label: \"QA\",\n      label: \"Qatar\",\n    },\n    \"036\": {\n      short_label: \"RU\",\n      label: \"Russian Federation\",\n    },\n    \"055\": {\n      short_label: \"SA\",\n      label: \"Saudi Arabia\",\n    },\n    \"038\": {\n      short_label: \"SG\",\n      label: \"Singapore\",\n    },\n    \"039\": {\n      short_label: \"LK\",\n      label: \"Sri Lanka\",\n    },\n    \"053\": {\n      short_label: \"SY\",\n      label: \"Syria\",\n    },\n    \"049\": {\n      short_label: \"TW\",\n      label: \"Taiwan\",\n    },\n    \"041\": {\n      short_label: \"TJ\",\n      label: \"Tajikistan\",\n    },\n    \"042\": {\n      short_label: \"TH\",\n      label: \"Thailand\",\n    },\n    \"052\": {\n      short_label: \"TU\",\n      label: \"Turkey\",\n    },\n    \"044\": {\n      short_label: \"TM\",\n      label: \"Turkmenistan\",\n    },\n    \"058\": {\n      short_label: \"AE\",\n      label: \"United Arab Emirates\",\n    },\n    \"046\": {\n      short_label: \"UZ\",\n      label: \"Uzbekistan\",\n    },\n    \"047\": {\n      short_label: \"VN\",\n      label: \"Vietnam\",\n    },\n    \"056\": {\n      short_label: \"YM\",\n      label: \"Yemen\",\n    },\n  },\n  [MapTypes.OCEANIA]: {\n    \"001\": {\n      short_label: \"AU\",\n      label: \"Australia\",\n    },\n    \"002\": {\n      short_label: \"FJ\",\n      label: \"Fiji\",\n    },\n    \"003\": {\n      short_label: \"KI\",\n      label: \"Kiribati\",\n    },\n    \"004\": {\n      short_label: \"MH\",\n      label: \"Marshall Islands\",\n    },\n    \"005\": {\n      short_label: \"FM\",\n      label: \"Micronesia\",\n    },\n    \"006\": {\n      short_label: \"NR\",\n      label: \"Nauru\",\n    },\n    \"015\": {\n      short_label: \"NC\",\n      label: \"New Caledonia\",\n    },\n    \"007\": {\n      short_label: \"NZ\",\n      label: \"New Zealand\",\n    },\n    \"008\": {\n      short_label: \"PW\",\n      label: \"Palau\",\n    },\n    \"009\": {\n      short_label: \"PG\",\n      label: \"Papua New Guinea\",\n    },\n    \"010\": {\n      short_label: \"WS\",\n      label: \"Samoa\",\n    },\n    \"011\": {\n      short_label: \"SB\",\n      label: \"Solomon Islands\",\n    },\n    \"012\": {\n      short_label: \"TO\",\n      label: \"Tonga\",\n    },\n    \"013\": {\n      short_label: \"TV\",\n      label: \"Tuvalu\",\n    },\n    \"014\": {\n      short_label: \"VU\",\n      label: \"Vanuatu\",\n    },\n    \"016\": {\n      short_label: \"PC\",\n      label: \"Pitcairn Island\",\n    },\n    \"017\": {\n      short_label: \"FP\",\n      label: \"French Polynesia\",\n    },\n\n    \"022\": {\n      short_label: \"CO\",\n      label: \"Cook Island\",\n    },\n    \"018\": {\n      short_label: \"NI\",\n      label: \"Niue\",\n    },\n    \"019\": {\n      short_label: \"AS\",\n      label: \"American Samoa\",\n    },\n    \"020\": {\n      short_label: \"GU\",\n      label: \"Guam\",\n    },\n    \"021\": {\n      short_label: \"NM\",\n      label: \"North Mariana Island\",\n    },\n  },\n  [MapTypes.AFRICA]: {\n    \"001\": {\n      short_label: \"DZ\",\n      label: \"Algeria\",\n    },\n    \"002\": {\n      short_label: \"AO\",\n      label: \"Angola\",\n    },\n    \"003\": {\n      short_label: \"BJ\",\n      label: \"Benin\",\n    },\n    \"004\": {\n      short_label: \"BW\",\n      label: \"Botswana\",\n    },\n    \"005\": {\n      short_label: \"BF\",\n      label: \"Burkina Faso\",\n    },\n    \"006\": {\n      short_label: \"BI\",\n      label: \"Burundi\",\n    },\n    \"007\": {\n      short_label: \"CM\",\n      label: \"Cameroon\",\n    },\n    \"059\": {\n      short_label: \"CA\",\n      label: \"Canary Islands\",\n    },\n    \"008\": {\n      short_label: \"CV\",\n      label: \"Cape Verde\",\n    },\n    \"009\": {\n      short_label: \"CR\",\n      label: \"Central African Republic\",\n    },\n    \"010\": {\n      short_label: \"TD\",\n      label: \"Chad\",\n    },\n    \"057\": {\n      short_label: \"CG\",\n      label: \"Congo\",\n    },\n    \"012\": {\n      short_label: \"CI\",\n      label: \"Cote d'Ivoire\",\n    },\n    \"013\": {\n      short_label: \"CD\",\n      label: \"Democratic Republic of the Congo\",\n    },\n    \"014\": {\n      short_label: \"DJ\",\n      label: \"Djibouti\",\n    },\n    \"015\": {\n      short_label: \"EG\",\n      label: \"Egypt\",\n    },\n    \"016\": {\n      short_label: \"GQ\",\n      label: \"Equatorial Guinea\",\n    },\n    \"017\": {\n      short_label: \"ER\",\n      label: \"Eritrea\",\n    },\n    \"018\": {\n      short_label: \"ET\",\n      label: \"Ethiopia\",\n    },\n    \"019\": {\n      short_label: \"GA\",\n      label: \"Gabon\",\n    },\n    \"056\": {\n      short_label: \"GM\",\n      label: \"Gambia\",\n    },\n    \"020\": {\n      short_label: \"GH\",\n      label: \"Ghana\",\n    },\n    \"021\": {\n      short_label: \"GN\",\n      label: \"Guinea\",\n    },\n    \"022\": {\n      short_label: \"GW\",\n      label: \"Guinea-Bissau\",\n    },\n    \"023\": {\n      short_label: \"KE\",\n      label: \"Kenya\",\n    },\n    \"024\": {\n      short_label: \"LS\",\n      label: \"Lesotho\",\n    },\n    \"025\": {\n      short_label: \"LI\",\n      label: \"Liberia\",\n    },\n    \"026\": {\n      short_label: \"LR\",\n      label: \"Libya\",\n    },\n    \"027\": {\n      short_label: \"MG\",\n      label: \"Madagascar\",\n    },\n    \"028\": {\n      short_label: \"MW\",\n      label: \"Malawi\",\n    },\n    \"029\": {\n      short_label: \"ML\",\n      label: \"Mali\",\n    },\n    \"030\": {\n      short_label: \"MR\",\n      label: \"Mauritania\",\n    },\n    \"058\": {\n      short_label: \"MU\",\n      label: \"Mauritius\",\n    },\n    \"032\": {\n      short_label: \"MA\",\n      label: \"Morocco\",\n    },\n    \"033\": {\n      short_label: \"MZ\",\n      label: \"Mozambique\",\n    },\n    \"034\": {\n      short_label: \"NA\",\n      label: \"Namibia\",\n    },\n    \"035\": {\n      short_label: \"NE\",\n      label: \"Niger\",\n    },\n    \"036\": {\n      short_label: \"NG\",\n      label: \"Nigeria\",\n    },\n    \"038\": {\n      short_label: \"RW\",\n      label: \"Rwanda\",\n    },\n    \"040\": {\n      short_label: \"ST\",\n      label: \"Sao Tome and Principe\",\n    },\n    \"041\": {\n      short_label: \"SN\",\n      label: \"Senegal\",\n    },\n    \"042\": {\n      short_label: \"SY\",\n      label: \"Seychelles\",\n    },\n    \"043\": {\n      short_label: \"SL\",\n      label: \"Sierra Leone\",\n    },\n    \"044\": {\n      short_label: \"SO\",\n      label: \"Somalia\",\n    },\n    \"045\": {\n      short_label: \"ZA\",\n      label: \"South Africa\",\n    },\n    \"060\": {\n      short_label: \"SS\",\n      label: \"South Sudan\",\n    },\n    \"046\": {\n      short_label: \"SD\",\n      label: \"Sudan\",\n    },\n    \"047\": {\n      short_label: \"SZ\",\n      label: \"Swaziland\",\n    },\n    \"048\": {\n      short_label: \"TZ\",\n      label: \"Tanzania\",\n    },\n    \"049\": {\n      short_label: \"TG\",\n      label: \"Togo\",\n    },\n    \"051\": {\n      short_label: \"TN\",\n      label: \"Tunisia\",\n    },\n    \"052\": {\n      short_label: \"UG\",\n      label: \"Uganda\",\n    },\n    \"011\": {\n      short_label: \"KM\",\n      label: \"Union of Comoros\",\n    },\n    \"053\": {\n      short_label: \"WS\",\n      label: \"Western Sahara\",\n    },\n    \"054\": {\n      short_label: \"ZM\",\n      label: \"Zambia\",\n    },\n    \"055\": {\n      short_label: \"ZW\",\n      label: \"Zimbabwe\",\n    },\n    \"061\": {\n      short_label: \"SL\",\n      label: \"Somaliland\",\n    },\n    \"062\": {\n      short_label: \"BT\",\n      label: \"Bir Tawil\",\n    },\n  },\n  [MapTypes.USA]: {\n    AL: {\n      short_label: \"AL\",\n      label: \"Alabama\",\n    },\n    AK: {\n      short_label: \"AK\",\n      label: \"Alaska\",\n    },\n    AZ: {\n      short_label: \"AZ\",\n      label: \"Arizona\",\n    },\n    AR: {\n      short_label: \"AR\",\n      label: \"Arkansas\",\n    },\n    CA: {\n      short_label: \"CA\",\n      label: \"California\",\n    },\n    CO: {\n      short_label: \"CO\",\n      label: \"Colorado\",\n    },\n    CT: {\n      short_label: \"CT\",\n      label: \"Connecticut\",\n    },\n    DE: {\n      short_label: \"DE\",\n      label: \"Delaware\",\n    },\n    DC: {\n      short_label: \"DC\",\n      label: \"District of Columbia\",\n    },\n    FL: {\n      short_label: \"FL\",\n      label: \"Florida\",\n    },\n    GA: {\n      short_label: \"GA\",\n      label: \"Georgia\",\n    },\n    HI: {\n      short_label: \"HI\",\n      label: \"Hawaii\",\n    },\n    ID: {\n      short_label: \"ID\",\n      label: \"Idaho\",\n    },\n    IL: {\n      short_label: \"IL\",\n      label: \"Illinois\",\n    },\n    IN: {\n      short_label: \"IN\",\n      label: \"Indiana\",\n    },\n    IA: {\n      short_label: \"IA\",\n      label: \"Iowa\",\n    },\n    KS: {\n      short_label: \"KS\",\n      label: \"Kansas\",\n    },\n    KY: {\n      short_label: \"KY\",\n      label: \"Kentucky\",\n    },\n    LA: {\n      short_label: \"LA\",\n      label: \"Louisiana\",\n    },\n    ME: {\n      short_label: \"ME\",\n      label: \"Maine\",\n    },\n    MD: {\n      short_label: \"MD\",\n      label: \"Maryland\",\n    },\n    MA: {\n      short_label: \"MA\",\n      label: \"Massachusetts\",\n    },\n    MI: {\n      short_label: \"MI\",\n      label: \"Michigan\",\n    },\n    MN: {\n      short_label: \"MN\",\n      label: \"Minnesota\",\n    },\n    MS: {\n      short_label: \"MS\",\n      label: \"Mississippi\",\n    },\n    MO: {\n      short_label: \"MO\",\n      label: \"Missouri\",\n    },\n    MT: {\n      short_label: \"MT\",\n      label: \"Montana\",\n    },\n    NE: {\n      short_label: \"NE\",\n      label: \"Nebraska\",\n    },\n    NV: {\n      short_label: \"NV\",\n      label: \"Nevada\",\n    },\n    NH: {\n      short_label: \"NH\",\n      label: \"New Hampshire\",\n    },\n    NJ: {\n      short_label: \"NJ\",\n      label: \"New Jersey\",\n    },\n    NM: {\n      short_label: \"NM\",\n      label: \"New Mexico\",\n    },\n    NY: {\n      short_label: \"NY\",\n      label: \"New York\",\n    },\n    NC: {\n      short_label: \"NC\",\n      label: \"North Carolina\",\n    },\n    ND: {\n      short_label: \"ND\",\n      label: \"North Dakota\",\n    },\n    OH: {\n      short_label: \"OH\",\n      label: \"Ohio\",\n    },\n    OK: {\n      short_label: \"OK\",\n      label: \"Oklahoma\",\n    },\n    OR: {\n      short_label: \"OR\",\n      label: \"Oregon\",\n    },\n    PA: {\n      short_label: \"PA\",\n      label: \"Pennsylvania\",\n    },\n    RI: {\n      short_label: \"RI\",\n      label: \"Rhode Island\",\n    },\n    SC: {\n      short_label: \"SC\",\n      label: \"South Carolina\",\n    },\n    SD: {\n      short_label: \"SD\",\n      label: \"South Dakota\",\n    },\n    TN: {\n      short_label: \"TN\",\n      label: \"Tennessee\",\n    },\n    TX: {\n      short_label: \"TX\",\n      label: \"Texas\",\n    },\n    UT: {\n      short_label: \"UT\",\n      label: \"Utah\",\n    },\n    VT: {\n      short_label: \"VT\",\n      label: \"Vermont\",\n    },\n    VA: {\n      short_label: \"VA\",\n      label: \"Virginia\",\n    },\n    WA: {\n      short_label: \"WA\",\n      label: \"Washington\",\n    },\n    WV: {\n      short_label: \"WV\",\n      label: \"West Virginia\",\n    },\n    WI: {\n      short_label: \"WI\",\n      label: \"Wisconsin\",\n    },\n    WY: {\n      short_label: \"WY\",\n      label: \"Wyoming\",\n    },\n    PR: {\n      short_label: \"PR\",\n      label: \"Puerto Rico\",\n    },\n  },\n} as Record<MapTypes, Record<string, { short_label: string; label: string }>>;\n","import * as echarts from \"echarts\";\nimport countryDetails from \"./countryDetails\";\nimport { MapTypes } from \"../constants\";\nimport { geoAlbers, geoAzimuthalEqualArea, geoMercator } from \"d3-geo\";\nimport log from \"loglevel\";\nimport * as Sentry from \"@sentry/react\";\nimport { retryPromise } from \"utils/AppsmithUtils\";\n\ninterface GeoSpecialAreas {\n  [areaName: string]: {\n    left: number;\n    top: number;\n    width?: number;\n    height?: number;\n  };\n}\n\nexport function getSpecialAreas(map: MapTypes): GeoSpecialAreas {\n  switch (map) {\n    case MapTypes.USA:\n      return {\n        AK: {\n          left: -131,\n          top: 25,\n          width: 15,\n        },\n        HI: {\n          left: -110,\n          top: 25,\n          width: 5,\n        },\n        PR: {\n          left: -76,\n          top: 26,\n          width: 2,\n        },\n      };\n    default:\n      return {};\n  }\n}\n\n/*\n * Function to load the map geojson file and register it with echarts\n */\nexport const loadMapGenerator = () => {\n  let abortController: AbortController | null = null;\n\n  return async (type: MapTypes) => {\n    if (!echarts.getMap(type)) {\n      if (abortController && abortController.abort) {\n        abortController.abort();\n      }\n\n      if (AbortController) {\n        abortController = new AbortController();\n      }\n\n      return retryPromise(\n        async () => {\n          return fetch(`/static/maps/${type}.json`, {\n            signal: abortController?.signal,\n          });\n        },\n        3,\n        0,\n        (error: any) => error.code !== 20,\n      )\n        .then(\n          (response) => response.json(),\n          (error) => {\n            abortController = null;\n\n            if (error.code !== 20) {\n              log.error({ error });\n              Sentry.captureException(error);\n            }\n          },\n        )\n        .then((geoJson) => {\n          abortController = null;\n          echarts.registerMap(type, geoJson, getSpecialAreas(type));\n        });\n    } else {\n      return Promise.resolve();\n    }\n  };\n};\n\nfunction getProjection(type: string) {\n  switch (type) {\n    case \"OCEANIA\":\n      return geoAzimuthalEqualArea()\n        .scale(242)\n        .center([22, -39])\n        .translate([480, 319])\n        .rotate([-165, 18, 0]);\n    case \"ASIA\":\n      return geoAzimuthalEqualArea()\n        .scale(400)\n        .center([-17, -26])\n        .translate([480, 303])\n        .rotate([-103, -55, 7]);\n    case \"AFRICA\":\n      return geoMercator()\n        .scale(278)\n        .center([110, 4])\n        .translate([936, 288])\n        .rotate([180, 180, 180]);\n    case \"SOURTH_AMERICA\":\n      return geoAlbers()\n        .scale(363)\n        .center([-15, 24])\n        .translate([450, 271])\n        .rotate([51, 55, 9]);\n    case \"NORTH_AMERICA\":\n      return geoAzimuthalEqualArea()\n        .scale(400)\n        .center([13, 25])\n        .translate([539, 415])\n        .rotate([-84, 174, -180]);\n  }\n}\n\nexport function getPositionOffset(\n  type: MapTypes,\n  width: number,\n  height: number,\n) {\n  switch (type) {\n    case MapTypes.SOURTH_AMERICA:\n    case MapTypes.NORTH_AMERICA:\n    case MapTypes.AFRICA:\n      return {\n        layoutSize: Math.min(width, height - 130),\n        layoutCenter: [\"50%\", height / 2 + 30],\n      };\n    case MapTypes.ASIA:\n      return {\n        layoutSize: Math.min(width, height - 65),\n        layoutCenter: [\"50%\", height / 2 + 30],\n      };\n    case MapTypes.EUROPE:\n    case MapTypes.USA:\n      return {\n        layoutSize: Math.min(width, height),\n        layoutCenter: [\"50%\", height / 2 + 30],\n      };\n    case MapTypes.WORLD:\n    case MapTypes.WORLD_WITH_ANTARCTICA:\n      return {\n        layoutSize: Math.min(width, height),\n        layoutCenter: [\"50%\", height / 2 + 40],\n      };\n    default:\n      return {};\n  }\n}\n\nexport const getChartOption = (\n  caption: string,\n  showLabel: boolean,\n  colorRangePieces: {\n    min: number;\n    max: number;\n    color: string;\n  }[],\n  data: { name: string; value: number }[],\n  type: MapTypes,\n  height: number,\n  width: number,\n  fontFamily?: string,\n) => {\n  const projection = getProjection(type);\n\n  let projectionConfig = {};\n\n  if (projection) {\n    projectionConfig = {\n      projection: {\n        project: (point: [number, number]) => projection(point),\n        unproject: (point: [number, number]) => projection.invert?.(point),\n        stream: projection.stream,\n      },\n    };\n  }\n\n  return {\n    title: {\n      text: caption,\n      left: \"center\",\n      top: \"12px\",\n      textStyle: {\n        fontSize: 24,\n        fontWeight: \"bold\",\n        fontFamily,\n      },\n    },\n    tooltip: {\n      trigger: \"item\",\n      showDelay: 0,\n      transitionDuration: 0.2,\n    },\n    visualMap: {\n      show: true,\n      type: \"piecewise\",\n      pieces: colorRangePieces,\n      formatter: (min: number, max: number) => {\n        return `${min}-${max}`;\n      },\n      orient: \"horizontal\",\n      top: \"68px\",\n      left: \"center\",\n      itemWidth: 12,\n      itemHeight: 12,\n      textStyle: {\n        fontSize: 14,\n        color: \"#4c5664\",\n        overflow: \"break\",\n      },\n      itemSymbol: \"rect\",\n    },\n    toolbox: {\n      show: false,\n    },\n    series: [\n      {\n        type: \"map\",\n        ...getPositionOffset(type, width, height),\n        roam: true,\n        map: type,\n        itemStyle: {\n          borderColor: \"#ccc\",\n          areaColor: \"#aeaeae\",\n        },\n        emphasis: {\n          itemStyle: {\n            areaColor: \"#FFF9C4\",\n          },\n        },\n        tooltip: {\n          show: true,\n          borderColor: \"#ccc\",\n          padding: [4, 8],\n          fontFamily,\n          formatter: (d: any) => {\n            const key = d?.name as string;\n            const label = countryDetails[type][key]?.[\"label\"];\n            return `${label}, ${d.data?.value || \"-\"}`;\n          },\n          textStyle: {\n            fontSize: 14,\n            color: \"#4c5664\",\n          },\n          extraCssText: \"border-radius: 0;\",\n        },\n        label: {\n          show: showLabel,\n          fontFamily,\n          position: \"top\",\n          formatter: (d: any) => {\n            const key = d?.name as string;\n            const label = countryDetails[type][key][\"short_label\"];\n            return `${label}: ${d.data?.value || \"-\"}`;\n          },\n          textStyle: {\n            fontSize: 12,\n            color: \"#4c5664\",\n          },\n        },\n        scaleLimit: {\n          min: 1,\n          max: 4,\n        },\n        labelLayout: () => {\n          return {\n            hideOverlap: true,\n          };\n        },\n        nameProperty: \"id\",\n        data,\n        ...projectionConfig,\n      },\n    ],\n  };\n};\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport type { MapColorObject, MapTypes } from \"../constants\";\nimport type { MapData } from \"./types\";\nimport { getChartOption, loadMapGenerator } from \"./utilities\";\nimport * as echarts from \"echarts\";\nimport countryDetails from \"./countryDetails\";\nimport clsx from \"clsx\";\n\nconst MapChartContainer = styled.div<{\n  borderRadius?: string;\n  boxShadow?: string;\n}>`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  background: white;\n  border-radius: ${({ borderRadius }) => borderRadius};\n  box-shadow: ${({ boxShadow }) => `${boxShadow}`};\n  overflow: hidden;\n\n  & > div {\n    width: 100%;\n  }\n`;\n\nexport default function EchartComponent(props: MapChartComponentProps) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadMap = useMemo(loadMapGenerator, []);\n\n  const [key, setKey] = useState(0);\n\n  const { caption, colorRange, data, onDataPointClick, showLabels, type } =\n    props;\n\n  const fontFamily =\n    props.fontFamily === \"System Default\" ? \"\" : props.fontFamily;\n\n  const colorRangePieces = useMemo(() => {\n    return colorRange.map((color) => {\n      const alpha = color.alpha ?? 100;\n\n      return {\n        min: color.minValue,\n        max: color.maxValue,\n        color: color.code,\n        colorAlpha: alpha ? alpha / 100 : 0,\n        label: color.displayValue,\n      };\n    });\n  }, [colorRange]);\n\n  const transformedData = useMemo(() => {\n    return data.map((each) => ({\n      name: each.id,\n      value: each.value,\n    }));\n  }, [data]);\n\n  const chartContainer = useRef<HTMLDivElement>(null);\n\n  const chartInstance = useRef<echarts.ECharts | null>();\n\n  useEffect(() => {\n    chartInstance.current = echarts.init(\n      chartContainer.current!,\n      {},\n      {\n        renderer: \"svg\",\n        width: props.width,\n        height: props.height,\n      },\n    );\n  }, [chartContainer]);\n\n  useEffect(() => {\n    const handler = (event: any) => {\n      const id = event.data.name;\n\n      const regionDetail = countryDetails[type][id];\n\n      onDataPointClick({\n        value: parseFloat(event.data.value),\n        label: regionDetail.label,\n        shortLabel: regionDetail.short_label,\n        originalId: id,\n        id: id.toLowerCase(),\n      });\n    };\n\n    chartInstance.current?.on(\"click\", \"series\", handler);\n\n    return () => {\n      chartInstance.current?.off(\"click\", handler);\n    };\n  }, [onDataPointClick, chartInstance.current, type]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    loadMap(type).then(() => {\n      setIsLoading(false);\n      // we are using Math.random to force the chart to set options again\n      // to avoid the race conditions while loading maps\n      setKey(Math.random());\n    });\n  }, [type]);\n\n  useEffect(() => {\n    if (!isLoading && !!echarts.getMap(type)) {\n      chartInstance.current?.setOption(\n        getChartOption(\n          caption,\n          showLabels,\n          colorRangePieces,\n          transformedData,\n          type,\n          props.height,\n          props.width,\n          fontFamily,\n        ),\n        true,\n      );\n    }\n  }, [\n    isLoading,\n    caption,\n    showLabels,\n    colorRangePieces,\n    transformedData,\n    fontFamily,\n    chartInstance.current,\n    type,\n    key,\n    props.height,\n    props.width,\n  ]);\n\n  useEffect(() => {\n    chartInstance.current?.resize({\n      width: props.width,\n      height: props.height,\n    });\n  }, [props.width, props.height]);\n\n  return (\n    <MapChartContainer\n      borderRadius={props.borderRadius}\n      boxShadow={props.boxShadow}\n      className={clsx({\n        \"bp3-skeleton\": isLoading,\n      })}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <div ref={chartContainer} />\n    </MapChartContainer>\n  );\n}\n\nexport interface MapChartComponentProps {\n  caption: string;\n  colorRange: MapColorObject[];\n  data: MapData[];\n  isVisible: boolean;\n  onDataPointClick: (evt: any) => void;\n  showLabels: boolean;\n  type: MapTypes;\n  borderRadius?: string;\n  boxShadow?: string;\n  fontFamily?: string;\n  height: number;\n  width: number;\n}\n"],"names":["_defineProperty","MapTypes","AF","short_label","label","AS","AU","EU","NA","SA","AT","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","PR","loadMapGenerator","abortController","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","type","wrap","_context2","prev","next","echarts","abort","AbortController","abrupt","retryPromise","_callee","_abortController","_context","fetch","concat","signal","stop","error","code","then","response","json","log","Sentry","geoJson","left","top","width","Promise","resolve","_x","apply","arguments","getPositionOffset","height","layoutSize","Math","min","layoutCenter","getChartOption","caption","showLabel","colorRangePieces","data","fontFamily","projection","geoAzimuthalEqualArea","scale","center","translate","rotate","geoMercator","geoAlbers","getProjection","projectionConfig","project","point","unproject","_projection$invert","invert","call","stream","title","text","textStyle","fontSize","fontWeight","tooltip","trigger","showDelay","transitionDuration","visualMap","show","pieces","formatter","max","orient","itemWidth","itemHeight","color","overflow","itemSymbol","toolbox","series","_objectSpread","roam","map","itemStyle","borderColor","areaColor","emphasis","padding","d","_countryDetails$type$","_d$data","key","name","countryDetails","value","extraCssText","position","_d$data2","scaleLimit","labelLayout","hideOverlap","nameProperty","MapChartContainer","styled","_templateObject","_taggedTemplateLiteral","borderRadius","_ref2","boxShadow","EchartComponent","props","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","loadMap","useMemo","_useState3","_useState4","setKey","colorRange","onDataPointClick","showLabels","_color$alpha","alpha","minValue","maxValue","colorAlpha","displayValue","transformedData","each","id","chartContainer","useRef","chartInstance","useEffect","current","renderer","_chartInstance$curren","handler","event","regionDetail","parseFloat","shortLabel","originalId","toLowerCase","on","_chartInstance$curren2","off","random","_chartInstance$curren3","setOption","_chartInstance$curren4","resize","_jsx","className","clsx","onClick","e","stopPropagation","children","ref"],"sourceRoot":""}