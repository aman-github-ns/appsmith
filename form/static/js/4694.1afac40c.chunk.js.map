{"version":3,"file":"static/js/4694.1afac40c.chunk.js","mappings":"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","sources":["../node_modules/d3-geo/src/compose.js","../node_modules/d3-geo/src/math.js","../node_modules/d3-geo/src/projection/conicEqualArea.js","../node_modules/d3-geo/src/projection/cylindricalEqualArea.js","../node_modules/d3-geo/src/projection/conic.js","../node_modules/d3-geo/src/projection/albers.js","../node_modules/d3-geo/src/projection/azimuthal.js","../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../node_modules/d3-geo/src/noop.js","../node_modules/d3-geo/src/clip/buffer.js","../node_modules/d3-geo/src/pointEqual.js","../node_modules/d3-geo/src/clip/rejoin.js","../node_modules/d3-array/src/fsum.js","../node_modules/d3-geo/src/cartesian.js","../node_modules/d3-geo/src/polygonContains.js","../node_modules/d3-array/src/merge.js","../node_modules/d3-geo/src/clip/index.js","../node_modules/d3-geo/src/clip/antimeridian.js","../node_modules/d3-geo/src/circle.js","../node_modules/d3-geo/src/clip/rectangle.js","../node_modules/d3-geo/src/clip/line.js","../node_modules/d3-geo/src/identity.js","../node_modules/d3-geo/src/transform.js","../node_modules/d3-geo/src/stream.js","../node_modules/d3-geo/src/path/bounds.js","../node_modules/d3-geo/src/projection/fit.js","../node_modules/d3-geo/src/projection/resample.js","../node_modules/d3-geo/src/projection/index.js","../node_modules/d3-geo/src/clip/circle.js","../node_modules/d3-geo/src/projection/mercator.js","../node_modules/d3-geo/src/rotation.js"],"sourcesContent":["export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","export default function noop() {}\n","import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","export default x => x;\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","import {atan, exp, halfPi, log, pi, tan, tau} from \"../math.js\";\nimport rotation from \"../rotation.js\";\nimport projection from \"./index.js\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n","import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n  return [lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    lambda += deltaLambda;\n    if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n    return [lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n"],"names":["a","b","compose","x","y","invert","epsilon","epsilon2","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","exp","ceil","log","floor","hypot","sin","pow","sign","sqrt","tan","acos","asin","conicEqualAreaRaw","y0","y1","sy0","n","phi0","cosPhi0","forward","lambda","phi","cylindricalEqualAreaRaw","c","r0","project","r","r0y","l","projectAt","phi1","m","projectionMutator","p","parallels","_","arguments","length","conicProjection","scale","center","conicEqualArea","translate","rotate","angle","azimuthalEqualAreaRaw","cxcy","cx","cy","k","Infinity","projection","clipAngle","z","sc","cc","noop","line","lines","point","push","lineStart","lineEnd","rejoin","pop","concat","shift","result","Intersection","points","other","entry","this","o","e","v","segments","compareIntersection","startInside","interpolate","stream","i","subject","clip","forEach","segment","p0","p1","pointEqual","sort","link","start","current","isSubject","array","Adder","_classCallCheck","_partials","Float64Array","_n","_createClass","key","value","j","hi","lo","spherical","cartesian","cosPhi","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","longitude","flatten","arrays","_iterator","_step","_regeneratorRuntime","wrap","_context","prev","next","_createForOfIteratorHelper","s","done","delegateYield","t1","f","finish","stop","_marked","merge","Array","from","pointVisible","clipLine","sink","polygon","ring","ringBuffer","clipBuffer","ringSink","polygonStarted","polygonStart","pointRing","ringStart","ringEnd","polygonEnd","sinPhi","normal","winding","sum","point0","lambda0","sinPhi0","lambda1","sinPhi1","cosPhi1","point1","delta","absDelta","antimeridian","add","arc","intersection","phiArc","polygonContains","clipRejoin","sphere","pointLine","clean","ringSegments","filter","validSegment","NaN","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","to","direction","circleStream","radius","t0","cosRadius","sinRadius","step","circleRadius","t","clipMax","clipMin","clipRectangle","x0","x1","visible","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","max","min","ax","ay","dx","dy","transformer","methods","TransformStream","streamGeometry","geometry","streamGeometryType","hasOwnProperty","type","prototype","constructor","streamObjectType","Feature","object","FeatureCollection","features","Sphere","Point","coordinates","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","boundsStream","bounds","fit","fitBounds","clipExtent","geoStream","fitExtent","extent","w","h","maxDepth","cosMinDistance","delta2","resampleLineTo","c0","c1","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample","resampleNone","transformRadians","scaleTranslateRotate","sx","sy","alpha","transform","scaleTranslate","cosAlpha","sinAlpha","ai","bi","ci","fi","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","deltaLambda","deltaPhi","deltaGamma","theta","preclip","clipAntimeridian","postclip","identity","recenter","apply","rotateRadians","reset","transformRotate","undefined","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c2","n1xn2","A","u","uu","t2","q","polar","q1","code","v0","v00","point2","clipCircle","reflectX","reflectY","precision","fitSize","size","fitWidth","width","fitHeight","height","mercatorRaw","reclip","rotation","mercatorProjection","rotationIdentity","round","rotationLambda","rotationPhiGamma","forwardRotationLambda","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma"],"sourceRoot":""}