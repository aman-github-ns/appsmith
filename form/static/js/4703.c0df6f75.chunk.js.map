{"version":3,"file":"static/js/4703.c0df6f75.chunk.js","mappings":"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","sources":["widgets/DocumentViewerWidget/component/ExcelDataParser.ts","widgets/DocumentViewerWidget/component/XlsxViewer.tsx","../node_modules/lodash/_baseIsDate.js","../node_modules/lodash/isDate.js"],"sourcesContent":["import _ from \"lodash\";\n\nexport type RawRowData = unknown[];\nexport type RawSheetData = RawRowData[];\n\n// key is column name, value is cell value\nexport type RowData = Record<string, unknown>;\n\nexport interface HeaderCell {\n  Header: string;\n  accessor: string;\n}\n\nexport interface ExcelData {\n  body: RowData[];\n  headers: HeaderCell[];\n}\n\nconst chars = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\n// get excel column name from index, e.g. A,B,...,AA,AB\nconst numberToExcelHeader = (index: number): string => {\n  const quotient = Math.floor(index / 26);\n  if (quotient > 0) {\n    return numberToExcelHeader(quotient - 1) + chars[index % 26];\n  }\n  return chars[index % 26];\n};\n\nexport const parseExcelData = (rawData: RawSheetData): ExcelData => {\n  const body: RowData[] = [];\n  const headers: HeaderCell[] = [];\n\n  for (const row of rawData) {\n    const currRow: RowData = {};\n\n    for (const [index, dataValue] of row.entries()) {\n      const columnLabel: string = numberToExcelHeader(index);\n\n      // process header\n      if (index == headers.length) {\n        // a higher column label has been encountered\n        headers.push(headerItemFromLabel(columnLabel));\n      }\n\n      // process body\n      let cellValue = dataValue;\n      if (_.isDate(dataValue)) {\n        cellValue = dataValue.toDateString();\n      }\n\n      currRow[columnLabel] = cellValue;\n    }\n\n    body.push(currRow);\n  }\n  return {\n    headers: headers,\n    body: body,\n  };\n};\n\nconst headerItemFromLabel = (label: string) => {\n  return {\n    Header: label,\n    accessor: label,\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable } from \"react-table\";\nimport { parseExcelData } from \"./ExcelDataParser\";\nimport type { RowData, HeaderCell, RawSheetData } from \"./ExcelDataParser\";\n\nimport * as XLSX from \"xlsx\";\n\nconst StyledViewer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #fff;\n  overflow: auto;\n\n  table {\n    border: 1px solid #b0cbef;\n    border-width: 1px 0 0 1px;\n    border-spacing: 0;\n    border-collapse: collapse;\n    padding: 10px;\n\n    th {\n      font-weight: 700;\n      font-size: 14px;\n      border: 1px solid #9eb6ce;\n      border-width: 0 1px 1px 0;\n      height: 17px;\n      line-height: 17px;\n      text-align: center;\n      background: #9eb6ce4d;\n    }\n\n    td {\n      background-color: #fff;\n      padding: 0 4px 0 2px;\n      border: 1px solid #d0d7e5;\n      border-width: 0 1px 1px 0;\n    }\n  }\n`;\n\ninterface DocumentViewerState {\n  sheetNames: string[];\n  currentTableData: RowData[];\n  currentTableHeaders: HeaderCell[];\n  tableData: Record<number, RowData[]>;\n  headerData: Record<number, HeaderCell[]>;\n}\n\nexport default function XlsxViewer(props: { blob?: Blob }) {\n  const [sheetIndex, setSheetIndex] = useState<number>(-1);\n  const [state, setState] = useState<DocumentViewerState>(newStateInstance());\n\n  useEffect(() => {\n    if (!props.blob) {\n      resetStates();\n    } else {\n      parseBlob(props.blob)\n        .then(\n          (jsonData: { sheetsData: RawSheetData[]; sheetNames: string[] }) => {\n            const newState = newStateInstance();\n            newState.sheetNames = jsonData.sheetNames;\n            const newSheetIndex = jsonData.sheetsData.length > 0 ? 0 : -1;\n\n            jsonData.sheetsData.forEach((data: RawSheetData, index: number) => {\n              const parsedData = parseExcelData(data);\n              newState.tableData[index] = parsedData.body;\n              newState.headerData[index] = parsedData.headers;\n            });\n\n            newState.currentTableData = newState.tableData[newSheetIndex];\n            newState.currentTableHeaders = newState.headerData[newSheetIndex];\n\n            setState(newState);\n            setSheetIndex(newSheetIndex);\n          },\n        )\n        .catch(() => {\n          resetStates();\n        });\n    }\n  }, [props.blob]);\n\n  async function parseBlob(\n    blob: Blob,\n  ): Promise<{ sheetsData: RawSheetData[]; sheetNames: string[] }> {\n    const buffer = await blob.arrayBuffer();\n    const workbook = XLSX.read(buffer, { type: \"array\" });\n    return convertWorkbookDataToJSON(workbook);\n  }\n\n  const convertWorkbookDataToJSON = (\n    workbook: XLSX.WorkBook,\n  ): { sheetsData: RawSheetData[]; sheetNames: string[] } => {\n    const sheetsData: RawSheetData[] = [];\n    const sheetNames: string[] = [];\n\n    workbook.SheetNames.forEach((sheetName) => {\n      sheetNames.push(sheetName);\n\n      const result: RawSheetData = XLSX.utils.sheet_to_json(\n        workbook.Sheets[sheetName],\n        { header: 1 },\n      );\n      sheetsData.push(result);\n    });\n\n    return { sheetsData, sheetNames };\n  };\n\n  function newStateInstance() {\n    const defaultTableData: Record<number, RowData[]> = { \"-1\": [] };\n    const defaultHeaderData: Record<number, HeaderCell[]> = { \"-1\": [] };\n    const newState: DocumentViewerState = {\n      sheetNames: [],\n      currentTableData: [],\n      currentTableHeaders: [],\n      tableData: { ...defaultTableData },\n      headerData: { ...defaultHeaderData },\n    };\n    return newState;\n  }\n\n  const resetStates = () => {\n    const newState = newStateInstance();\n    setState(newState);\n    setSheetIndex(-1);\n  };\n\n  const { getTableBodyProps, getTableProps, headerGroups, prepareRow, rows } =\n    useTable({\n      columns: state.headerData[sheetIndex],\n      data: state.tableData[sheetIndex],\n    });\n\n  return (\n    <StyledViewer>\n      <div>\n        {state.sheetNames.map((name, index) => (\n          <button\n            key={index}\n            onClick={() => {\n              setSheetIndex(index);\n            }}\n          >\n            {name}\n          </button>\n        ))}\n      </div>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, hgInd) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={hgInd}>\n              {headerGroup.headers.map((column, colId) => (\n                <th {...column.getHeaderProps()} key={colId}>\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, rInd) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} key={rInd}>\n                {row.cells.map((cell, ind) => {\n                  return (\n                    <td {...cell.getCellProps()} key={ind}>\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </StyledViewer>\n  );\n}\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n","var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n"],"names":["chars","numberToExcelHeader","index","quotient","Math","floor","parseExcelData","rawData","_step","body","headers","_iterator","_createForOfIteratorHelper","s","n","done","_step2","row","value","currRow","_iterator2","entries","_step2$value","_slicedToArray","dataValue","columnLabel","length","push","headerItemFromLabel","cellValue","_isDate","toDateString","err","e","f","label","Header","accessor","StyledViewer","styled","_templateObject","_taggedTemplateLiteral","XlsxViewer","props","_useState","useState","_useState2","sheetIndex","setSheetIndex","_useState3","newStateInstance","_useState4","state","setState","_parseBlob","_asyncToGenerator","_regeneratorRuntime","mark","_callee","blob","buffer","workbook","wrap","_context","prev","next","arrayBuffer","sent","XLSX","type","abrupt","convertWorkbookDataToJSON","stop","apply","arguments","useEffect","_x","parseBlob","then","jsonData","newState","sheetNames","newSheetIndex","sheetsData","forEach","data","parsedData","tableData","headerData","currentTableData","currentTableHeaders","catch","resetStates","SheetNames","sheetName","result","Sheets","header","_objectSpread","_useTable","useTable","columns","getTableBodyProps","getTableProps","headerGroups","prepareRow","rows","_jsxs","children","_jsx","map","name","onClick","headerGroup","hgInd","_createElement","getHeaderGroupProps","key","column","colId","getHeaderProps","render","rInd","getRowProps","cells","cell","ind","getCellProps","baseGetTag","require","isObjectLike","module","exports","baseIsDate","baseUnary","nodeUtil","nodeIsDate","isDate"],"sourceRoot":""}